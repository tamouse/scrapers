---
http_interactions:
- request:
    method: get
    uri: https://joan%40example.com:password@rubytapas.dpdcart.com/feed
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - rubytapas.dpdcart.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 28 Dec 2014 06:09:22 GMT
      Server:
      - Apache
      Set-Cookie:
      - symfony=4fb8j7unj4vdna13jf9rotqcq1; path=/; HttpOnly
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      Pragma:
      - no-cache
      Vary:
      - Accept-Encoding,User-Agent
      P3p:
      - CP="NOI CURa OUR NOR UNI"
      Connection:
      - close
      Content-Type:
      - application/rss+xml; charset=UTF-8
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\"
        version=\"2.0\">\n  <channel>\n    <title>RubyTapas</title>\n    <link>https://rubytapas.dpdcart.com/subscriber/content</link>\n
        \   <description/>\n    <pubDate>Thu, 25 Dec 2014 09:00:00 -0500</pubDate>\n
        \   <managingEditor>contact@shiprise.net (Avdi Grimm)</managingEditor>\n    <language>en</language>\n
        \   <copyright>Copyright 2014 RubyTapas</copyright>\n    <generator>getdpd.com</generator>\n
        \   <itunes:summary>RubyTapas: Small plates of gourmet code.</itunes:summary>\n
        \   <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    <image>\n
        \     <url>https://getdpd.com/uploads/ruby-tapas.png</url>\n      <title>Ruby
        Tapas</title>\n      <link>https://rubytapas.dpdcart.com/subscriber/content</link>\n
        \     <width>849</width>\n      <height>849</height>\n    </image>\n    <item>\n
        \     <title><![CDATA[267 Kernel Open with Rob Miller]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=652</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we are joined by special guest chef Rob Miller. Rob is the author of the soon-to-be-released
        book &quot;Text Processing with Ruby&quot;, a super cool book all about using
        Ruby as a power tool for ripping through plain text data. If you enjoy the
        kind of content you see on RubyTapas, I predict you&#39;ll also get a kick
        out of his book.</p>\r\n\r\n<p>In this episode, Rob shows us that Ruby&#39;s
        `open` method is a bit like Clark Kent: on the surface, it looks like a simple,
        mild-mannered method for opening files. But scratch the surface, and it has
        some awesome super-powers. Enjoy.</p>\r\n\r\n<p><strong>Show Notes:</strong></p>\r\n\r\n<ul>\r\n\t<li>Rob
        Miller on Twitter:&nbsp;<a href=\"https://twitter.com/robmil\">@robmil</a></li>\r\n\t<li><a
        href=\"https://robm.me.uk/\">Rob&#39;s Blog</a></li>\r\n\t<li><a href=\"https://leanpub.com/tpwr\">Text
        Processing with Ruby by Rob Miller</a></li>\r\n</ul>\r\n\r\n<hr />\r\n<p>If
        you&#39;ve used Ruby for any length of time, you&#39;re probably familiar
        with the open method of the File class.</p>\r\n\r\n<p>Pass it the name of
        a file and, optionally, the mode in which you want to open the file &mdash;
        it defaults to read-only &mdash; and it will return for you a File object
        that you can use to read from and write to that particular file.</p>\r\n\r\n<p>Pass
        it a block, and it will yield that file object to the block, cleaning up after
        you once the block is finished.</p>\r\n\r\n<p>Here, we&#39;re opening our
        system&#39;s dictionary and reading the first word from it; in this case,
        the slightly uninteresting &quot;A&quot;.</p>\r\n\r\n<h2>open as a shortcut</h2>\r\n\r\n<pre>\r\nopen(&quot;/usr/share/dict/words/&quot;,
        &quot;r&quot;) do |file|\r\n    file.gets\r\nend</pre>\r\n\r\n<p>File.open
        works well, and is widely used. But to save our precious fingers the effort
        of typing, Ruby&#39;s Kernel module provides a method, also called open, that
        achieves the same result. Since the Kernel module is mixed in to all objects,
        it&#39;s available as method anywhere you care to use it.</p>\r\n\r\n<p>This
        concision would probably be reason enough to use open rather than the lengthier
        File.open. But it turns out that Kernel&#39;s open method isn&#39;t a mere
        alias for that of the File class. It has some tricks of its own, too.</p>\r\n\r\n<h2>open
        with processes</h2>\r\n\r\n<pre>\r\nopen(&quot;|pbpaste&quot;, &quot;r&quot;)
        do |clipboard|\r\n    clipboard.read\r\nend</pre>\r\n\r\n<p>Here, we use the
        open method to open not a file, but a process. open knows to do this, rather
        than attempt to read a file, because the first character of the path that
        we pass to it is a pipe symbol.</p>\r\n\r\n<p>Behind the scenes, open is doing
        all sorts of plumbing for us; it&#39;s spawning a subprocess, and connecting
        the standard output stream of this subprocess to a pipe. This pipe is then
        yielded to the block passed into open, allowing us to use it to read from
        the process&#39;s output.</p>\r\n\r\n<p>In this case, the process that we&#39;re
        spawning is Mac OS X&#39;s pbpaste command, which allows us to read from the
        clipboard. This block, then, returns the text that&#39;s on the system clipboard.</p>\r\n\r\n<pre>\r\nopen(&quot;|
        ps ax | grep ruby&quot;) do |ps|\r\n    ps.gets.split.first\r\nend</pre>\r\n\r\n<p>But
        we could use open in this way to read from any command that produces output.
        We can even pass in pipeline chains, in which case our pipe will be connected
        to the standard output stream of the final process in the pipeline. In this
        example, we&#39;re using ps to search for Ruby processes running on our system.
        We&#39;re then taking the first line of output from ps, splitting on whitespace,
        and outputting the first field; this will print the process ID of the first
        Ruby process running on our system.</p>\r\n\r\n<h3>Writing not reading</h3>\r\n\r\n<pre>\r\nopen(&quot;|pbcopy&quot;,
        &quot;w&quot;) do |clipboard|\r\n    clipboard.write(&quot;hello, world&quot;)\r\nend</pre>\r\n\r\n<p>Of
        course, just like with files, we&#39;re not limited only to reading from the
        process&#39;s standard output stream. We can also write to its standard input
        stream, too.</p>\r\n\r\n<p>In this example we use the pbcopy command, which
        copies text to the system clipboard. Since we opened the command in write
        mode, by passing the &quot;w&quot; flag to open, we&#39;re able to use the
        write method to write to the process&#39;s standard input stream, and in doing
        so copy text to the clipboard.</p>\r\n\r\n<h2>Paging output</h2>\r\n\r\n<p>One
        way that this behaviour of open can be put to practical use is to redirect
        our own standard output stream to another process. In doing so, we form a
        pipeline, just like we might in our shells on the command line.</p>\r\n\r\n<p>If
        you&#39;ve ever used the version control software Git, you might have noticed
        that, if you run a command that produces a lot of output, such as git log,
        it will helpfully scroll the output for you. This ensures that you stay at
        the top of the output, but can scroll down further if you choose.</p>\r\n\r\n<p>Let&#39;s
        look at how open can help us achieve the same behaviour in our scripts.</p>\r\n\r\n<pre>\r\nstdout
        = STDOUT.clone\r\nless = open(&quot;|less&quot;, &quot;w&quot;)\r\nSTDOUT.reopen(less)</pre>\r\n\r\n<p>Here,
        we clone the existing standard output stream so that we can restore it later.
        Then, we use open to spawn the less utility in a subprocess; it&#39;s less
        that will be taking care of the actual scrolling functionality.</p>\r\n\r\n<pre>\r\n500.times
        do |n|\r\n    puts &quot;#{n}: hello world&quot;\r\nend</pre>\r\n\r\n<p>Next,
        we output a lot of text; in this case, 500 fairly repetitive lines.</p>\r\n\r\n<pre>\r\nSTDOUT.reopen(stdout)\r\nless.close</pre>\r\n\r\n<p>Finally,
        at the end of our script, we revert standard output to its original location,
        and close the pipeline we connected to less, thus ending the subprocess.</p>\r\n\r\n<p>If
        we run this script, it should behave as we&#39;d hoped. We stay at the top
        of the output, able to see the first line, but we can scroll down further
        if we wish. Perfect.</p>\r\n\r\n<h2>open-uri</h2>\r\n\r\n<p>Its ability to
        open both files and processes might have convinced you to use Kernel&#39;s
        open method, but it has a further trick up its sleeve.</p>\r\n\r\n<pre>\r\nrequire
        &quot;openuri&quot;\r\n\r\nopen(&quot;http://www.rubytapas.com/&quot;) do
        |page|\r\n    page.base_uri\r\n    page.content_type\r\n    page.gets\r\nend</pre>\r\n\r\n<p>By
        requiring the openuri library, which is part of the Ruby standard library,
        open gains yet another feature: the ability to open URLs. Just as open will
        spawn a subprocess if the path you pass to it starts with a pipe symbol, after
        including the openuri library it will request the path as a URL if it looks
        like one.</p>\r\n\r\n<p>This functionality wraps the native Net::HTTP, Net::HTTPS,
        and Net::FTP libraries, and in a simple script is certainly the easiest way
        to fetch such URLs.</p>\r\n\r\n<p>Here we fetch the RubyTapas homepage. The
        returned IO object is similar to the ones we saw when opening files and processes,
        but has a few methods of its own; here we check the URI that we fetched and
        the content type of the response. But it&#39;s otherwise a regular IO stream,
        and we can use methods like gets, each_line, and so on to process the response
        body.</p>\r\n\r\n<h2>Summing up</h2>\r\n\r\n<p>At first glance, open might
        seem like a simple shortcut for opening files. But it&#39;s actually a general
        purpose way to create many different types of IO object. Ruby&#39;s abstracted
        IO class makes reading from and writing to these disparate forms of input
        and output feel similar, so it seems only right that there should be a simple,
        overarching interface for creating them. Use it! And, as Avdi would say: happy
        hacking!</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40986\">267-open-with-rob-miller.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40987\">267-open-with-rob-miller.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9fdfec123347ab2437e3c5ef897511784739a3a9</guid>\n
        \     <pubDate>Thu, 25 Dec 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/40986/267-open-with-rob-miller.mp4\"
        length=\"92163817\" type=\"video/mp4\"/>\n      <itunes:subtitle>In this guest
        episode, Rob Miller shows off some super powers of Ruby's `Kernel#open`.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[266 Pattern Matching]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=651</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><h1>Pattern
        Matching</h1>\r\n\r\n<p>As we have seen in episode 261, Ruby has some fairly
        sophisticated data destructuring capabilities, at least for a dynamic object-oriented
        language. In that episode, we saw how we could take apart and bind the different
        parts of a dependency specification in a single statement. The parenthesized
        expression on the left of the assignment mimics the shape of the data, and
        Ruby takes apart the data structure and assigns the matching parts of it accordingly.</p>\r\n\r\n<pre>\r\ndep
        = {&quot;hello&quot; =&gt; [&quot;hello.c&quot;, &quot;foo.o&quot;, &quot;bar.o&quot;]}\r\n\r\na
        = *dep                        # =&gt; [[&quot;hello&quot;, [&quot;hello.c&quot;,
        &quot;foo.o&quot;, &quot;bar.o&quot;]]]\r\n\r\n((target, (first_preq, *rest_preqs)))
        = *dep\r\n\r\ntarget                          # =&gt; &quot;hello&quot;\r\nfirst_preq
        \                     # =&gt; &quot;hello.c&quot;\r\nrest_preqs                      #
        =&gt; [&quot;foo.o&quot;, &quot;bar.o&quot;]\r\n</pre>\r\n\r\n<p>We have also
        seen, in various episodes, that Ruby has special tools for matching arbitrary
        objects against a pattern. The &quot;case equality&quot; operator, or &quot;threequals&quot;,
        lets us apply all kinds of tests to an object. We can test its class, whether
        it matches a regular expression, whether it is within a given range, and so
        on.</p>\r\n\r\n<pre>\r\nobj = 23\r\n\r\nInteger === obj                 #
        =&gt; true\r\n/foo/   === obj                 # =&gt; false\r\n(0...100) ===
        obj               # =&gt; true\r\n</pre>\r\n\r\n<p>If you have used any functional
        programming languages with pattern-matching capabilities, such as Haskell
        or Elixir, you know that they combine the features of matching and destructuring
        assignment such that they can both be performed at once. Once you&#39;ve used
        a language in the pattern-matching family, you might miss having it in Ruby.
        I know I do, so I thought it might be fun today to look at how we might add
        this capability to Ruby.</p>\r\n\r\n<p>We will start by defining a placeholder
        object. A placeholder is a simple creature: it has a context and a name. It
        also has a custom equivalence operator. This operator behaves a bit peculiarly:
        it takes the value it is supposed to be matching against, and instead assigns
        it as the value of this placeholder&#39;s name inside the context&mdash;which
        it assumes is a hash-like object. Then it simply returs true, regardless of
        what the value was. In effect, this is a wildcard object like we saw in episode
        #215, except it also &quot;captures&quot; values as a side effect.</p>\r\n\r\n<p>Next
        we&#39;ll define a MatchContext. It descends from BasicObject, so as to have
        a minimal set of methods defined. It has an internal hash, called bindings.
        This hash is specialized: when someone asks it for a key it doesn&#39;t have,
        it will return a placeholder for that key instead.</p>\r\n\r\n<p>The class
        also has a method_missing which simply takes any message sent to the object,
        and looks up the method&#39;s name as a key in the bindings hash.</p>\r\n\r\n<pre>\r\nPlaceholder
        = Struct.new(:bindings, :name) do\r\n  def ==(other)\r\n    bindings[name]
        = other\r\n    true\r\n  end\r\nend\r\n\r\nclass MatchContext &lt; BasicObject\r\n
        \ def initialize\r\n    @bindings = ::Hash.new { |hash, key| ::Placeholder.new(hash,
        key) }\r\n  end\r\n\r\n  def method_missing(name, *)\r\n    @bindings[name]\r\n
        \ end\r\nend\r\n</pre>\r\n\r\n<p>Let&#39;s play around with these classes
        a little bit. We&#39;ll create a new MatchContext. Then we&#39;ll send it
        some random messages. Each time, it returns a placeholder named for that message.</p>\r\n\r\n<p>If
        we try to match one of these placeholders to an arbitrary value, it succeeds.
        We are able to do this with the case-equality operator even though we didn&#39;t
        explicitly define it, because case-equality delegates to the double-equals
        equivalence operator by default.</p>\r\n\r\n<p>If we then send the same message
        as before, we no longer get a placeholder. Instead, we get the value that
        was &quot;captured&quot; by performing an equality test.</p>\r\n\r\n<pre>\r\nrequire
        &quot;./pmatch&quot;\r\n\r\nm = MatchContext.new\r\n\r\nm.foo                           #
        =&gt; #&lt;struct Placeholder bindings={}, name=:foo&gt;\r\nm.bar                           #
        =&gt; #&lt;struct Placeholder bindings={}, name=:bar&gt;\r\n\r\nm.foo ===
        23                    # =&gt; true\r\nm.foo                           # =&gt;
        23\r\n</pre>\r\n\r\n<p>Let&#39;s put these classes to work to do some very
        basic pattern matching. We&#39;ll define an old favorite, a Point struct.
        We&#39;ll instantiate a Point object. Then we&#39;ll use our MatchContext
        and do a pattern match against a Point with placeholder values.</p>\r\n\r\n<p>The
        result of the case equality test is true. And when we examine the placeholders,
        we can see that they are now bound to the X and Y values of the Point we matched
        on. In other words, we have successfully checked that that an object is a
        Point <em>and</em> bound its x and y values to variables, all in one go. Well,
        OK, not actually to variables, per se, but to something close enough.</p>\r\n\r\n<pre>\r\nrequire
        &quot;./pmatch&quot;\r\n\r\nPoint = Struct.new(:x, :y)\r\n\r\np = Point.new(5,
        10)\r\nm = MatchContext.new\r\n\r\nPoint.new(m.x, m.y) === p       # =&gt;
        true\r\n\r\nm.x                             # =&gt; 5\r\nm.y                             #
        =&gt; 10\r\n</pre>\r\n\r\n<p>How did this happen? Well, Struct derived objects
        implement threequals in terms of equivalence. And by default, the equivalence
        test for a Struct is whether the two objects are the same type and whether
        their attributes are also equivalent. So comparing one Point to another implicitly
        delegates to the equivalence operators for the x and y attributes.</p>\r\n\r\n<p>So
        far, our placeholders match anything at all. But we&#39;d like the option
        to be a little more discerning in our matches. For instance, we&#39;d like
        to be able to assert that the X and Y values of a Point must be integers (and
        not nil) for the match to succeed.</p>\r\n\r\n<p>To make this possible, we
        need to flesh out the Placeholder class a little bit. We add a new attribute
        called guards, which defaults to an empty array. And we overload a method
        for adding new guards, somewhat arbitrarily choosing the right-shift operator
        for this purpose. In this method we add the right operand to the guards list,
        and return self to make further chaining possible.</p>\r\n\r\n<p>We then add
        a guard clause to the definition of the equivalence operator. It will perform
        case-equality matches of all of the guards against the supplied value, and
        return false if any of those matches fail.</p>\r\n\r\n<pre>\r\nPlaceholder
        = Struct.new(:bindings, :name) do\r\n  def ==(other)\r\n    return false unless
        guards.all?{ |g| g === other }\r\n    bindings[name] = other\r\n    true\r\n
        \ end\r\n\r\n  def guards\r\n    @guards ||= []\r\n  end\r\n\r\n  def &gt;&gt;(guard)\r\n
        \   guards &lt;&lt; guard\r\n    self\r\n  end\r\nend\r\n\r\nclass MatchContext
        &lt; BasicObject\r\n  def initialize\r\n    @bindings = ::Hash.new { |hash,
        key| ::Placeholder.new(hash, key) }\r\n  end\r\n\r\n  def method_missing(name,
        *)\r\n    @bindings[name]\r\n  end\r\nend\r\n</pre>\r\n\r\n<p>Now when we
        match using placeholders, we can annotate the placeholders with extra patterns
        that the corresponding value must match in order to succeed. In this case,
        we specify that both attributes of a point must be integers in order to match.
        This succeeds with the point we&#39;ve been using. But when we change one
        of the coordinates to nil, the match no longer returns true.</p>\r\n\r\n<pre>\r\nrequire
        &quot;./pmatch2&quot;\r\n\r\nPoint = Struct.new(:x, :y)\r\n\r\np = Point.new(5,
        10)\r\nm = MatchContext.new\r\n\r\nPoint.new(m.x &gt;&gt; Integer, m.y &gt;&gt;
        Integer) === p       # =&gt; true\r\n\r\nm.x                             #
        =&gt; 5\r\nm.y                             # =&gt; 10\r\n\r\np = Point.new(5,
        nil)\r\nm = MatchContext.new\r\n\r\nPoint.new(m.x &gt;&gt; Integer, m.y &gt;&gt;
        Integer) === p # =&gt; false\r\n</pre>\r\n\r\n<p>Now let&#39;s use our placeholders
        on something slightly more practical. Let&#39;s say we have a method, get_account_balance.
        This method may fail, which we&#39;ll simulate in this example by giving it
        an explicit fail argument. If it succeeds, it returns an account balance as
        a string. If it fails, it returns an array of two elements: first, a symbol
        indicating that this is an error. And second, a string explaining the problem.
        Using different return types to indicate success or failure is a common style
        in pattern-matching programming languages.</p>\r\n\r\n<p>We then open a case
        statement, with the return value of a call to get_account_balance as the object
        to switch on. For the first case, we specify a placeholder that is constrained
        to be a String. In that branch, we print out the account balance. For the
        next case, we specify a pattern which will match an error return. For the
        second element in the array, we use another placeholder to capture the error
        explanation.</p>\r\n\r\n<p>If we execute this code, we can see that the case
        statement matches the success return value, and binds the account balance
        in the process. If we change the method call to force a failure and run the
        code again, it matches the error case this time. This time it binds the error
        info to a pseudo-variable that can be used in the error handling code.</p>\r\n\r\n<p>As
        with the struct, this works because Ruby arrays implement case-equality as
        an alias for equivalence, and determine equivalence by going over the array
        members one by one and asking them if they are equivalent to their counterpart
        in the other array.</p>\r\n\r\n<pre>\r\nrequire &quot;./pmatch2&quot;\r\n\r\ndef
        get_account_balance(fail: false)\r\n  if fail\r\n    [:error, &quot;I literally
        can&#39;t even&quot;]\r\n  else\r\n    &quot;$1234.56&quot;\r\n  end\r\nend\r\n\r\nm
        = MatchContext.new\r\n\r\ncase get_account_balance(fail: true)\r\nwhen m.balance
        &gt;&gt; String\r\n  puts &quot;Balance: #{m.balance}&quot;\r\nwhen [:error,
        m.info]\r\n  puts &quot;Error: #{m.info}&quot;\r\nend\r\n\r\n# &gt;&gt; Error:
        I literally can&#39;t even\r\n</pre>\r\n\r\n<p>This example really shows off
        the power of pattern-matching: whereas in normal ruby code we would have had
        to separately extract the values we were interested in after a case match,
        here we are able to do a case match and assign variables for later use all
        at the same time.</p>\r\n\r\n<p>And that&#39;s plenty for today. Happy hacking!</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40982\">266-pattern-matching.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40983\">266-pattern-matching.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40984\">266-pattern-matching.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-2ceb021ea3b938568e99170fc69ec8b4f0753173</guid>\n
        \     <pubDate>Mon, 22 Dec 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/40982/266-pattern-matching.mp4\"
        length=\"129814529\" type=\"video/mp4\"/>\n      <itunes:subtitle>Ever wanted
        to have fancy pattern-matching in Ruby like that found in languages like Erlang
        or Elixir? Well, today we'll construct the ability to do just that!</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[265 Method Introspection with
        Noah Gibbs]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=650</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Noah
        Gibbs is a Ruby and Rails developer. He&#39;s the author of &quot;Rebuilding
        Rails&quot;, a neat little book that helps you understand how Ruby on Rails
        works by rebuilding pieces of it from scratch. Today Noah steps into the RubyTapas
        kitchen in order to show us how to discover all kinds of useful information
        about the methods that are available in a Ruby program. It turns out we can
        find out quite a bit, just by asking the methods about themselves. I&#39;ll
        let Noah explain. Enjoy!</p>\r\n\r\n<p><strong>Show Notes:</strong></p>\r\n\r\n<ul>\r\n\t<li>Noah
        on Twitter: <a href=\"https://twitter.com/codefolio\">@codefolio</a></li>\r\n\t<li><a
        href=\"http://codefol.io/\">Noah&#39;s Blog</a></li>\r\n\t<li><a href=\"http://rebuilding-rails.com/\">Rebuilding
        Rails: Understand Rails by Building a Ruby Web Framework by Noah Gibbs</a></li>\r\n</ul>\r\n\r\n<hr
        />\r\n<p>In Ruby, you can call .methods() on an object to see what other methods
        you can call on it. For instance:</p>\r\n\r\n<pre>\r\n7.methods\r\n</pre>\r\n\r\n<p>Remember
        that everything in Ruby is an object, so the number 7 is too. That means you
        can call .methods() on it.</p>\r\n\r\n<p>That output is kind of hard to read.
        It&#39;s in no particular order. So I like to sort them:</p>\r\n\r\n<pre>\r\n7.methods.sort\r\n</pre>\r\n\r\n<p>Sort
        does the right thing, so that looks better.</p>\r\n\r\n<p>This list also doesn&#39;t
        tell you, &quot;what *interesting* methods does this have?&quot; There&#39;s
        a fun old trick for that:</p>\r\n\r\n<pre>\r\n7.methods.sort - Object.methods\r\n</pre>\r\n\r\n<p>You
        can try to do this with any parent class -- not just Object -- but the obvious
        approach doesn&#39;t work quite right:</p>\r\n\r\n<pre>\r\n7.methods.sort
        - Fixnum.methods\r\n</pre>\r\n\r\n<p>Seven *is* a Fixnum, so you&#39;d expect
        that to be empty. But .methods() gets called on the Fixnum object itself --
        the class Fixnum, not a specific instance of Fixnum. We want the instance
        methods that an instance of Fixnum would have.</p>\r\n\r\n<pre>\r\n7.methods.sort
        - Fixnum.instance_methods\r\n</pre>\r\n\r\n<p>That&#39;s better. And we can
        do it with any parent class we want.</p>\r\n\r\n<pre>\r\n7.methods.sort -
        Integer.instance_methods\r\n</pre>\r\n\r\n<p>Now that&#39;s interesting. Apparently
        Ruby doesn&#39;t define things like multiplication or to_f for the Integer
        class. You wouldn&#39;t directly make an instance of class Integer, but that&#39;s
        still a little quirk that we might care about some day -- for instance, if
        you inherit one of your own objects from class Integer.</p>\r\n\r\n<p>So what
        else can we do with this?</p>\r\n\r\n<p>You can ask, &quot;what was that method
        name again?&quot;</p>\r\n\r\n<p>Here&#39;s one I use often. I forget the names
        of some of the Array and Hash methods, and this trick can find them for me:</p>\r\n\r\n<pre>\r\n[].methods.sort
        - Object.methods\r\n</pre>\r\n\r\n<p>Remember that you have to use an actual
        array object -- an instance -- for the first argument. You won&#39;t get a
        useful answer if you say this:</p>\r\n\r\n<pre>\r\nArray.methods.sort - Object.methods\r\n</pre>\r\n\r\n<p>because
        that&#39;s checking the Array class object. Not what you want!</p>\r\n\r\n<p>Ruby
        allows you to define a class across many files, so sometimes it&#39;s hard
        to know what methods there are, or where they&#39;re defined. It&#39;s nice
        to be able to get the list of methods for an object. But how can we find out
        more about a specific method? And especially, how can we find out who defined
        it?</p>\r\n\r\n<p>Imagine that somebody has monkeypatched a class. You know
        some libraries that do this.</p>\r\n\r\n<p>I&#39;ll add a very simple file
        that adds a sum method to your arrays and everything else enumerable. You
        can find it in the files for this episode. I&#39;ll require it here as an
        example of a mysterious third-party library that monkeypatches standard Ruby
        classes. If you&#39;re following along, put this into the same directory you&#39;re
        working in.</p>\r\n\r\n<pre>\r\n# enumerable_monkeypatch.rb\r\nmodule Enumerable\r\n
        \ def sum\r\n    inject(&amp;:+)                                # =&gt; 6,
        1, 2.0, nil\r\n  end\r\nend\r\n</pre>\r\n\r\n<p>Now, let&#39;s make sure it
        works.</p>\r\n\r\n<pre>\r\nrequire &quot;./enumerable_monkeypatch&quot;\r\n(1..99).sum\r\n</pre>\r\n\r\n<p>Now
        if we look for this method on Array, we&#39;ll find it:</p>\r\n\r\n<pre>\r\n[].methods.include?(:sum)\r\n</pre>\r\n\r\n<p>But
        where did it come from? Ruby can tell us a lot about a method. So first let&#39;s
        grab that method:</p>\r\n\r\n<pre>\r\n[].method(:sum)\r\n</pre>\r\n\r\n<p>What
        can we do with a method?</p>\r\n\r\n<pre>\r\n[].method(:sum).methods.sort
        - Object.methods\r\n</pre>\r\n\r\n<p>Hm. &quot;Owner&quot; looks promising.
        Let&#39;s try that.</p>\r\n\r\n<pre>\r\n[].method(:sum).owner\r\n</pre>\r\n\r\n<p>That
        told us that it&#39;s on Enumerable. But maybe we can do even better.</p>\r\n\r\n<pre>\r\n[].method(:sum).source_location\r\n</pre>\r\n\r\n<p>Oh,
        hey! There&#39;s our source file and line number. And now you can find out
        where any method was defined. Like the chopsticks say, now you can debug anything!</p>\r\n\r\n<p>Oh
        -- one final bit of trivia before we&#39;re done. What if we try it on a function
        that isn&#39;t defined in Ruby? &quot;Plus&quot; on Fixnums is a C method,
        not a method in a Ruby source file.</p>\r\n\r\n<pre>\r\n7.method(:+)\r\n</pre>\r\n\r\n<p>Ruby
        says, &quot;not telling.&quot; And now I&#39;m done telling for this episode.
        I&#39;m sure you&#39;ll enjoy the next one soon!</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40979\">265-method-introspection-with-noah-gibbs.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40981\">265-method-introspection-with-noah-gibbs.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=41673\">265-method-introspection-with-noah-gibbs-louder.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-32c626265a607aeae554925c3ad7aa0f84bb229d</guid>\n
        \     <pubDate>Thu, 18 Dec 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/41673/265-method-introspection-with-noah-gibbs-louder.mp4\"
        length=\"49027717\" type=\"video/mp4\"/>\n      <itunes:subtitle>Noah Gibbs
        joins us this week, to show us how we can find out all about ruby methods
        just by asking them.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[264 Destructuring]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=649</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><h1>Destructuring</h1>\r\n\r\n<p>We&#39;ve
        talked a bit about &quot;destructuring&quot; in the past, in episodes about
        &quot;splatting&quot; such as #80. Today I want to demonstrate an advanced
        example of destructuring.</p>\r\n\r\n<p>Just to quickly review, in a Ruby
        context, destructuring assignment is the process of assigning multiple variables
        at one time, with each bound to a different portion of a data structure. A
        very simple example is assigning both items in a two-element array to variables
        at the same time. By using the splat operator, we explicitly tell Ruby to
        &quot;break up&quot; the array and distribute it across the variables on the
        left side of the assignment. When we then inspect their values, we can see
        that a has taken on the first array entry, and b has taken on the second.</p>\r\n\r\n<pre>\r\narr
        = [2, 3]\r\n(a, b) = *arr\r\na # =&gt; 2\r\nb # =&gt; 3\r\n</pre>\r\n\r\n<p>As
        we&#39;ve seen in other episodes such as #81, some of the syntax we&#39;ve
        used here can be omitted in this simple case of splatting an array. But for
        the purpose of today&#39;s example I wanted to start out by illustrating the
        full, canonical syntax for destructuring.</p>\r\n\r\n<p>Let us now turn our
        attention to a slightly more complex data structure. In the Rake build tool,
        dependencies are represented in the form of single-entry hashes. For instance,
        here&#39;s an example of the dependencies for a C program. The final executable,
        called hello, depends on a file called hello.c. It also depends on some supporting
        object files called foo.o and bar.o. If any of these files are updated, the
        executable needs to be recompiled in order to be current.</p>\r\n\r\n<pre>\r\ndep
        = {&quot;hello&quot; =&gt; [&quot;hello.c&quot;, &quot;foo.o&quot;, &quot;bar.o&quot;]}\r\n</pre>\r\n\r\n<p>This
        dependency follows a common convention for build tools: the first file in
        the dependency list is &quot;special&quot;. It is the <em>primary</em> source
        file for the hello executable, whereas the others are supporting libraries
        that need to also be linked in at compile time.</p>\r\n\r\n<p>In order to
        break out the component parts of this dependency, we could assign one piece
        at a time. In order to get the dependency target, we grab the first entry
        in the Hash. Individual hash entries are represented as two-element arrays,
        so we then take the first element in the resulting array.</p>\r\n\r\n<p>The
        first prerequisite, then, is the first element of the last element of the
        first hash entry. And the rest of the prerequisites are the second through
        last elements of the last element of the first hash entry.</p>\r\n\r\n<pre>\r\ndep
        = {&quot;hello&quot; =&gt; [&quot;hello.c&quot;, &quot;foo.o&quot;, &quot;bar.o&quot;]}\r\n\r\ndep.first
        \                         # =&gt; [&quot;hello&quot;, [&quot;hello.c&quot;,
        &quot;foo.o&quot;, &quot;bar.o&quot;]]\r\ntarget = dep.first.first        #
        =&gt; &quot;hello&quot;\r\nfirst_preq = dep.first.last.first # =&gt; &quot;hello.c&quot;\r\nrest_preqs
        = dep.first.last[1..-1] # =&gt; [&quot;foo.o&quot;, &quot;bar.o&quot;]\r\n</pre>\r\n\r\n<p>This
        code reads about as well as it sounds to describe it. Which is to say, it&#39;s
        complete gobbledygook. Let&#39;s try a different approach.</p>\r\n\r\n<p>A
        Hash can be splatted into an Array. The result is an array of two-element
        arrays - in this case, just one two-element array. And we know from episode
        #84 that we can destructure nested arrays so long as we mimic the expected
        structure using parentheses on the left side of the assignment. So we can
        build up a destructuring assignment which has named slots for the dependency
        target, the first prerequisite, and all the remaining prerequisites. For the
        rest of the prerequisites, we make use of the fact that a variable number
        of elements can be &quot;slurped&quot; into a single variable by preceding
        it with a star.</p>\r\n\r\n<p>Then, on the right side of the assignment, we
        splat out the dependency into an array, ready to be destructured.</p>\r\n\r\n<p>When
        we examine the resulting variable assignments, we can see that we successfully
        captured the target, primary prerequisite, and remaining prerequisites. We
        did it all in a single assignment. And we were able to do it using a parenthesized
        form that visually echoes the &quot;shape&quot; of the data we are destructuring.</p>\r\n\r\n<pre>\r\ndep
        = {&quot;hello&quot; =&gt; [&quot;hello.c&quot;, &quot;foo.o&quot;, &quot;bar.o&quot;]}\r\n\r\na
        = *dep                        # =&gt; [[&quot;hello&quot;, [&quot;hello.c&quot;,
        &quot;foo.o&quot;, &quot;bar.o&quot;]]]\r\n\r\n((target, (first_preq, *rest_preqs)))
        = *dep\r\n\r\ntarget                          # =&gt; &quot;hello&quot;\r\nfirst_preq
        \                     # =&gt; &quot;hello.c&quot;\r\nrest_preqs                      #
        =&gt; [&quot;foo.o&quot;, &quot;bar.o&quot;]\r\n</pre>\r\n\r\n<p>And that&#39;s
        it for today. Happy hacking!</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40976\">264-destructuring.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40978\">264-destructuring.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=41603\">264-destructuring.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-982511f0b569a2021b2eb63700e6e69a6accbc83</guid>\n
        \     <pubDate>Mon, 15 Dec 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/40976/264-destructuring.mp4\"
        length=\"50474608\" type=\"video/mp4\"/>\n      <itunes:subtitle>Today's special
        is a demonstration of how we can use Ruby's built-in \"destructuring\" capabilities
        to simplify complex assignments.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[263 Immutable Enumerators with
        Tom Stuart]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=648</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today&#39;s special guest episode, Tom Stuart shows us the benefits of using
        enumerators as immutable collections.</p>\r\n\r\n<p>I think the first time
        Tom Stuart blew my mind it was with his article &quot;programming with nothing&quot;,
        which showed how to derive an entire programming system---including numbers
        and control flow operators---using nothing but Ruby procs taking single arguments.
        He then went on to write the book &quot;Understanding Computation&quot;, which
        I highly recommend.</p>\r\n\r\n<p>Today he&#39;s out to blow minds once again,
        with a fascinating exploration of how we can use Ruby&#39;s enumerators to
        expose and operate on immutable collections. Enjoy!</p>\r\n\r\n<p><strong>Show
        Notes</strong></p>\r\n\r\n<ul>\r\n\t<li><a href=\"https://www.youtube.com/watch?v=VUhlNx_-wYk&amp;noredirect=1\">[YouTube]
        Programming with Nothing by Tom Stuart</a></li>\r\n\t<li><a href=\"http://computationbook.com/\">Understanding
        Computation: From Simple Machines to Impossible Programs by Tom Stuart</a></li>\r\n</ul>\r\n\r\n<hr
        />\r\n<p>Immutability is the default in some functional programming languages.
        But in Ruby most objects are mutable, and that&rsquo;s by design, because
        mutability is baked into the way most of us think about object-oriented programming.</p>\r\n\r\n<p>Sometimes
        it&rsquo;s useful for values to be immutable. Knowing that an object won&rsquo;t
        change can make our code easier to reason about, and shared mutable state
        can be hard to get right in general, even in single-threaded programs.</p>\r\n\r\n<p>When
        our objects are mutable, we always need to be aware of the possibility of
        them changing. To give one example: when we pass an argument into a method,
        it can be changed without us realising. Here the string &#39;cherry&#39; is
        being modified in-place by the #print_pie method:</p>\r\n\r\n<pre>\r\ndef
        print_pie(filling)\r\n  puts filling &lt;&lt; &#39; pie&#39;\r\nend\r\n\r\nfruit
        = &#39;cherry&#39;\r\nprint_pie(fruit)\r\nfruit # =&gt; &quot;cherry pie&quot;</pre>\r\n\r\n<p>If
        we want to be sure a value won&rsquo;t get mutated, we can clone it and pass
        the clone around instead. Now the original value remains unchanged:</p>\r\n\r\n<pre>\r\nfruit
        = &#39;cherry&#39;\r\ncloned_fruit = fruit.clone\r\nprint_pie(cloned_fruit)\r\nfruit
        # =&gt; &quot;cherry&quot;</pre>\r\n\r\n<p>Or we can freeze our value, and
        then we&rsquo;ll get an exception if anything tries to modify it:</p>\r\n\r\n<pre>\r\nfruit
        = &#39;cherry&#39;\r\nfrozen_fruit = fruit.freeze\r\nprint_pie(frozen_fruit)\r\nfruit
        # =&gt;\r\n# ~&gt; -:2:in `print_pie&#39;: can&#39;t modify frozen String
        (RuntimeError)\r\n# ~&gt;  from -:7:in `&lt;main&gt;&#39;</pre>\r\n\r\n<p>In
        this episode we&rsquo;re going to try a different way of making objects immutable
        in Ruby &mdash; specifically, a way of making immutable collections.</p>\r\n\r\n<p>The
        simplest way to make an immutable collection is to call #freeze on an existing
        array. As we just saw, this will disable all the methods that allow the array
        to be changed:</p>\r\n\r\n<pre>\r\nfruits = %w(apple banana cherry damson
        elderberry)\r\nfruits.freeze\r\nfruits &lt;&lt; &#39;fig&#39; # =&gt;\r\n#
        ~&gt; -:3:in `&lt;main&gt;&#39;: can&#39;t modify frozen Array (RuntimeError)</pre>\r\n\r\n<p>But
        there&rsquo;s another way. We can create a more naturally immutable collection
        by using an enumerator, because out of the box an enumerator only supports
        reading from a collection, not modifying it, so we don&rsquo;t need to disable
        anything to get the behaviour we want.</p>\r\n\r\n<p>One option is to expose
        an existing mutable collection through an enumerator by using the #to_enum
        method. The resulting enumerator provides an interface that lets us iterate
        over the underlying collection but doesn&rsquo;t give us a way to modify it:</p>\r\n\r\n<pre>\r\nfruits
        = %w(apple banana cherry damson elderberry).to_enum\r\nfruits.entries # =&gt;
        [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;damson&quot;,
        &quot;elderberry&quot;]\r\nfruits &lt;&lt; &#39;fig&#39; # =&gt;\r\n# ~&gt;
        -:3:in `&lt;main&gt;&#39;: undefined method `&lt;&lt;&#39; for #&lt;Enumerator&gt;
        (NoMethodError)</pre>\r\n\r\n<p>Alternatively, we can make an enumerator from
        scratch by generating its contents with a block. Here we yield a series of
        strings inside the block, and those strings become the contents of the collection:</p>\r\n\r\n<pre>\r\nfruits
        = Enumerator.new do |yielder|\r\n  yielder.yield &#39;apple&#39;\r\n  yielder.yield
        &#39;banana&#39;\r\n  yielder.yield &#39;cherry&#39;\r\n  yielder.yield &#39;damson&#39;\r\n
        \ yielder.yield &#39;elderberry&#39;\r\nend\r\n\r\nfruits.entries # =&gt;
        [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;damson&quot;,
        &quot;elderberry&quot;]</pre>\r\n\r\n<p>It&rsquo;s more obvious why this collection
        must be immutable. There&rsquo;s not even any underlying data structure to
        modify; its contents are being generated on the fly by an unchanging block
        of Ruby code.</p>\r\n\r\n<pre>\r\nfruits &lt;&lt; &#39;fig&#39;\r\n# ~&gt;
        -:10:in `&lt;main&gt;&#39;: undefined method `&lt;&lt;&#39; for #&lt;Enumerator:
        #&lt;Enumerator::Generator&gt;:each&gt; (NoMethodError)</pre>\r\n\r\n<p>So
        we can base an enumerator on an existing array or create it from scratch with
        a block. Either way, the structure of the collection can&rsquo;t be modified
        through the enumerator, but we can still implement operations that create
        a new collection by adding, removing, reordering or otherwise changing the
        contents of this one.</p>\r\n\r\n<p>The Enumerator class includes the Enumerable
        module, so we can do all the usual Enumerable stuff with an immutable collection,
        like mapping a block over it, filtering it and so on.</p>\r\n\r\n<pre>\r\nfruits.map(&amp;:upcase)
        # =&gt; [&quot;APPLE&quot;, &quot;BANANA&quot;, &quot;CHERRY&quot;, &quot;DAMSON&quot;,
        &quot;ELDERBERRY&quot;]\r\nfruits.select { |fruit| fruit.length == 6 } # =&gt;
        [&quot;banana&quot;, &quot;cherry&quot;, &quot;damson&quot;]</pre>\r\n\r\n<p>But
        note that those operations return a new mutable array, not another immutable
        collection represented as an enumerator:</p>\r\n\r\n<pre>\r\nfruits.class
        # =&gt; Enumerator\r\nfruits.map(&amp;:upcase).class # =&gt; Array\r\nfruits.select
        { |fruit| fruit.length == 6 }.class # =&gt; Array</pre>\r\n\r\n<p>More generally,
        we can make a modified copy of an immutable collection by writing a new enumerator
        that iterates over it and yields different values. Here&rsquo;s how to add
        an element:</p>\r\n\r\n<pre>\r\nmore_fruits = Enumerator.new do |yielder|\r\n
        \ fruits.each do |fruit|\r\n    yielder.yield fruit\r\n  end\r\n\r\n  yielder.yield
        &#39;fig&#39;\r\nend</pre>\r\n\r\n<p>This new enumerator iterates over the
        old one, yielding every value it finds, and afterwards yields an extra value.
        As a result, it behaves like the old collection with an extra element appended:</p>\r\n\r\n<pre>\r\nmore_fruits.entries
        # =&gt; [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;damson&quot;,
        &quot;elderberry&quot;]\r\nfruits.include?(&#39;fig&#39;) # =&gt; false\r\nmore_fruits.include?(&#39;fig&#39;)
        # =&gt; true</pre>\r\n\r\n<p>We can use a similar technique to remove an element:</p>\r\n\r\n<pre>\r\nfewer_fruits
        = Enumerator.new do |yielder|\r\n  fruits.each do |fruit|\r\n    yielder.yield
        fruit unless fruit == &#39;cherry&#39;\r\n  end\r\nend</pre>\r\n\r\n<p>This
        enumerator iterates over the old one and yields all of its elements except
        one. So, it behaves like the old collection with an element removed:</p>\r\n\r\n<pre>\r\nfewer_fruits.entries
        # =&gt; [&quot;apple&quot;, &quot;banana&quot;, &quot;damson&quot;, &quot;elderberry&quot;]\r\nfruits.include?(&#39;cherry&#39;)
        # =&gt; true\r\nfewer_fruits.include?(&#39;cherry&#39;) # =&gt; false</pre>\r\n\r\n<p>Enumerators
        are lazy, so this technique also works on infinite collections. For example,
        here&rsquo;s an infinite collection of even numbers:</p>\r\n\r\n<pre>\r\neven_numbers
        = Enumerator.new do |yielder|\r\n  n = 2\r\n\r\n  loop do\r\n    yielder.yield
        n\r\n    n += 2\r\n  end\r\nend</pre>\r\n\r\n<p>We can take as many elements
        as we like from this collection, as long as we don&rsquo;t try to take all
        of them. The enumerator will generate more elements as they&rsquo;re needed:</p>\r\n\r\n<pre>\r\neven_numbers.next
        # =&gt; 2\r\neven_numbers.next # =&gt; 4\r\neven_numbers.next # =&gt; 6\r\neven_numbers.next
        # =&gt; 8\r\neven_numbers.next # =&gt; 10\r\n\r\neven_numbers.take 10 # =&gt;
        [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</pre>\r\n\r\n<p>By making a new enumerator
        that wraps this collection and yields different values, we can make a modified
        copy. Here&rsquo;s a version that includes the unlucky number thirteen at
        the appropriate position:</p>\r\n\r\n<pre>\r\neven_or_unlucky_numbers = Enumerator.new
        do |yielder|\r\n  even_numbers.each do |n|\r\n    yielder.yield n\r\n    yielder.yield
        13 if n == 12\r\n  end\r\nend\r\n\r\neven_or_unlucky_numbers.next # =&gt;
        2\r\neven_or_unlucky_numbers.next # =&gt; 4\r\neven_or_unlucky_numbers.next
        # =&gt; 6\r\neven_or_unlucky_numbers.next # =&gt; 8\r\neven_or_unlucky_numbers.next
        # =&gt; 10\r\n\r\neven_or_unlucky_numbers.take 10 # =&gt; [2, 4, 6, 8, 10,
        12, 13, 14, 16, 18]</pre>\r\n\r\n<p>Another advantage of using enumerators
        instead of calling #clone or #freeze is that those methods are <em>shallow</em>:
        they protect the structure of the collection at the top level, but not any
        of the objects inside it.</p>\r\n\r\n<p>So cloning an array doesn&rsquo;t
        prevent modification of the string objects it contains, and those objects
        are shared between the original collection and its clone. Here we can see
        that the original fruits array ends up containing the string &#39;pineapple&#39;
        even though it looks like we&rsquo;re only modifying the clone:</p>\r\n\r\n<pre>\r\nfruits
        = %w(apple banana cherry damson elderberry)\r\ncloned_fruits = fruits.clone\r\ncloned_fruits.first.prepend
        &#39;pine&#39;\r\nfruits # =&gt; [&quot;pineapple&quot;, &quot;banana&quot;,
        &quot;cherry&quot;, &quot;damson&quot;, &quot;elderberry&quot;]</pre>\r\n\r\n<p>Similarly,
        freezing the array doesn&rsquo;t make the strings themselves frozen, so there&rsquo;s
        nothing to stop us modifying them in-place:</p>\r\n\r\n<pre>\r\nfruits = %w(apple
        banana cherry damson elderberry)\r\nfrozen_fruits = fruits.freeze\r\nfrozen_fruits.first.prepend
        &#39;pine&#39;\r\nfruits # =&gt; [&quot;pineapple&quot;, &quot;banana&quot;,
        &quot;cherry&quot;, &quot;damson&quot;, &quot;elderberry&quot;]</pre>\r\n\r\n<p>But
        an enumerator backed by code instead of a concrete data structure is regenerated
        every time we iterate over it, so even if its generated contents get mutated,
        we can arrange for the block to provide fresh copies next time we look. In
        this case, the string literals inside the block will create new string objects
        every time they&rsquo;re evaluated, so even if we pull one out and mutate
        it, the mutated copy won&rsquo;t show up next time we iterate over the collection:</p>\r\n\r\n<pre>\r\nfruits
        = Enumerator.new do |yielder|\r\n  yielder.yield &#39;apple&#39;\r\n  yielder.yield
        &#39;banana&#39;\r\n  yielder.yield &#39;cherry&#39;\r\n  yielder.yield &#39;damson&#39;\r\n
        \ yielder.yield &#39;elderberry&#39;\r\nend\r\n\r\nfruits.first.prepend &#39;pine&#39;\r\nfruits.entries
        # =&gt; [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;damson&quot;,
        &quot;elderberry&quot;]</pre>\r\n\r\n<p>And that&rsquo;s how to use enumerators
        to build immutable collections. Thanks for having me as your guest chef today,
        and happy hacking!</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40973\">263-immutable-enumerators-with-tom-stuart.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40974\">263-immutable-enumerators-with-tom-stuart.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40996\">263-immutable-enumerators-with-tom-stuart.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-43f1e1e1bc7ab24bb5a29fd540af32133a313ed3</guid>\n
        \     <pubDate>Thu, 11 Dec 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/40996/263-immutable-enumerators-with-tom-stuart.mp4\"
        length=\"44833941\" type=\"video/mp4\"/>\n      <itunes:subtitle>In today's
        special guest episode, Tom Stuart shows us the benefits of using enumerators
        as immutable collections.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[262 Advanced Next]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=647</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><h1>Advanced
        Next</h1>\r\n\r\n<p>In episode #260 we introduced the next block control keyword.
        We saw how it can be used to skip forward when iterating over lists.</p>\r\n\r\n<p>As
        we ended that episode, we were looking at what happens when we use next in
        a mapping context. We mapped over a list of strings. When we skipped empty
        strings using next, this produced nil values in the resulting output array.</p>\r\n\r\n<pre>\r\nobjects
        = [&quot;house&quot;, &quot;mouse&quot;, &quot;&quot;, &quot;mush&quot;, &quot;&quot;,\r\n
        \          &quot;little old lady whispering &#39;hush&#39;&quot;]\r\n\r\nresult
        = objects.map do |o|\r\n  next if o.empty?\r\n  &quot;Goodnight, #{o}&quot;\r\nend\r\n\r\nresult\r\n#
        =&gt; [&quot;Goodnight, house&quot;,\r\n#     &quot;Goodnight, mouse&quot;,\r\n#
        \    nil,\r\n#     &quot;Goodnight, mush&quot;,\r\n#     nil,\r\n#     &quot;Goodnight,
        little old lady whispering &#39;hush&#39;&quot;]\r\n</pre>\r\n\r\n<p>But what
        if we instead want to substitute a special string whenever the input is blank?
        Do we have to switch over to using an if/else statement?</p>\r\n\r\n<p>As
        a matter of fact, we can accomplish this goal with next as well. Let&#39;s
        say we just want to return the string &quot;Goodnight, Moon&quot; wherever
        the input data is empty. By supplying an argument to next, we accomplish exactly
        that.</p>\r\n\r\n<pre>\r\nobjects = [&quot;house&quot;, &quot;mouse&quot;,
        &quot;&quot;, &quot;mush&quot;, &quot;&quot;,\r\n           &quot;little old
        lady whispering &#39;hush&#39;&quot;]\r\n\r\nresult = objects.map do |o|\r\n
        \ next &quot;Goodnight, Moon&quot; if o.empty?\r\n  &quot;Goodnight, #{o}&quot;\r\nend\r\n\r\nresult.compact\r\n#
        =&gt; [&quot;Goodnight, house&quot;,\r\n#     &quot;Goodnight, mouse&quot;,\r\n#
        \    &quot;Goodnight, Moon&quot;,\r\n#     &quot;Goodnight, mush&quot;,\r\n#
        \    &quot;Goodnight, Moon&quot;,\r\n#     &quot;Goodnight, little old lady
        whispering &#39;hush&#39;&quot;]\r\n</pre>\r\n\r\n<p>What we see here is that
        the argument to next becomes the return value of the current invocation of
        a block.</p>\r\n\r\n<p>Let&#39;s look at a more concrete example of using
        next with an argument. We have a list of filenames, which we want to winnow
        down using #select. It&#39;s a long list, and it&#39;s inefficient to iterate
        over it multiple times. So we want to get all of our rules for inclusion or
        exclusion in one place. To do that, we use a series of next statements.</p>\r\n\r\n<p>The
        first statement checks that the filename represents an actual file, rather
        than a directory or a pipe or some other special entity. Since there is no
        point performing more checks if it&#39;s not a regular file, we skip the remaining
        checks using next with a false argument. This will cause the block to return
        false, telling #select that the current filename should not be included in
        the results.</p>\r\n\r\n<p>Next we check that the file is readable by the
        current user, and skip forwards if it is not.</p>\r\n\r\n<p>The next check
        is a little different. It identifies a file with a name that doesn&#39;t match
        the same naming pattern that all the other files have. We happen to know that
        we want to include that specific file, so we invoke next with a true argument.
        This skips all remaining tests and tells #select to go ahead and include this
        entry in the results.</p>\r\n\r\n<p>Next is a test intended to exclude zero-length
        files. And then there is a final test that includes files matching a particular
        naming scheme.</p>\r\n\r\n<pre>\r\nDir[&quot;../**/*.mp4&quot;].select { |f|\r\n
        \ next false unless File.file?(f)\r\n  next false unless File.readable?(f)\r\n
        \ next true if f =~ /078b-java-dregs\\.mp4/\r\n  next false if File.size(f)
        == 0\r\n  next true if File.basename(f) =~ /^\\d\\d\\d-/\r\n}\r\n</pre>\r\n\r\n<p>This
        isn&#39;t the only way we could have written this code. We also could have
        structured it as a single chained boolean expression. But I find that boolean
        expressions tend to become harder to read the bigger they are, especially
        when they involve a lot of negation. I like how each line in this block is
        a self-contained rule which could be safely removed by deleting a single line.</p>\r\n\r\n<p>I
        also like the fact that if we wanted to, we could step through these rules
        one by one in a debugger. That&#39;s not always the case with chained boolean
        expressions.</p>\r\n\r\n<p>So far we&#39;ve been discussing iteration. It&#39;s
        easy to talk about keywords like next and break and redo as if they are loop
        control operations. Partly because that is the context that they are commonly
        found in, and partly because it&#39;s easier to understand them by analogy
        to other languages that have dedicated loop-control operations.</p>\r\n\r\n<p>It&#39;s
        important to understand, however, that in Ruby these keywords aren&#39;t really
        loop control operations. They are something more generalized: they are block-control
        operators. They work anywhere that blocks are passed and invoked, regardless
        if there is anything like iteration going on.</p>\r\n\r\n<p>To hopefully make
        this principle clear, let&#39;s write a little method which accepts a block.
        It yields to the block twice, logging before and after each yield.</p>\r\n\r\n<p>There
        is no looping or iterating over a list going on here, just two yields. Let&#39;s
        call this method, passing it a block. The block will log, invoke next, and
        then log again.</p>\r\n\r\n<p>Finally, we log the moment the method returns.</p>\r\n\r\n<p>When
        we execute this code, we can see that the block is, in fact, executed twice,
        just as intended. Each time, it invokes next, which causes control to be passed
        back to the yieldtwice method before the block can do anything else. The last
        line of the block is never reached. Again we can see how this behaves like
        an early return, except for a block instead of a method.</p>\r\n\r\n<pre>\r\ndef
        yieldtwice\r\n  puts &quot;Before first yield&quot;\r\n  yield\r\n  puts &quot;Before
        second yield&quot;\r\n  yield\r\n  puts &quot;After last yield&quot;\r\nend\r\n\r\nyieldtwice
        do\r\n  puts &quot;About to invoke next&quot;\r\n  next\r\n  puts &quot;Can
        never get here&quot;\r\nend\r\nputs &quot;After method call&quot;\r\n\r\n#
        &gt;&gt; Before first yield\r\n# &gt;&gt; About to invoke next\r\n# &gt;&gt;
        Before second yield\r\n# &gt;&gt; About to invoke next\r\n# &gt;&gt; After
        last yield\r\n# &gt;&gt; After method call\r\n</pre>\r\n\r\n<p>Now let&#39;s
        take one last look at the difference between next and break. Instead of invoking
        next in the block, we&#39;ll invoke break.</p>\r\n\r\n<pre>\r\ndef yieldtwice\r\n
        \ puts &quot;Before first yield&quot;\r\n  yield\r\n  puts &quot;Before second
        yield&quot;\r\n  yield\r\n  puts &quot;After last yield&quot;\r\nend\r\n\r\nyieldtwice
        do\r\n  puts &quot;About to invoke break&quot;\r\n  break\r\n  puts &quot;Can
        never get here&quot;\r\nend\r\nputs &quot;After method call&quot;\r\n\r\n#
        &gt;&gt; Before first yield\r\n# &gt;&gt; About to invoke break\r\n# &gt;&gt;
        After method call\r\n</pre>\r\n\r\n<p>This time, we can see that execution
        only gets as far as the first break before the whole method exits. Unlike
        next, break doesn&#39;t just bring a yield to an early end. It cancels the
        execution of the <em>whole method that triggered the yield</em>. That is,
        it forces an early return of the call to yieldtwice.</p>\r\n\r\n<p>In working
        through these two examples, we can begin to see how break and next can effectively
        function as iteration control operators, because in Ruby iteration is always
        expressed using blocks. But in fact they don&#39;t know anything about loops
        or iteration; they are all about controlling the execution of blocks and the
        methods that yield to those blocks.</p>\r\n\r\n<p>And that&#39;s probably
        enough to digest in one day. Happy hacking!</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40959\">262-advanced-next.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40960\">262-advanced-next.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40961\">262-advanced-next.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-7123d1c772f19b2cc08359c6edbacafe620c07cd</guid>\n
        \     <pubDate>Mon, 08 Dec 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/40959/262-advanced-next.mp4\"
        length=\"95682611\" type=\"video/mp4\"/>\n      <itunes:subtitle>Continuing
        our discussion of the `next` keyword, today we'll look at some advanced usages.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[261 Next]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=644</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><!--
        2014-11-20 Thu 12:30 -->\r\n<h1>Next</h1>\r\n\r\n<p>In the last episode, #258,
        I made passing mention of the Ruby next keyword. It occurred to me that not
        everyone might be familiar with this keyword. Just like redo, it&#39;s one
        of those features where you can spend years writing perfectly good code without
        knowing about it. But once you do know about it, you can use it to save some
        effort or make certain idioms more expressive. And even if you use next every
        day, in the episode after this I&#39;ll be covering some advanced uses that
        might just teach you something new.</p>\r\n\r\n<p>At its most basic, next
        works like the continue loop control keyword found in languages like Java
        or C. For instance, let&#39;s say we have a list of objects we need to say
        goodnight to. Unfortunately, some blank strings have snuck into the list.
        As a result, our output is messed up.</p>\r\n\r\n<pre>\r\nobjects = [&quot;house&quot;,
        &quot;mouse&quot;, &quot;&quot;, &quot;mush&quot;, &quot;&quot;,\r\n           &quot;little
        old lady whispering &#39;hush&#39;&quot;]\r\n\r\nobjects.each do |o|\r\n  puts
        &quot;Goodnight, #{o}&quot;\r\nend\r\n\r\n# &gt;&gt; Goodnight, house\r\n#
        &gt;&gt; Goodnight, mouse\r\n# &gt;&gt; Goodnight,\r\n# &gt;&gt; Goodnight,
        mush\r\n# &gt;&gt; Goodnight,\r\n# &gt;&gt; Goodnight, little old lady whispering
        &#39;hush&#39;\r\n</pre>\r\n\r\n<p>Let&#39;s assume that we can&#39;t simply
        remove the blank strings from the list. One way to deal with them would be
        to put a conditional statement around the puts line. It will only execute
        the puts if the string is non-empty.</p>\r\n\r\n<pre>\r\nobjects = [&quot;house&quot;,
        &quot;mouse&quot;, &quot;&quot;, &quot;mush&quot;, &quot;&quot;,\r\n           &quot;little
        old lady whispering &#39;hush&#39;&quot;]\r\n\r\nobjects.each do |o|\r\n  unless
        o.empty?\r\n    puts &quot;Goodnight, #{o}&quot;\r\n  end\r\nend\r\n\r\n#
        &gt;&gt; Goodnight, house\r\n# &gt;&gt; Goodnight, mouse\r\n# &gt;&gt; Goodnight,
        mush\r\n# &gt;&gt; Goodnight, little old lady whispering &#39;hush&#39;\r\n</pre>\r\n\r\n<p>This
        works fine. But this style of code always bothers me a little bit. By pushing
        the actual &quot;meat&quot; of the block down inside a guarding conditional,
        we&#39;ve given this junk-handling code greater prominence than I feel it
        deserves.</p>\r\n\r\n<p>If this were a method we were writing, I would prefer
        to write it like this, with a guard clause which returns early if the input
        is garbage. Once we are past the guard clause, we can mentally dispense with
        that case entirely. There is no lingering context to keep us thinking about
        it.</p>\r\n\r\n<pre>\r\ndef say_goodnight_to(object)\r\n  return if object.empty?\r\n
        \ puts &quot;Goodnight, #{object}&quot;\r\nend\r\n</pre>\r\n\r\n<p>Obviously,
        we can&#39;t use return inside an #each loop, because that would abort the
        iteration and force the whole method to return. Instead, we can use the next
        keyword to tell Ruby to skip forward to the next iteration.</p>\r\n\r\n<pre>\r\nobjects
        = [&quot;house&quot;, &quot;mouse&quot;, &quot;&quot;, &quot;mush&quot;, &quot;&quot;,\r\n
        \          &quot;little old lady whispering &#39;hush&#39;&quot;]\r\n\r\nobjects.each
        do |o|\r\n  next if o.empty?\r\n  puts &quot;Goodnight, #{o}&quot;\r\nend\r\n\r\n#
        &gt;&gt; Goodnight, house\r\n# &gt;&gt; Goodnight, mouse\r\n# &gt;&gt; Goodnight,
        mush\r\n# &gt;&gt; Goodnight, little old lady whispering &#39;hush&#39;\r\n</pre>\r\n\r\n<p>When
        we run this version, it leaves out the empty entries in the list. In effect,
        next gives us a way to add guard clauses for blocks.</p>\r\n\r\n<p>You might
        recall that back in episodes #70 and #71 we introduced the break keyword.
        If you haven&#39;t used the break and next keywords much, you might be a little
        unclear in how they differ from each other. In order to clarify that difference,
        let&#39;s change our next to a break and run the code again.</p>\r\n\r\n<pre>\r\nobjects
        = [&quot;house&quot;, &quot;mouse&quot;, &quot;&quot;, &quot;mush&quot;, &quot;&quot;,\r\n
        \          &quot;little old lady whispering &#39;hush&#39;&quot;]\r\n\r\nobjects.each
        do |o|\r\n  break if o.empty?\r\n  puts &quot;Goodnight, #{o}&quot;\r\nend\r\n\r\n#
        &gt;&gt; Goodnight, house\r\n# &gt;&gt; Goodnight, mouse\r\n</pre>\r\n\r\n<p>This
        time, instead of just skipping the blank entries, the iteration over the array
        halted completely at the first blank string. That&#39;s the difference in
        a nutshell: next skips to the next iteration, whereas break breaks completely
        out of the method that the block has been passed into. In this case, that
        method is #each.</p>\r\n\r\n<p>Thus far, we&#39;ve been coding purely in imperative
        terms. We&#39;re iterating over the elements of an array, printing some of
        them to standard out, and ignoring any return values.</p>\r\n\r\n<p>Let&#39;s
        switch that around now, and look at things from a functional perspective.
        We&#39;ll change the #each to a #map, and assign the result to a variable.
        For now, we&#39;ll get rid of the next. And we&#39;ll lose the puts and just
        return the constructed string from each block invocation.</p>\r\n\r\n<pre>\r\nobjects
        = [&quot;house&quot;, &quot;mouse&quot;, &quot;&quot;, &quot;mush&quot;, &quot;&quot;,\r\n
        \          &quot;little old lady whispering &#39;hush&#39;&quot;]\r\n\r\nresult
        = objects.map do |o|\r\n  &quot;Goodnight, #{o}&quot;\r\nend\r\n\r\nresult\r\n#
        =&gt; [&quot;Goodnight, house&quot;,\r\n#     &quot;Goodnight, mouse&quot;,\r\n#
        \    &quot;Goodnight, &quot;,\r\n#     &quot;Goodnight, mush&quot;,\r\n#     &quot;Goodnight,
        &quot;,\r\n#     &quot;Goodnight, little old lady whispering &#39;hush&#39;&quot;]\r\n</pre>\r\n\r\n<p>The
        result is an array of strings, including some junk strings. Let&#39;s see
        what happens when we reintroduce our guard clause using next.</p>\r\n\r\n<pre>\r\nobjects
        = [&quot;house&quot;, &quot;mouse&quot;, &quot;&quot;, &quot;mush&quot;, &quot;&quot;,\r\n
        \          &quot;little old lady whispering &#39;hush&#39;&quot;]\r\n\r\nresult
        = objects.map do |o|\r\n  next if o.empty?\r\n  &quot;Goodnight, #{o}&quot;\r\nend\r\n\r\nresult\r\n#
        =&gt; [&quot;Goodnight, house&quot;,\r\n#     &quot;Goodnight, mouse&quot;,\r\n#
        \    nil,\r\n#     &quot;Goodnight, mush&quot;,\r\n#     nil,\r\n#     &quot;Goodnight,
        little old lady whispering &#39;hush&#39;&quot;]\r\n</pre>\r\n\r\n<p>This
        time, where the input data had a blank string, we now have nil values. We
        now know that the return value of a block invocation which is skipped by next
        is nil.</p>\r\n\r\n<p>This is a handy behavior, since it means we can then
        use compact to filter out all the nil entries.</p>\r\n\r\n<pre>\r\nobjects
        = [&quot;house&quot;, &quot;mouse&quot;, &quot;&quot;, &quot;mush&quot;, &quot;&quot;,\r\n
        \          &quot;little old lady whispering &#39;hush&#39;&quot;]\r\n\r\nresult
        = objects.map do |o|\r\n  next if o.empty?\r\n  &quot;Goodnight, #{o}&quot;\r\nend\r\n\r\nresult.compact\r\n#
        =&gt; [&quot;Goodnight, house&quot;,\r\n#     &quot;Goodnight, mouse&quot;,\r\n#
        \    &quot;Goodnight, mush&quot;,\r\n#     &quot;Goodnight, little old lady
        whispering &#39;hush&#39;&quot;]\r\n</pre>\r\n\r\n<p>We are not done. I have
        a lot more to show you about the next keyword. But in the interests of introducing
        just one idea at a time, I&#39;m going to end for now and pick up the subject
        again in the next episode. If everything we&#39;ve seen so far was old hat
        to you, be patient: the next installment will dig a lot deeper. Until then,
        happy hacking!</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40776\">261-next.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40778\">261-next.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40779\">261-next.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-760b3bfc75e1c9464ac270296e61840c31e1a246</guid>\n
        \     <pubDate>Thu, 04 Dec 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/40776/261-next.mp4\" length=\"56893547\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Today's episode introduces the
        next keyword, and how we can use it to control the result of loop iterations.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[260 Capture Groups with Nell
        Shamrell]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=642</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>When
        I think about regular expressions in Ruby, I think of Nell Shamrell. Nell
        has put a lot of study into regular expressions&mdash;how to write them, how
        to optimize them, and how they are implemented under the covers. She's given
        some great talks on this subject. I've put some links in the show notes.</p>\r\n<p>Today,
        she has agreed to step into the RubyTapas kitchen and give us an introduction
        on using regex capture groups. If you've ever looked at some of the more advanced
        regex tricks on this show and felt a little lost, this episode should fill
        in some of the blanks.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n<li><a
        href=\"https://twitter.com/nellshamrell\">@nellshamrell</a> on Twitter</li>\r\n<li><a
        href=\"http://www.confreaks.com/videos/2862-rubyconf2013-beneath-the-surface-harnessing-the-true-power-of-regular-expressions-in-ruby\">Beneath
        the Surface: Harnessing the power of regular expressions in Ruby</a> (RubyConf
        2013)</li>\r\n</ul>\r\n<hr />\r\n<p>Today I'd like to talk to you about using
        regular expressions capture groups in Ruby. Capture groups are a way to capture
        certain parts of my regular expression's match so I can use them later in
        my regular expression or later code outside of the regex. Let's say I want
        to make a regex to scan a string looking for basic urls. Here's an example
        string.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">
        \   <span class=\"org-string\"> \"site www.rubytapas.com\" </span>\r\n  </pre>\r\n</div>\r\n<p>Next,
        I'm going to create a basic regular expression to find the url in that string.
        I want this regular expresion to match www followed by a literal dot. Notice
        that I had to escape the dot using a backslash.This tells the regular expression
        engine to treat this a literal dot not as a dot metacharacter which has different
        meaning. Followed by any word character appearing one or more times, followed
        by another dot, followed by any word character appearing one or more times.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">    <span class=\"org-string\">
        \"site www.rubytapas.com\" </span>\r\n    <span class=\"org-string\"> /www.\\.\\w+\\.\\w+/
        </span>\r\n  </pre>\r\n</div>\r\n<p>Now, this is a somewhat contrived example
        and there very likely are more efficient regular expressions to match urls,
        but this one illustrates the points I want to make.</p>\r\n<p>So let's say
        I want to capture the domain name for use later outside the regular expression.
        In this string the domain name would be \"rubytapas\".</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">    <span class=\"org-comment-delimiter\"> # Domain
        name: rubytapas </span>\r\n    <span class=\"org-string\"> \"site www.rubytapas.com\"
        </span>\r\n    <span class=\"org-string\"> /www.\\.\\w+\\.\\w+/ </span>\r\n
        \ </pre>\r\n</div>\r\n<p>Then I also want to capture the top level domain
        for use later in the program. In the case of this string, it would be \"com\".</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">    <span class=\"org-comment-delimiter\">
        # Top Level domain: com # Domain name: rubytapas </span>\r\n    <span class=\"org-string\">
        \"site www.rubytapas.com\" </span>\r\n    <span class=\"org-string\"> /www.\\.\\w+\\.\\w+/
        </span>\r\n  </pre>\r\n</div>\r\n<p>To capture that domain name, I'm going
        to enclose the section of the regex meant to match the domain name in parentheses.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">    <span class=\"org-comment-delimiter\">
        # Top Level domain: com # Domain name: rubytapas </span>\r\n    <span class=\"org-string\">
        \"site www.rubytapas.com\" </span>\r\n    <span class=\"org-string\"> /www.\\(.\\w+)\\.\\w+/
        </span>\r\n  </pre>\r\n</div>\r\n<p>Next I'll do the same thing for the section
        that's meant to match the top level domain.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">    <span class=\"org-comment-delimiter\"> # Top Level
        domain: com # Domain name: rubytapas </span>\r\n    <span class=\"org-string\">
        \"site www.rubytapas.com\" </span>\r\n    <span class=\"org-string\"> /www.\\(.\\w+)\\.(\\w+)/
        </span>\r\n  </pre>\r\n</div>\r\n<p>So let's try running this in Ruby. I'm
        first going to assign my string to a variable, we'll just call it string.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">    <span class=\"org-comment-delimiter\">
        # Top Level domain: com # Domain name: rubytapas </span>\r\n    string = <span
        class=\"org-string\">\"site www.rubytapas.com\"</span>\r\n\r\n    <span class=\"org-string\">/www.\\(.\\w+)\\.(\\w+)/</span>\r\n
        \ </pre>\r\n</div>\r\n<p>Then I'm going to assign my regex to a variable called
        regex.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">
        \   <span class=\"org-comment-delimiter\"> # Top Level domain: com # Domain
        name: rubytapas </span>\r\n    string = <span class=\"org-string\">\"site
        www.rubytapas.com\"</span>\r\n    regex = <span class=\"org-string\">/www.\\(.\\w+)\\.(\\w+)/</span>\r\n
        \ </pre>\r\n</div>\r\n<p>I'm first going to match my regex against this string
        using the equals sign tilde operator. And I'm going to put my regex on one
        side of this and my string on the other side. This tells Ruby \"look in the
        string for an of it that matches this regex pattern.\"</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">    <span class=\"org-comment-delimiter\"> # Top Level
        domain: com # Domain name: rubytapas </span>\r\n    string = <span class=\"org-string\">\"site
        www.rubytapas.com\"</span>\r\n    regex = <span class=\"org-string\">/www.\\(.\\w+)\\.(\\w+)/</span>\r\n\r\n
        \   regex =~ string\r\n  </pre>\r\n</div>\r\n<p>And Ruby's going to return
        back \"5.\" That \"5\" means the part of the string that matches the regex
        begins on the fifth character of the string, the character at index 5.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">    <span class=\"org-comment-delimiter\">
        # Top Level domain: com # Domain name: rubytapas </span>\r\n    string = <span
        class=\"org-string\">\"site www.rubytapas.com\"</span>\r\n    regex = <span
        class=\"org-string\">/www.\\(.\\w+)\\.(\\w+)/</span>\r\n\r\n    regex =~ string
        <span class=\"org-comment-delimiter\"># =&gt; 5</span>\r\n  </pre>\r\n</div>\r\n<p>Now,
        knowing where my match began is useful, but Ruby offers a few different ways
        I can get more information about my match. First, let's say I want to see
        exactly what my match is. One way to do this in Ruby is to type $~. That returns
        an instance of Ruby's matchdata class for my match. We'll go a little more
        into matchdata in just a little bit. Notice that it contains the entire part
        of the string that matched my regex and the results of the two capture groups.</p>\r\n<div
        class=\"org-src-container\">$~ # =&gt; #</div>\r\n<p>Now I personally find
        the $~ to by cryptic and not very readable. Fortunately, Ruby has another
        way to see what my last match was. And that is through using Regexp - impossible
        to pronounce but important to know, it's the regular expressions class in
        Ruby - and I'm going to call last_match on that class. And I get back that
        same matchdata object for our last match. You can see it also shows the results
        from my capture groups - those subexpressions within my larger regular expression.</p>\r\n<div
        class=\"org-src-container\">Regexp.last_match # =&gt; #</div>\r\n<p>Now what
        about when I want to look at those capture groups individually and maybe use
        them later in my code? I can view the first capture group by typing in $1,
        in that case it returns \"rubytapas\".</p>\r\n<div class=\"org-src-container\">$1
        # =&gt; \"rubytapas\"</div>\r\n<p>Likewise, I can view the second capture
        group by typing in $2, which returns \"com\".</p>\r\n<div class=\"org-src-container\">$2
        # =&gt; \"com\"</div>\r\n<p>Notice that my first capture group is referenced
        by one, not by zero. If I were to type in zero, I would get back the name
        of the program that ran the match.</p>\r\n<p>Along with looking at these capture
        groups, I can also use them later in the program. Let's try interpolating
        these two capture groups into a string. In my string I'm going to type in
        \"Domain name: \", then interpolate my first capture group, followed by \"Top
        Level Domain: \" then I'll interpolate my second capture group. And this interpolates
        those two capture groups into my string.</p>\r\n<div class=\"org-src-container\">\"Domain
        name: #{$1} Top Level Domain: #{$2}\"</div>\r\n<p>And this interpolates those
        two capture groups into my string.</p>\r\n<div class=\"org-src-container\">\"Domain
        name: #{$1} Top Level Domain: #{$2}\" # =&gt; \"Domain name: rubytapas Top
        Level Domain: com\"</div>\r\n<p>Now using numbers like this does work, but
        again it's somewhat cryptic and a little hard to read. A perhaps clearer way
        to handle capture groups is through Ruby's matchdata class. Working with capture
        groups is one of the places the matchdata class is most useful.</p>\r\n<p>So
        let's create a matchdata object using the match method. I'm going to assign
        it to a variable called \"my_match.\" And I'm going to call match on my regex
        and pass it in my string.</p>\r\n<div class=\"org-src-container\">my_match
        = regex.match(string)</div>\r\n<p>And I get back that instance of the matchdata
        class with the full string and the capture groups.</p>\r\n<div class=\"org-src-container\">my_match
        = regex.match(string) # =&gt; #</div>\r\n<p>I can then also access the results
        of my capture groups similar to how I would access the elements of an array.
        If I type in my_match[1], I'll get back the result of my first capture group.</p>\r\n<div
        class=\"org-src-container\">my_match[1] # =&gt; \"rubytapas\"</div>\r\n<p>Likewise,
        if I type in my_match[2], I'll get back the result of my second capture group.</p>\r\n<div
        class=\"org-src-container\">my_match[2] # =&gt; \"com\"</div>\r\n<p>Again,
        note that the first capture group begins at 1, not at 0 like an array. If
        I were to type in my_match[0], I would get back the entire string that matched
        the larger regular expression.</p>\r\n<div class=\"org-src-container\">my_match[0]
        # =&gt; \"www.rubytapas.com\"</div>\r\n<p>And that is an intro to using capture
        groups in your Ruby regular expressions. Happy hacking!</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40597\">260-capture-groups-with-nell-shamrell.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40598\">260-capture-groups-with-nell-shamrell.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40599\">260-capture-groups-with-nell-shamrell.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-0fdb1f19ce6f6cbf4159579d517caf847304bdd3</guid>\n
        \     <pubDate>Mon, 01 Dec 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/40597/260-capture-groups-with-nell-shamrell.mp4\"
        length=\"49827659\" type=\"video/mp4\"/>\n      <itunes:subtitle>Guest chef
        Nell Shamrell shares an intro to working with regex capture groups in this
        episode.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[259 Redo]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=639</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Let's
        say we have a list of files we want to download. Each file could be retrieved
        from any one of three different mirror sites. This is important to know, because
        the mirrors aren't always reliable. Sometimes they are overloaded with clients,
        or go down for maintenance. If we get an error response from one mirror, we
        can try the same request on a different one instead of giving up altogether.</p>\r\n<p>For
        this example, I've simulated the unreliability of the mirrors using WebMock.
        Every fourth request to any of the mirror hosts will result in a 502 \"Bad
        Gateway\" response.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src
        src-ruby\"><span class=\"org-type\">FILES</span> = <span class=\"org-string\">%W[file1
        file2 file3 file4 file5 file6 file7 file8 file9]</span>\r\n\r\n<span class=\"org-type\">MIRRORS</span>
        = <span class=\"org-string\">%W[a.example.org b.example.org c.example.org]</span>\r\n\r\nrequire
        <span class=\"org-string\">\"net/http\"</span>\r\nrequire <span class=\"org-string\">\"webmock\"</span>\r\n\r\ninclude
        <span class=\"org-type\">WebMock</span>::<span class=\"org-type\">API</span>\r\n\r\nrequest_count
        = 0\r\nerr = {<span class=\"org-constant\">status</span>: 502}\r\nok  = {<span
        class=\"org-constant\">status</span>: 200, <span class=\"org-constant\">body</span>:
        <span class=\"org-string\">\"OK!\"</span>}\r\nstub_request(<span class=\"org-constant\">:get</span>,
        <span class=\"org-string\">/.*\\.example\\.org/</span>)\r\n  .to_return(-&gt;(r){
        request_count += 1; request_count % 4 == 0 ? err : ok })\r\n</pre>\r\n</div>\r\n<p>In
        order to download the files, we can loop over the list using <code>#each</code>.
        To begin with, we'll just use the first mirror and ignore the others. We'll
        build a URI by combining the mirror and the filename, and we'll log the URI.
        Then we'll make an HTTP request.</p>\r\n<p>We then make a decision based on
        the response status. If it's 200, all is well and we log a successful download.
        But if it's some other status code, we note the failure and terminate the
        loop with <code>break</code>.</p>\r\n<p>We run this code, and see that it
        makes four requests before ending with an error.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">require <span class=\"org-string\">\"./setup\"</span>\r\n\r\n<span
        class=\"org-type\">FILES</span>.each <span class=\"org-keyword\">do</span>
        |file|\r\n  mirror = <span class=\"org-type\">MIRRORS</span>.first\r\n  uri
        = <span class=\"org-type\">URI</span>(<span class=\"org-string\">\"http:/</span><span
        class=\"org-variable-name\">/#{mirror}/#{file}</span><span class=\"org-string\">\"</span>)\r\n
        \ puts <span class=\"org-string\">\"Requesting</span><span class=\"org-variable-name\">
        #{uri}</span><span class=\"org-string\">\"</span>\r\n  result = <span class=\"org-type\">Net</span>::<span
        class=\"org-type\">HTTP</span>.get_response(uri)\r\n  <span class=\"org-keyword\">if</span>
        result.code == <span class=\"org-string\">\"200\"</span>\r\n    puts <span
        class=\"org-string\">\"Success!\"</span>\r\n  <span class=\"org-keyword\">else</span>\r\n
        \   puts <span class=\"org-string\">\"Error</span><span class=\"org-variable-name\">
        #{result.code}</span><span class=\"org-string\">\"</span>\r\n    <span class=\"org-keyword\">break</span>\r\n
        \ <span class=\"org-keyword\">end</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Requesting http://a.example.org/file1</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Success!</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Requesting http://a.example.org/file2</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Success!</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Requesting http://a.example.org/file3</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Success!</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Requesting http://a.example.org/file4</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Error 502</span>\r\n</pre>\r\n</div>\r\n<p>In order to make this code robust
        in the face of failures, we want it to switch mirrors when there is a network
        problem. But it's not enough to change mirrors and then go around the loop
        again, because this would mean skipping the file that failed entirely.</p>\r\n<p>A
        typical approach to a problem like this would be to add an inner loop which
        re-tried downloading the same filename with successive mirrors. But in Ruby,
        we can avoid the need to write a second loop.</p>\r\n<p>Instead, we add just
        two lines of code. First, when a request fails we shift the mirrors array
        by one, which has the effect of putting the next mirror at the head of the
        list. Then, we invoke the <em>redo</em> keyword.</p>\r\n<p><em>redo</em> is
        a special block control flow operator in Ruby. It causes execution to be thrown
        back up to the beginning of the current block. But unlike the <code>next</code>
        keyword, the block does <em>not</em> advance to the next iteration in a sequence.
        Instead, it is restarted with the same block argument as the last time around.</p>\r\n<p>We
        can run the code and see the upshot of this behavior. After four requests,
        there is an error. But instead of terminating, the request is repeated with
        the same file but a new mirror. Then there are another four requests, followed
        by another mirror switch, and so on.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">require <span class=\"org-string\">\"./setup\"</span>\r\n\r\n<span
        class=\"org-type\">FILES</span>.each <span class=\"org-keyword\">do</span>
        |file|\r\n  mirror = <span class=\"org-type\">MIRRORS</span>.first\r\n  uri
        = <span class=\"org-type\">URI</span>(<span class=\"org-string\">\"http:/</span><span
        class=\"org-variable-name\">/#{mirror}/#{file}</span><span class=\"org-string\">\"</span>)\r\n
        \ puts <span class=\"org-string\">\"Requesting</span><span class=\"org-variable-name\">
        #{uri}</span><span class=\"org-string\">\"</span>\r\n  result = <span class=\"org-type\">Net</span>::<span
        class=\"org-type\">HTTP</span>.get_response(uri)\r\n  <span class=\"org-keyword\">if</span>
        result.code == <span class=\"org-string\">\"200\"</span>\r\n    puts <span
        class=\"org-string\">\"Success!\"</span>\r\n  <span class=\"org-keyword\">else</span>\r\n
        \   puts <span class=\"org-string\">\"Error</span><span class=\"org-variable-name\">
        #{result.code}</span><span class=\"org-string\">; switching mirrors\"</span>\r\n
        \   <span class=\"org-type\">MIRRORS</span>.shift\r\n    <span class=\"org-keyword\">redo</span>\r\n
        \ <span class=\"org-keyword\">end</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Requesting http://a.example.org/file1</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Success!</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Requesting http://a.example.org/file2</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Success!</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Requesting http://a.example.org/file3</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Success!</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Requesting http://a.example.org/file4</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Error 502; switching mirrors</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Requesting http://b.example.org/file4</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Success!</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Requesting http://b.example.org/file5</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Success!</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Requesting http://b.example.org/file6</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Success!</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Requesting http://b.example.org/file7</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Error 502; switching mirrors</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Requesting http://c.example.org/file7</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Success!</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Requesting http://c.example.org/file8</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Success!</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Requesting http://c.example.org/file9</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Success!</span>\r\n</pre>\r\n</div>\r\n<p><code>redo</code>
        is very similar to the <code>retry</code> keyword we discussed in episode
        #257. The difference is that <code>retry</code> is for exception rescue clauses,
        and <code>redo</code> is for blocks.</p>\r\n<p>Like with <code>retry</code>,
        we have to take care with <code>redo</code> that we always move the program
        state forward in some way <em>before</em> redoing. Otherwise, we risk getting
        stuck in an infinite loop. In today's example, we're ensuring this by shifting
        a mirror off of the mirror list before every <code>redo</code>. Eventually,
        with enough failures this will cause the code to run out of mirrors, a scenario
        we haven't handled yet.</p>\r\n<p>By using <code>redo</code>, we are able
        to \"try, try again\" at a given loop iteration, without adding the code complexity
        of an inner loop. And that's it for today. Happy hacking!</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40398\">setup.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40433\">259-redo.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40434\">259-redo.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40435\">259-redo.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-6e126140304623a9b1dd362d0173e573ce502ca7</guid>\n
        \     <pubDate>Thu, 27 Nov 2014 12:17:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/40435/259-redo.mp4\" length=\"72760909\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>In today's episode, we use a
        Ruby keyword to make a loop more flexible in the face of failures.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[258 Bitwise Operations with
        Peter Cooper]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=636</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        I am very happy to welcome into the RubyTapas kitchen guest chef Peter Cooper.
        Peter publishes the indispensable Ruby Weekly News, my absolute favorite way
        to stay up to date on everything happening in the Ruby world. He also publishes
        many other great newsletters on various programming topics. There are links
        to all these resources in the show notes.</p>\r\n<p>Today, Peter is going
        to be sharing with us an introduction to using Ruby's bitwise operators for
        manipulating numbers at the binary level. This can be a tricky topic to teach
        and to comprehend, but Peter has come up with some terrific visuals that I
        think you'll find really make these ideas clear. Enjoy!</p>\r\n<p><strong>Show
        notes:</strong></p>\r\n<ul>\r\n<li><a href=\"http://rubyweekly.com/\">Ruby
        Weekly</a></li>\r\n<li><a href=\"https://cooperpress.com/\">Cooper Press newsletters</a></li>\r\n<li><a
        href=\"https://cooperpress.com/rubywalkthrough\">Peter's Ruby 2.0 walkthrough</a></li>\r\n</ul>\r\n<hr
        />\r\n<div>&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<p>Hi, this is Peter Cooper, editor
        of <a href=\"/plan/editpost/&ldquo;http:/rubyweekly.com&rdquo;\">Ruby Weekly</a>
        and numerous other email newsletters, you can find me on Twitter at <a href=\"/plan/editpost/&ldquo;https:/twitter.com/peterc&rdquo;\">@peterc</a>.
        It&rsquo;s an honor to be here with you today.</p>\r\n<p>If you&rsquo;re here
        solely for object oriented design, refactoring, design philosophy, or anything
        like that, you might want to give this video a swerve!</p>\r\n<p>So binary.
        Here&rsquo;s a quick refresher.</p>\r\n<p>Normally we represent numbers using
        the digits 0 through 9, the decimal system, we all know what is.</p>\r\n<p>In
        the binary system we can also represent numbers, but we have just two digits,
        0 and 1. Any number can be represented using 0s and 1s, just as with decimal.</p>\r\n<p>Let&rsquo;s
        say we want to represent 0. That&rsquo;s just 0. Easy.</p>\r\n<p>And 1? 1.
        Easy.</p>\r\n<p>What about 2? We have no digit two, but the <em>number</em>
        2 can be represented as 10. That&rsquo;s not ten, but one-zero. Instead of
        having tens, hundreds, thousands, and so forth as each column, we have twos,
        fours, eights, sixteens, thirty-twoths and so on.</p>\r\n<p>Ruby let&rsquo;s
        us work with binary representations and also convert between binary and decimal
        quite easily. Let&rsquo;s say we want to know what 42 is in binary. We could
        work it out, but let&rsquo;s get Ruby to do the work.</p>\r\n<pre>42.to_s(2)</pre>\r\n<p>What
        we do is tell Ruby to convert the decimal 42 to a string that represents the
        binary version.</p>\r\n<p>It&rsquo;s 101010 .. nothing suspicious about the
        meaning of life there then..!</p>\r\n<p>We can also represent numbers directly
        in binary in Ruby as Avdi showed you in episode 1. We prefix with 0b, like
        so:</p>\r\n<pre>0b101010</pre>\r\n<p>Note that we can also convert back from
        a string representation of binary to decimal with to_s:</p>\r\n<pre>&ldquo;101010&rdquo;.to_i(2)
        \  # =&gt; 42</pre>\r\n<p>The argument of 2 is just telling to_i that the
        representation is in base 2, a synonym for &ldquo;binary&rdquo;. Without it,
        Ruby assumes base 10, decimal, and we&rsquo;d get this:</p>\r\n<pre>&ldquo;101010&rdquo;.to_i
        \  # =&gt; 101010</pre>\r\n<p>Now, Ruby lets us perform special operations
        upon binary representations that we call &ldquo;bitwise operations&rdquo;.
        Bitwise operations just manipulate things at the level of each bit. What&rsquo;s
        a bit, you say?</p>\r\n<p>If you take 101010, each digit there is a bit. Each
        bit is the smallest unique portion of a computer&rsquo;s memory, whether that&rsquo;s
        regular memory, a register, or whatever.</p>\r\n<p>Bit is a shortened version
        of &ldquo;binary digit&rdquo; by the way, and just to tie together some terminology,
        eight bits is now typically called a byte, although historically a byte has
        had no specific length and was simply the smallest addressable unit of memory
        upon a particular computer architecture.</p>\r\n<p>Let&rsquo;s start with
        some Ruby specific methods that aren&rsquo;t exactly bitwise operations but
        get us going in the right direction.</p>\r\n<p>Let&rsquo;s take our 42, and
        then ask Ruby to tell us what individual bits of it are set to.</p>\r\n<pre>100[0]
        # =&gt; 0\r\n100[1] # =&gt; 1\r\n100[2] # =&gt; 0</pre>\r\n<p>Using the square
        brackets method on a number in Ruby lets us &ldquo;address&rdquo; individual
        bits of that number.</p>\r\n<p>Another thing we can do is see the bit &ldquo;length&rdquo;
        of a number. That is, the minimum number of bits that would be required to
        represent that number. For example:</p>\r\n<pre>42.bit_length # =&gt; 6</pre>\r\n<p>Whereas,
        255, the largest number that can be represented in 8 bits is..</p>\r\n<pre>255.bit_length
        # =&gt; 8</pre>\r\n<p>Note that just one digit higher, 256, we need 9 bits:</p>\r\n<pre>256.bit_length
        # =&gt; 9</pre>\r\n<p>As an aside, this can be used as an interesting and
        quick way to determine if a number is a power of two or not. Take a number
        x and if x&rsquo;s bit length is not the same as the bit length of x - 1,
        it must be a power of 2, as the number of bits needed to represent it has
        just increased by 1:</p>\r\n<pre>x = 256\r\nputs &ldquo;#{x} is a power of
        2!&rdquo; if x.bit_length != (x-1).bit_length</pre>\r\n<p>So, now on to the
        true, primary bitwise operations. You may have heard of them before, they&rsquo;re
        called AND, OR, XOR, and NOT.</p>\r\n<p>The AND operation isn&rsquo;t the
        same as the logical and operation you might use on an if statement. Instead,
        it&rsquo;s an operation that takes two binary digits or even complete numbers
        and then compares each bit in each respective position, then only applies
        a 1 on the output if both respective bits on the input are 1 too. This is
        best shown visually using what&rsquo;s called a truth table which shows all
        combinations of inputs and the outputs they result in.</p>\r\n<p>Or in code,
        we can demonstrate:</p>\r\n<pre>(0b101 &amp; 0b100).to_s(2)  # =&gt; &ldquo;100&rdquo;</pre>\r\n<p>Notice
        that the AND operator is just a single ampersand, unlike the logical and which
        is a double ampersand &amp;&amp;.</p>\r\n<p>The OR operation is like the AND
        operation except the output bit is 1 if <em>either</em> of the input bits
        is a 1.</p>\r\n<p>Or in code..</p>\r\n<pre>(0b101 | 0b110).to_s(2) # =&gt;
        &ldquo;101\"\r\n(0b101 | 0b010).to_s(2) # =&gt; &ldquo;111&rdquo;</pre>\r\n<p>XOR
        is again a bit like OR but with the proviso that the output bit is only 1
        if one and exclusively one of the input bits is a 1. So with OR, if both input
        bits are 1, the output is 1. But with XOR, the output would be 0 unless a
        single input bit is 1 and the other is 0.</p>\r\n<pre>(0b111 ^ 0b111).to_s(2)
        # =&gt; &ldquo;0\"</pre>\r\n<p>NOT is, in theory, the easiest, but in practice
        is a bit of a pain in Ruby. In theory, if you take a string of bits and flip
        any 1s to 0s and 0s to 1s, you&rsquo;re good. The truth table is ridiculously
        simple.</p>\r\n<p>The problem is that due to how numbers are represented internally
        in Ruby and other languages, flipping all of the bits has the interesting
        side effect of making them negative.</p>\r\n<pre>(~0b101).to_s(2)  # =&gt;
        &ldquo;-110&rdquo;</pre>\r\n<p>However, a compounding problem here is that
        Ruby isn&rsquo;t <em>really</em> returning the internal representation of
        the number using to_s, as we can analyse here:</p>\r\n<pre>(~0b101)[0]  #
        =&gt; 0\r\n(~0b101)[1]  # =&gt; 1\r\n(~0b101)[2]  # =&gt; 0</pre>\r\n<p>This
        demonstrates the NOT is actually working properly, but due to the way negative
        numbers are stored and represented, things get complicated when it comes to
        rendering decimal equivalents. This could be the topic for an entire other
        video, however, so we will pause there.</p>\r\n<p>Before I show a quick example
        of practical uses for these operators, I want to quickly touch on another
        operation that is commonly considered a bitwise operation, but isn&rsquo;t
        the classical sense. It&rsquo;s called shifting.</p>\r\n<p>Take &ldquo;101&rdquo;
        and let&rsquo;s &ldquo;shift&rdquo; it to the left. We can do this in Ruby
        with two less than signs.</p>\r\n<pre>((0b101) &lt;&lt; 1).to_s(2)  # =&gt;
        &ldquo;1010&rdquo;</pre>\r\n<p>What&rsquo;s happened is our 101 has shifted
        one position to the left and a 0 has been placed in the rightmost place. We
        can then shift is back again, by shifting to the right.</p>\r\n<pre>((0b1010)
        &gt;&gt; 1).to_s(2)  # =&gt; &ldquo;101&rdquo;</pre>\r\n<p>Due to how binary
        is built around powers of 2, this has the interesting side effect of doubling
        and halving numbers. Let&rsquo;s try it on decimal:</p>\r\n<pre>24 &lt;&lt;
        1 # =&gt; 48\r\n24 &lt;&lt; 2 # =&gt; 96 (equivalent of 24 * 2 * 2)\r\n24
        &lt;&lt; 3 # =&gt; 192 (equivalent of 24 * 2 * 2 * 2)\r\n37 &gt;&gt; 1 # =&gt;
        18</pre>\r\n<p>.. because we&rsquo;re working with binary, we get no decimal
        places on the last one, we just lop off the odd bit.</p>\r\n<p>Shifting is
        commonly used at the machine code level to optimise multiplications since
        shifting bits is a lot quicker than performing true multiplication.</p>\r\n<p>If
        this intrigues you, you might also look up rotation, which is a bit like shifting,
        except instead of digits being lost off of either end, they get looped around
        to the other end of the value. Essentially the bits of a value get <em>rotated</em>
        rather than just shifted.</p>\r\n<p>So how are bitwise operations useful in
        Ruby or even programming in general? This is mostly an exercise for you, Google
        &ldquo;uses for bit wise operations&rdquo; and you&rsquo;ll actually find
        a lot of stuff, but here&rsquo;s a quick fly through some ideas.</p>\r\n<p>If
        you&rsquo;re doing socket programming or interacting with low level C libraries,
        you&rsquo;ll often encounter interesting ways data has been packed using binary.
        For example, in a single byte, we have 8 bits, but you could represent two
        4 bit numbers within that.</p>\r\n<p>Let&rsquo;s say we have the numbers 6
        and 9 and we want to represent those separately within a single byte. We could
        place one number in the lower 4 bits of the byte, and the other in the higher.
        But how?</p>\r\n<p>Simply saying x = 9 gets us the number 9 into the lower
        4 bits, so that was easy! The 6 will take more work.</p>\r\n<p>So all we do
        is shift 6 left by 4 bits and add it on!</p>\r\n<p>Now what about extracting
        both of them? One way is to use what&rsquo;s called a bitmask. What you do
        is mark the area you want to extract using one number then AND it with the
        data to pull out only the marked part.</p>\r\n<pre>0b11110000 &amp; 105  #
        =&gt; 96</pre>\r\n<p>Then shift that right 4 places:</p>\r\n<pre>96 &gt;&gt;
        4 # =&gt; 6</pre>\r\n<p>And similarly for lowest 4 bits:</p>\r\n<pre>0b00001111
        &amp; 105 # =&gt; 9</pre>\r\n<p>This sort of stuff is very useful to know
        when working with things like colour values, IP addresses, file formats, or
        network packets at a low level.</p>\r\n<p>A similar technique is often used
        in C to store simple on/off flags compactly. Let&rsquo;s say we want to represent
        the flags of a blog post.. things like is it private or not, is it published
        or not, was it deleted or not?</p>\r\n<pre>PRIVATE = 1\r\nPUBLISHED = 2\r\nDELETED
        = 4\r\n\r\nflags = 0</pre>\r\n<p>Now, to turn on and off bits, you&rsquo;d
        just use OR for turning bits on:</p>\r\n<pre>flags |= PRIVATE\r\nflags |=
        PUBLISHED</pre>\r\n<p>And then AND for checking if bits are set, a non-zero
        value represents true:</p>\r\n<pre>flags &amp; PRIVATE # =&gt; 1\r\nflags
        &amp; DELETED # =&gt; 0</pre>\r\n<p>We could then use XOR to turn OFF a flag:</p>\r\n<pre>flags
        ^= PRIVATE\r\nflags &amp; PRIVATE # =&gt; 0\r\nflags &amp; PUBLISHED # =&gt;
        1</pre>\r\n<p>Indeed, XOR actually would toggle the flag on and off if you
        kept using it.</p>\r\n<p>Now if you thought ActiveRecord&rsquo;s enums were
        clever, imagine having this on them!</p>\r\n<p>OK, so this is becoming a feast
        rather than a tapas, but if you want to keep investigating, bitwise operations
        are also used in things like:</p>\r\n<ul>\r\n<li>compression</li>\r\n<li>checksums</li>\r\n<li>hashing</li>\r\n<li>graphics
        manipulation (think about doing these operations on colour values, such as
        overlaying two images on top of each other)</li>\r\n<li>cryptography (you
        can XOR values with a key value and toggle them back and forth)</li>\r\n<li>calculating
        valid network addresses for a subnet</li>\r\n<li>swapping two variables without
        an intermediary</li>\r\n</ul>\r\n<p>And more. But that&rsquo;s it, so follow
        me @peterc, subscribe to Ruby Weekly, and goodbye and goodnight!</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40145\">258-bitwise-operations-with-peter-cooper.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40146\">258-bitwise-operations-with-peter-cooper.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b58875d2b5be4e3da33839cf0f891e54a0804b32</guid>\n
        \     <pubDate>Mon, 24 Nov 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/40145/258-bitwise-operations-with-peter-cooper.mp4\"
        length=\"66560055\" type=\"video/mp4\"/>\n      <itunes:subtitle>Guest chef
        Peter Cooper drops some binary science in today's episode!</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[257 Retry]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=633</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        the idealized world of pure programs, operations either work the first time
        or they don't work at all. Sadly, as soon as we start connecting our software
        to external services this beautiful dream starts to shatter. Servers go down,
        networks get overloaded. And sometimes we wind up spending as much time writing
        code to handle an occasional 502 \"Bad Gateway\" error as we do on the rest
        of the code combined.</p>\r\n<p>Let's consider some code that wraps a fictional
        web service. We've used <code>webmock</code> to simulate an unreliable connection
        that causes exceptions to be raised the first two times we try to make a request.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">require <span
        class=\"org-string\">\"net/http\"</span>\r\nrequire <span class=\"org-string\">\"webmock\"</span>\r\ninclude
        <span class=\"org-type\">WebMock</span>::<span class=\"org-type\">API</span>\r\n\r\nstub_request(<span
        class=\"org-constant\">:get</span>, <span class=\"org-string\">\"www.example.org\"</span>)\r\n
        \ .to_raise(<span class=\"org-string\">\"Packets devoured by rodents\"</span>)\r\n
        \ .to_raise(<span class=\"org-string\">\"Request saw its shadow\"</span>)\r\n
        \ .to_return(<span class=\"org-constant\">body</span>: <span class=\"org-string\">\"OK\"</span>)\r\n</pre>\r\n</div>\r\n<p>As
        a result, when we call our wrapper method, it fails with an exception.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">require <span
        class=\"org-string\">\"./setup\"</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">make_request</span>\r\n  result = <span
        class=\"org-type\">Net</span>::<span class=\"org-type\">HTTP</span>.get(<span
        class=\"org-type\">URI</span>(<span class=\"org-string\">\"http://www.example.org\"</span>))\r\n
        \ puts <span class=\"org-string\">\"Success:</span><span class=\"org-variable-name\">
        #{result}</span><span class=\"org-string\">\"</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\nmake_request\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        StandardError</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">~&gt; Packets devoured by rodents</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">~&gt;</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">~&gt; /home/avdi/.gem/ruby/2.1.2/gems/webmock-1.13.0/lib/webmock/response.rb:68:i</span><span
        class=\"org-whitespace-line\">n `raise_error_if_any'</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">~&gt; /home/avdi/.gem/ruby/2.1.2/gems/webmock-1.13.0/lib/webmock/http_lib_adapter</span><span
        class=\"org-whitespace-line\">s/net_http.rb:173:in `build_net_http_response'</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        /home/avdi/.gem/ruby/2.1.2/gems/webmock-1.13.0/lib/webmock/http_lib_adapter</span><span
        class=\"org-whitespace-line\">s/net_http.rb:83:in `request'</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        /home/avdi/.rubies/ruby-2.1.2/lib/ruby/2.1.0/net/http.rb:1280:in `request_g</span><span
        class=\"org-whitespace-line\">et'</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">~&gt; /home/avdi/.rubies/ruby-2.1.2/lib/ruby/2.1.0/net/http.rb:480:in
        `block in g</span><span class=\"org-whitespace-line\">et_response'</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        /home/avdi/.gem/ruby/2.1.2/gems/webmock-1.13.0/lib/webmock/http_lib_adapter</span><span
        class=\"org-whitespace-line\">s/net_http.rb:123:in `start_without_connect'</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        /home/avdi/.gem/ruby/2.1.2/gems/webmock-1.13.0/lib/webmock/http_lib_adapter</span><span
        class=\"org-whitespace-line\">s/net_http.rb:150:in `start'</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        /home/avdi/.rubies/ruby-2.1.2/lib/ruby/2.1.0/net/http.rb:583:in `start'</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        /home/avdi/.rubies/ruby-2.1.2/lib/ruby/2.1.0/net/http.rb:478:in `get_respon</span><span
        class=\"org-whitespace-line\">se'</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">~&gt; /home/avdi/Dropbox/rubytapas/257-retry/make_request.rb:12:in
        `make_request'</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">~&gt; xmptmp-in7623Pte.rb:3:in `&lt;main&gt;'</span>\r\n</pre>\r\n</div>\r\n<p>Knowing
        that we are dealing with a flaky service, we'd like to update the <code>#make_request</code>
        method to try again a few times before giving up. In most programming languages
        this would involve writing a loop. However, in Ruby we have another option.</p>\r\n<p>In
        the parameters to the <code>#make_request</code> method, we initialize a count
        of tries remaining. Then, we add a <code>rescue</code> clause to the method.
        inside the clause, we first log the error. Then we decrement the tries counter.
        Then we check to see if there are any tries remaining.</p>\r\n<p>If there
        are, we invoke the <em>retry</em> keyword. If, however, there are no tries
        left, we re-raise the current exception.</p>\r\n<p>Let's see what happens
        when we call this method. This time, we can see that the request failed twice,
        and succeeded the third time.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">require <span class=\"org-string\">\"./setup\"</span>\r\n\r\n<span
        class=\"org-keyword\">def</span> <span class=\"org-function-name\">make_request</span>(<span
        class=\"org-constant\">tries</span>: 3)\r\n  result = <span class=\"org-type\">Net</span>::<span
        class=\"org-type\">HTTP</span>.get(<span class=\"org-type\">URI</span>(<span
        class=\"org-string\">\"http://www.example.org\"</span>))\r\n  puts <span class=\"org-string\">\"Success:</span><span
        class=\"org-variable-name\"> #{result}</span><span class=\"org-string\">\"</span>\r\n<span
        class=\"org-keyword\">rescue</span> =&gt; e\r\n  tries -= 1\r\n  puts <span
        class=\"org-string\">\"Error:</span><span class=\"org-variable-name\"> #{e}</span><span
        class=\"org-string\">.</span><span class=\"org-variable-name\"> #{tries}</span><span
        class=\"org-string\"> tries left.\"</span>\r\n  <span class=\"org-keyword\">if</span>
        tries &gt; 0\r\n    <span class=\"org-keyword\">retry</span>\r\n  <span class=\"org-keyword\">else</span>\r\n
        \   <span class=\"org-keyword\">raise</span> e\r\n  <span class=\"org-keyword\">end</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\nmake_request\r\n\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Error: Packets devoured by rodents.
        2 tries left.</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Error: Request saw its shadow. 1 tries left.</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Success: OK</span>\r\n</pre>\r\n</div>\r\n<p>So what happened here? By invoking
        <code>retry</code>, we triggered a feature that is not found in many other
        languages. <code>retry</code> tells the Ruby VM to back execution up to the
        beginning of the nearest <code>begin/rescue/end</code> block and try again.
        Since we used the method-level rescue clause, the effective location of the
        nearest <code>begin</code> block is the beginning of the current method's
        code.</p>\r\n<p>There are a couple of points worth noting about this code.
        First off, it is very important when dealing with <code>retry</code> to remember
        to create and use a counter of some kind. Likewise, it is vital to remember
        to decrement the counter <em>before</em> retrying, and to check the state
        of the counter before retrying. Miss any of these points, and we end up with
        an infinite loop.</p>\r\n<p>Secondly, note how we made the counter a method
        parameter instead of instantiating it inside the method body. This isn't just
        to make it easy to override. Remember what we said earlier: <code>retry</code>
        starts again from the <em>top</em> of the nearest <code>begin</code> block
        or, in this case, the current method body. If we had instead made the counter
        a local variable inside the method body, it would be reinitialized to its
        original value with every retry. Again, we'd get an infinite loop.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\"><span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">make_request</span>\r\n  tries = 3 <span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">don't
        do this</span>\r\n  result = <span class=\"org-type\">Net</span>::<span class=\"org-type\">HTTP</span>.get(<span
        class=\"org-type\">URI</span>(<span class=\"org-string\">\"http://www.example.org\"</span>))\r\n
        \ puts <span class=\"org-string\">\"Success:</span><span class=\"org-variable-name\">
        #{result}</span><span class=\"org-string\">\"</span>\r\n<span class=\"org-keyword\">rescue</span>
        =&gt; e\r\n  tries -= 1\r\n  puts <span class=\"org-string\">\"Error:</span><span
        class=\"org-variable-name\"> #{e}</span><span class=\"org-string\">.</span><span
        class=\"org-variable-name\"> #{tries}</span><span class=\"org-string\"> tries
        left.\"</span>\r\n  <span class=\"org-keyword\">if</span> tries &gt; 0\r\n
        \   <span class=\"org-keyword\">retry</span>\r\n  <span class=\"org-keyword\">else</span>\r\n
        \   <span class=\"org-keyword\">raise</span>\r\n  <span class=\"org-keyword\">end</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n</pre>\r\n</div>\r\n<p>So long as we are
        careful with our <code>tries</code> counter though, <code>retry</code> gives
        us an elegant and concise way to re-attempt failed operations.</p>\r\n<p>We've
        got a little more time, so let's pare this code down to the bare essentials
        before we wrap up. I wrote out an if/else statement for maximum clarity, but
        we can write this more concisely. Since, by definition, triggering the retry
        means that nothing after it will be executed, we can reduce the if statement
        to a statement modifier. We also don't technically need to supply an argument
        to <code>raise</code>, since it will implicitly re-reaise the current error
        if nothing else is given.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">require <span class=\"org-string\">\"./setup\"</span>\r\n\r\n<span
        class=\"org-keyword\">def</span> <span class=\"org-function-name\">make_request</span>(<span
        class=\"org-constant\">tries</span>: 3)\r\n  result = <span class=\"org-type\">Net</span>::<span
        class=\"org-type\">HTTP</span>.get(<span class=\"org-type\">URI</span>(<span
        class=\"org-string\">\"http://www.example.org\"</span>))\r\n  puts <span class=\"org-string\">\"Success:</span><span
        class=\"org-variable-name\"> #{result}</span><span class=\"org-string\">\"</span>\r\n<span
        class=\"org-keyword\">rescue</span> =&gt; e\r\n  tries -= 1\r\n  puts <span
        class=\"org-string\">\"Error:</span><span class=\"org-variable-name\"> #{e}</span><span
        class=\"org-string\">.</span><span class=\"org-variable-name\"> #{tries}</span><span
        class=\"org-string\"> tries left.\"</span>\r\n  <span class=\"org-keyword\">retry</span>
        <span class=\"org-keyword\">if</span> tries &gt; 0\r\n  <span class=\"org-keyword\">raise</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n</pre>\r\n</div>\r\n<p>And that's enough
        for today. Happy hacking!</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40024\">257-retry.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40025\">257-retry.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40026\">setup.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40027\">257-retry.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-fcc05360f8e8dc9423985efeb7a7afb90c09271b</guid>\n
        \     <pubDate>Thu, 20 Nov 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/40027/257-retry.mp4\" length=\"74946978\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>In this episode we'll see how
        Ruby lets us retry operations without resorting to a loop.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[256 Workflow]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=632</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>At
        the center of a lot of application programming is <em>workflow</em>. Unlike
        algorithms or object modeling, workflow is all about lists of tasks that have
        to be performed one after another in order to achieve some business goal.
        Usually, the execution of later tasks depends on the outcome of earlier tasks
        in the list.</p>\r\n<p>For instance, consider this highly simplified workflow.
        First, log in. Then, make a purchase. Next, collect any special offers related
        to that purchase. Finally, get a receipt for the purchase.</p>\r\n<p>Unfortunately,
        any of the steps in this workflow can fail. As we can see if we run the code:
        currently it doesn't get past trying to make a purchase before terminating
        with an exception.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src
        src-ruby\"><span class=\"org-variable-name\">$n</span> = 0\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">login</span>\r\n  puts <span class=\"org-string\">\"Logging
        in\"</span>\r\n  <span class=\"org-variable-name\">$n</span> += 1\r\n  <span
        class=\"org-keyword\">return</span> <span class=\"org-constant\">:session123</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">make_purchase</span>(session)\r\n  puts
        <span class=\"org-string\">\"Making purchase\"</span>\r\n  <span class=\"org-keyword\">fail</span>
        <span class=\"org-string\">\"The API was rude to me\"</span> <span class=\"org-keyword\">if</span>
        <span class=\"org-variable-name\">$n</span> &lt; 2\r\n  <span class=\"org-variable-name\">$n</span>
        += 1\r\n  <span class=\"org-constant\">:purchase_record</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-keyword\">def</span> <span class=\"org-function-name\">get_special_offers</span>(purchase_record)\r\n
        \ puts <span class=\"org-string\">\"Getting special offers\"</span>\r\n  <span
        class=\"org-keyword\">fail</span> <span class=\"org-string\">\"Special offers
        server is down.\"</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-keyword\">def</span> <span class=\"org-function-name\">get_receipt</span>(purchase_record)\r\n
        \ puts <span class=\"org-string\">\"Getting receipt\"</span>\r\n  <span class=\"org-keyword\">fail</span>
        <span class=\"org-string\">\"I forgot what I was doing\"</span> <span class=\"org-keyword\">if</span>
        <span class=\"org-variable-name\">$n</span> &lt; 3\r\n  <span class=\"org-keyword\">fail</span>
        <span class=\"org-string\">\"I left it in my other pants\"</span> <span class=\"org-keyword\">if</span>
        <span class=\"org-variable-name\">$n</span> &lt; 4\r\n  <span class=\"org-variable-name\">$n</span>
        += 1\r\n  <span class=\"org-constant\">:receipt</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\nsession
        = login\r\npurchase_rec = make_purchase(session)\r\noffers = get_special_offers(purchase_rec)\r\nreceipt
        = get_receipt(purchase_rec)\r\n\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Logging in</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Making purchase</span>\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        RuntimeError</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">~&gt; The API was rude to me</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">~&gt;</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">~&gt; xmptmp-in25515jcB.rb:11:in `make_purchase'</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        xmptmp-in25515jcB.rb:30:in `&lt;main&gt;'</span>\r\n</pre>\r\n</div>\r\n<p>The
        errors that these particular steps usually encounter tend to be <em>transient
        errors</em>. That is, they are errors that only happen some of the time, due
        to network connectivity issues, server outages, or other temporary problems.</p>\r\n<p>There
        are a lot of potential ways we could change this code to make it more robust.
        Some possible approaches include building a state machine to represent our
        workflow. Or creating a general-purpose monadic abstraction for chaining together
        unreliable actions.</p>\r\n<p>These are legitimate strategies with some good
        arguments in their favor. But I thought it would be interesting to try and
        see how we might tackle this with as little change or added ceremony as possible,
        using just some carefully chosen Ruby features.</p>\r\n<p>In order to make
        the workflow more robust, we add a new helper method called <code>attempt</code>.
        It accepts an argument determining how many times a task will be retried,
        and a block which is the action to be attempted.</p>\r\n<p>We surround each
        step in the workflow with a call to <code>attempt</code>, specifying different
        numbers of re-try attempts based on our past experience with these actions
        and our tolerance for waiting before giving up.</p>\r\n<p>When we run the
        new code, it gets further. But unfortunately, it still doesn't quite succeed.
        The method for getting special offers is still failing.</p>\r\n<p>The thing
        is, getting special offers is strictly optional. This is reflected in the
        fact that we've only permitted it one attempt. We don't want to waste a lot
        of time trying to retrieve special offers.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\"><span class=\"org-variable-name\">$n</span> = 0\r\n\r\n<span
        class=\"org-keyword\">def</span> <span class=\"org-function-name\">login</span>\r\n
        \ puts <span class=\"org-string\">\"Logging in\"</span>\r\n  <span class=\"org-variable-name\">$n</span>
        += 1\r\n  <span class=\"org-keyword\">return</span> <span class=\"org-constant\">:session123</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">make_purchase</span>(session)\r\n  <span
        class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Making
        purchase\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span class=\"org-string\">\"The
        API was rude to me\"</span> <span class=\"org-keyword\">if</span> <span class=\"org-variable-name\">$n</span>
        &lt; 3\r\n  <span class=\"org-constant\">:purchase_record</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">get_special_offers</span>(purchase_record)\r\n
        \ <span class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Getting
        special offers\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span
        class=\"org-string\">\"Special offers server is down.\"</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-keyword\">def</span> <span class=\"org-function-name\">get_receipt</span>(purchase_record)\r\n
        \ <span class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Getting
        receipt\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span class=\"org-string\">\"I
        forgot what I was doing\"</span> <span class=\"org-keyword\">if</span> <span
        class=\"org-variable-name\">$n</span> &lt; 4\r\n  <span class=\"org-keyword\">fail</span>
        <span class=\"org-string\">\"I left it in my other pants\"</span> <span class=\"org-keyword\">if</span>
        <span class=\"org-variable-name\">$n</span> &lt; 5\r\n  <span class=\"org-constant\">:receipt</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">attempt</span>(<span class=\"org-constant\">times</span>:
        1)\r\n  <span class=\"org-keyword\">yield</span>\r\n<span class=\"org-keyword\">rescue</span>
        =&gt; e\r\n  times -= 1\r\n  <span class=\"org-keyword\">retry</span> <span
        class=\"org-keyword\">if</span> times &gt; 0\r\n  <span class=\"org-keyword\">raise</span>(e)\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\nsession      = attempt(<span class=\"org-constant\">times</span>:
        1)  {login}\r\npurchase_rec = attempt(<span class=\"org-constant\">times</span>:
        3)  {make_purchase(session)}\r\noffers       = attempt(<span class=\"org-constant\">times</span>:
        1)  {get_special_offers(purchase_rec)}\r\nreceipt      = attempt(<span class=\"org-constant\">times</span>:
        10) {get_receipt(purchase_rec)}\r\n\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Logging in</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Making purchase</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Making purchase</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Getting special offers</span>\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        RuntimeError</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">~&gt; Special offers server is down.</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        xmptmp-in25515NTF.rb:19:in `get_special_offers'</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">~&gt; xmptmp-in25515NTF.rb:40:in `block
        in &lt;main&gt;'</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">~&gt; xmptmp-in25515NTF.rb:31:in `attempt'</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">~&gt;
        xmptmp-in25515NTF.rb:40:in `&lt;main&gt;'</span>\r\n</pre>\r\n</div>\r\n<p>What
        we need is a way to alter the error policy for an individual step in the workflow.
        In order to do this, we add a new keyword argument <code>on_error</code> to
        the <code>attempt</code> method. We give it a default which is a lambda that
        simply re-raises the passed error.</p>\r\n<p>Then we replace the <code>raise</code>
        in the <code>rescue</code> stanza with a call to the <code>on_error</code>
        handler, using Ruby's shorthand lambda calling syntax.</p>\r\n<p>Back in our
        workflow, we change the special offers step. We give it a custom error handler,
        which simply ignores the passed error and does nothing. When we run the code
        again, it gets all the way to the end. We have successfully made the special
        offer step optional.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src
        src-ruby\"><span class=\"org-variable-name\">$n</span> = 0\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">login</span>\r\n  puts <span class=\"org-string\">\"Logging
        in\"</span>\r\n  <span class=\"org-variable-name\">$n</span> += 1\r\n  <span
        class=\"org-keyword\">return</span> <span class=\"org-constant\">:session123</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">make_purchase</span>(session)\r\n  <span
        class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Making
        purchase\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span class=\"org-string\">\"The
        API was rude to me\"</span> <span class=\"org-keyword\">if</span> <span class=\"org-variable-name\">$n</span>
        &lt; 3\r\n  <span class=\"org-constant\">:purchase_record</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">get_special_offers</span>(purchase_record)\r\n
        \ <span class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Getting
        special offers\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span
        class=\"org-string\">\"Special offers server is down.\"</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-keyword\">def</span> <span class=\"org-function-name\">get_receipt</span>(purchase_record)\r\n
        \ <span class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Getting
        receipt\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span class=\"org-string\">\"I
        forgot what I was doing\"</span> <span class=\"org-keyword\">if</span> <span
        class=\"org-variable-name\">$n</span> &lt; 4\r\n  <span class=\"org-keyword\">fail</span>
        <span class=\"org-string\">\"I left it in my other pants\"</span> <span class=\"org-keyword\">if</span>
        <span class=\"org-variable-name\">$n</span> &lt; 5\r\n  <span class=\"org-constant\">:receipt</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">attempt</span>(<span class=\"org-constant\">times</span>:
        1, <span class=\"org-constant\">on_error</span>: -&gt;(e){<span class=\"org-keyword\">raise</span>
        e})\r\n  <span class=\"org-keyword\">yield</span>\r\n<span class=\"org-keyword\">rescue</span>
        =&gt; e\r\n  times -= 1\r\n  <span class=\"org-keyword\">retry</span> <span
        class=\"org-keyword\">if</span> times &gt; 0\r\n  on_error.(e)\r\n<span class=\"org-keyword\">end</span>\r\n\r\nsession
        = attempt(<span class=\"org-constant\">times</span>: 1)  {login}\r\npurchase_rec
        = attempt(<span class=\"org-constant\">times</span>: 3)  {make_purchase(session)}\r\noffers
        = attempt(<span class=\"org-constant\">times</span>: 1, <span class=\"org-constant\">on_error</span>:
        -&gt;(_){}) {\r\n  get_special_offers(purchase_rec)\r\n}\r\nreceipt = attempt(<span
        class=\"org-constant\">times</span>: 10) {get_receipt(purchase_rec)}\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Logging in</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Making purchase</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Making purchase</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Getting special offers</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Getting receipt</span>\r\n</pre>\r\n</div>\r\n<p>Now
        let's throw a wrench in the works. We don't actually want these steps to raise
        exceptions when they fail. What we really want to do is collect both the exception
        and some extra contextual information for diagnostic use.</p>\r\n<p>In order
        to do this, we add a new variable <code>error_details</code>, which starts
        out <code>nil</code>. We then make a lambda named <code>capture_error</code>,
        which will accept an exception as an argument and set the <code>error_details</code>
        variable to a hash of failure data. In the hash we include the actual exception,
        the time at which it was raised, and the hostname of the current node. For
        this last item, we also need to require the <code>socket</code> library.</p>\r\n<p>We
        then go through each of our steps, except for the optional special offers
        one, changing the error handler to be our custom lambda.</p>\r\n<p>We add
        a line to our output, examining the state of the <code>error_details</code>
        variable. Then we alter one of the workflow steps to force it to always fail.</p>\r\n<p>When
        we run the code, we can see that rather than raising an exception as it did
        before, it now saves information into the <code>error_details</code> variable.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\"><span class=\"org-variable-name\">$n</span>
        = 0\r\n\r\n<span class=\"org-keyword\">def</span> <span class=\"org-function-name\">login</span>\r\n
        \ puts <span class=\"org-string\">\"Logging in\"</span>\r\n  <span class=\"org-variable-name\">$n</span>
        += 1\r\n  <span class=\"org-keyword\">return</span> <span class=\"org-constant\">:session123</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">make_purchase</span>(session)\r\n  <span
        class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Making
        purchase\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span class=\"org-string\">\"The
        API was rude to me\"</span> <span class=\"org-keyword\">if</span> <span class=\"org-variable-name\">$n</span>
        &lt; 100\r\n  <span class=\"org-constant\">:purchase_record</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">get_special_offers</span>(purchase_record)\r\n
        \ <span class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Getting
        special offers\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span
        class=\"org-string\">\"Special offers server is down.\"</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-keyword\">def</span> <span class=\"org-function-name\">get_receipt</span>(purchase_record)\r\n
        \ <span class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Getting
        receipt\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span class=\"org-string\">\"I
        forgot what I was doing\"</span> <span class=\"org-keyword\">if</span> <span
        class=\"org-variable-name\">$n</span> &lt; 4\r\n  <span class=\"org-keyword\">fail</span>
        <span class=\"org-string\">\"I left it in my other pants\"</span> <span class=\"org-keyword\">if</span>
        <span class=\"org-variable-name\">$n</span> &lt; 5\r\n  <span class=\"org-constant\">:receipt</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">attempt</span>(<span class=\"org-constant\">times</span>:
        1, <span class=\"org-constant\">on_error</span>: -&gt;(e){<span class=\"org-keyword\">raise</span>
        e})\r\n  <span class=\"org-keyword\">yield</span>\r\n<span class=\"org-keyword\">rescue</span>
        =&gt; e\r\n  times -= 1\r\n  <span class=\"org-keyword\">retry</span> <span
        class=\"org-keyword\">if</span> times &gt; 0\r\n  on_error.(e)\r\n<span class=\"org-keyword\">end</span>\r\n\r\nrequire
        <span class=\"org-string\">\"socket\"</span>\r\nerror_details = <span class=\"org-variable-name\">nil</span>\r\ncapture_error
        = -&gt;(e){\r\n  error_details = {\r\n    <span class=\"org-constant\">error</span>:
        e,\r\n    <span class=\"org-constant\">time</span>:  <span class=\"org-type\">Time</span>.now,\r\n
        \   <span class=\"org-constant\">host</span>: <span class=\"org-type\">Socket</span>.gethostname\r\n
        \ }\r\n}\r\nsession = attempt(<span class=\"org-constant\">times</span>: 1,
        <span class=\"org-constant\">on_error</span>: capture_error)  {login}\r\npurchase_rec
        = attempt(<span class=\"org-constant\">times</span>: 3, <span class=\"org-constant\">on_error</span>:
        capture_error) {\r\n  make_purchase(session)\r\n}\r\noffers = attempt(<span
        class=\"org-constant\">times</span>: 1, <span class=\"org-constant\">on_error</span>:
        -&gt;(_){}) {\r\n  get_special_offers(purchase_rec)\r\n}\r\nreceipt = attempt(<span
        class=\"org-constant\">times</span>: 10, <span class=\"org-constant\">on_error</span>:
        capture_error) {\r\n  get_receipt(purchase_rec)\r\n}\r\n\r\nerror_details\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        {:error=&gt;#&lt;RuntimeError: The API was rude to me&gt;,</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">:time=&gt;2014-10-17
        00:35:15 -0400,</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">:host=&gt;\"hazel\"}</span>\r\n\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Logging in</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Making purchase</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Making purchase</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Making purchase</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Getting special offers</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Getting receipt</span>\r\n</pre>\r\n</div>\r\n<p>Unfortunately, we can also
        see an unintended consequence in the output. Because we are no longer terminating
        execution early with an exception, the steps go right on executing even after
        the purchase step has failed.</p>\r\n<p>In order to ensure execution stops
        as soon as a required step fails, we make a few more changes. First, we modify
        our error handler lambdas. We make the <code>capture_error</code> one return
        <code>false</code>, and the special offer's no-op one returns <code>true</code>.</p>\r\n<p>Then
        we add <code>and</code> operators connecting each of the steps together in
        a chain. You might recall this idiom from episode #125.</p>\r\n<p>We've now
        made the execution of each step depend on the previous step returning a truthy
        value. We happen to know that all of our steps return something truthy when
        they succeed. And we've ensured that the <code>capture_error</code> lambda
        returns false, which should end the chain of execution when an error is encountered.</p>\r\n<p>To
        test this, we run the code again. Sure enough, we can see that the workflow
        now only gets as far as the failing step, and then stops.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\"><span class=\"org-variable-name\">$n</span> = 0\r\n\r\n<span
        class=\"org-keyword\">def</span> <span class=\"org-function-name\">login</span>\r\n
        \ puts <span class=\"org-string\">\"Logging in\"</span>\r\n  <span class=\"org-variable-name\">$n</span>
        += 1\r\n  <span class=\"org-keyword\">return</span> <span class=\"org-constant\">:session123</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">make_purchase</span>(session)\r\n  <span
        class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Making
        purchase\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span class=\"org-string\">\"The
        API was rude to me\"</span> <span class=\"org-keyword\">if</span> <span class=\"org-variable-name\">$n</span>
        &lt; 100\r\n  <span class=\"org-constant\">:purchase_record</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">get_special_offers</span>(purchase_record)\r\n
        \ <span class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Getting
        special offers\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span
        class=\"org-string\">\"Special offers server is down.\"</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-keyword\">def</span> <span class=\"org-function-name\">get_receipt</span>(purchase_record)\r\n
        \ <span class=\"org-variable-name\">$n</span> += 1\r\n  puts <span class=\"org-string\">\"Getting
        receipt\"</span>\r\n  <span class=\"org-keyword\">fail</span> <span class=\"org-string\">\"I
        forgot what I was doing\"</span> <span class=\"org-keyword\">if</span> <span
        class=\"org-variable-name\">$n</span> &lt; 4\r\n  <span class=\"org-keyword\">fail</span>
        <span class=\"org-string\">\"I left it in my other pants\"</span> <span class=\"org-keyword\">if</span>
        <span class=\"org-variable-name\">$n</span> &lt; 5\r\n  <span class=\"org-constant\">:receipt</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">attempt</span>(<span class=\"org-constant\">times</span>:
        1, <span class=\"org-constant\">on_error</span>: -&gt;(e){<span class=\"org-keyword\">raise</span>
        e})\r\n  <span class=\"org-keyword\">yield</span>\r\n<span class=\"org-keyword\">rescue</span>
        =&gt; e\r\n  times -= 1\r\n  <span class=\"org-keyword\">retry</span> <span
        class=\"org-keyword\">if</span> times &gt; 0\r\n  on_error.(e)\r\n<span class=\"org-keyword\">end</span>\r\n\r\nrequire
        <span class=\"org-string\">\"socket\"</span>\r\nerror_details = <span class=\"org-variable-name\">nil</span>\r\ncapture_error
        = -&gt;(e){\r\n  error_details = {\r\n    <span class=\"org-constant\">error</span>:
        e,\r\n    <span class=\"org-constant\">time</span>:  <span class=\"org-type\">Time</span>.now,\r\n
        \   <span class=\"org-constant\">host</span>:  <span class=\"org-type\">Socket</span>.gethostname\r\n
        \ }\r\n  <span class=\"org-variable-name\">false</span>\r\n}\r\nsession =
        attempt(<span class=\"org-constant\">times</span>: 1, <span class=\"org-constant\">on_error</span>:
        capture_error)  {login} <span class=\"org-keyword\">and</span>\r\npurchase_rec
        = attempt(<span class=\"org-constant\">times</span>: 3, <span class=\"org-constant\">on_error</span>:
        capture_error) {\r\n  make_purchase(session)\r\n} <span class=\"org-keyword\">and</span>\r\noffers
        = attempt(<span class=\"org-constant\">times</span>: 1, <span class=\"org-constant\">on_error</span>:
        -&gt;(_){<span class=\"org-variable-name\">true</span>}) {\r\n  get_special_offers(purchase_rec)\r\n}
        <span class=\"org-keyword\">and</span>\r\nreceipt = attempt(<span class=\"org-constant\">times</span>:
        10, <span class=\"org-constant\">on_error</span>: capture_error) {\r\n  get_receipt(purchase_rec)\r\n}\r\n\r\nerror_details\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        {:error=&gt;#&lt;RuntimeError: The API was rude to me&gt;,</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">:time=&gt;2014-10-17
        00:34:58 -0400,</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">:host=&gt;\"hazel\"}</span>\r\n\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Logging in</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Making purchase</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Making purchase</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Making purchase</span>\r\n</pre>\r\n</div>\r\n<p>There
        is a lot more we could try and tackle here. For instance, what about specifying
        timeouts for slow operations? And what do we do about tasks that return a
        falsy value even when they succeed?</p>\r\n<p>There are clearly refinements
        we could make. But what we have already done works well, and I like that we've
        managed to accomplish without radically changing the basic structure of this
        code. I think this is enough for today. Happy hacking!</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=39904\">256-workflow.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=39905\">256-workflow.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=39906\">256-workflow.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-d89b1518e6104b0ec5778aac966933caa386ab5a</guid>\n
        \     <pubDate>Mon, 17 Nov 2014 12:27:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/39906/256-workflow.mp4\"
        length=\"135032850\" type=\"video/mp4\"/>\n      <itunes:subtitle>Today's
        episode is about coordinating application workflow using simple Ruby idioms.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[255 httpd]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=630</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>I
        want to share with you one of my favorite Ruby parlor tricks.</p>\r\n<p>The
        other day I was updating an old website, and I needed to make sure the changes
        I had made looked right. It was a purely static site, so I just needed something
        that would serve the files in the current directory to a browser.</p>\r\n<p>In
        order to do this, I used the following command line:</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-sh\">ruby -run -e httpd . --port=8080\r\n</pre>\r\n</div>\r\n<p>This
        booted up a Webrick instance, and I was able to test the site.</p>\r\n<p>Let's
        talk about what's going on here. We'll start by breaking down the command
        I used.</p>\r\n<p>The <code>ruby</code> part is hopefully self-explanatory.
        Then comes a dash and an 'r'. This is where things get a little sneaky. '-r'
        is mnemonic for <code>require</code>. This flag causes Ruby to treat the next
        argument as the name of a feature and attempt to load it.</p>\r\n<p>Next we
        supply the library to be required, which is called simply <code>un</code>.
        Ruby does not require us to put a space between short-form flags and their
        arguments, so we can squash them together. The result is that it looks like
        the word <code>run</code>&hellip; which is exactly what the authors playfully
        intended when they named the library.</p>\r\n<p>The next flag is <code>-e</code>,
        which tells Ruby to execute the following argument as Ruby code. The code
        we execute is simply a one-word method invocation: <code>httpd</code>.</p>\r\n<p>Next
        we supply the current directory as the directory to serve, and specify a port
        number.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src src-sh\">ruby
        -r un -e httpd . --port=8080\r\n</pre>\r\n</div>\r\n<p>So what is this mysterious
        <code>un</code> library, and this <code>httpd</code> method?</p>\r\n<p>Let's
        ask Ruby. As we learned in episode #237, Ruby keeps a list of the library
        files it has already loaded. We can tell Ruby to load the <code>un</code>
        library, and then grep through the <code>$LOADED_FEATURES</code> list until
        we find one that ends with <code>un.rb</code>.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-sh\">$ ruby -run -e <span class=\"org-string\">'puts $LOADED_FEATURES.grep(/un.rb$/)'</span>\r\n/home/avdi/.rubies/ruby-2.1.2/lib/ruby/2.1.0/un.rb\r\n</pre>\r\n</div>\r\n<p>Now
        that we know where to find this library, lets open it up and take a peek inside.</p>\r\n<p>What
        we find is a is one-file library that offers a number of handy command-line
        utilities written in pure Ruby. A lot of them we will probably never need,
        like clones of the UNIX copy and move commands. Although, these might just
        be useful if we ever wanted to write a simple script that worked the same
        on Windows as on Linux or Mac OS.</p>\r\n<p>If we scroll down, we can find
        the <code>httpd</code> method. It's pretty short and simple. There's come
        boilerplate for handling command-line flags, and then just enough code to
        start up a Webrick server, serving the given directory.</p>\r\n<p>And that's
        really Ruby in a nutshell: it has fun magic tricks, but it's easy to look
        behind the curtain and learn how to the trick was accomplished. Happy hacking!</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=39650\">255-httpd.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=39651\">255-httpd.sh</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=39652\">255-httpd.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-e4befa5159c5e99c2752a853d787063c278f3e42</guid>\n
        \     <pubDate>Thu, 13 Nov 2014 09:36:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/39652/255-httpd.mp4\" length=\"72428988\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Today's dish is about a fun-but-useful
        easter egg in the Ruby standard library.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[254 Step]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=628</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>So
        far on this show we have covered a few different ways to iterate over a sequence
        of incrementing or decrementing integers, without resorting to a traditional
        for-loop. We've used Ruby ranges, as well as the <code>#upto</code> and #downto=
        methods. We saw how both of those approaches have their own limitations.</p>\r\n<p>Today,
        we'll look at a generalization of this concept.</p>\r\n<p>Let's jump back
        to some code we saw in the last episode, #253. It prints a few verses of the
        song \"99 bottles of beer on the wall.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">99.downto(95) <span class=\"org-keyword\">do</span>
        |n|\r\n  puts <span class=\"org-variable-name\">\"#{n}</span><span class=\"org-string\">
        bottles of beer on the wall,</span><span class=\"org-variable-name\"> #{n}</span><span
        class=\"org-string\"> bottles of beer\"</span>\r\n  puts <span class=\"org-string\">\"Take
        one down, pass it around,</span><span class=\"org-variable-name\"> #{n-1}</span><span
        class=\"org-string\"> bottles of beer on the wall\"</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        99 bottles of beer on the wall, 99 bottles of beer</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Take one down, pass it around,
        98 bottles of beer on the wall</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 98 bottles of beer on the wall,
        98 bottles of beer</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Take one down, pass it around, 97 bottles of
        beer on the wall</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; 97 bottles of beer on the wall, 97 bottles
        of beer</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Take one down, pass it around, 96 bottles of beer on the wall</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        96 bottles of beer on the wall, 96 bottles of beer</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Take one down, pass it around,
        95 bottles of beer on the wall</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 95 bottles of beer on the wall,
        95 bottles of beer</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Take one down, pass it around, 94 bottles of
        beer on the wall</span>\r\n</pre>\r\n</div>\r\n<p>Now let's say we want to
        get to the end of the song faster, by only printing every <em>other</em> verse.
        We can't do this with the <code>#downto</code> method. But we <em>can</em>
        do it with the <code>#step</code> method. We give <code>#step</code> two optional
        keyword arguments: the number to end on, and the number to add on each iteration.
        In our case, we tell it to end on 94, and step by -2. The result is an abbreviated
        rendition of the song.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src
        src-ruby\">99.step(<span class=\"org-constant\">to</span>: 95, <span class=\"org-constant\">by</span>:
        -2) <span class=\"org-keyword\">do</span> |n|\r\n  puts <span class=\"org-variable-name\">\"#{n}</span><span
        class=\"org-string\"> bottles of beer on the wall,</span><span class=\"org-variable-name\">
        #{n}</span><span class=\"org-string\"> bottles of beer\"</span>\r\n  puts
        <span class=\"org-string\">\"Take one down, pass it around,</span><span class=\"org-variable-name\">
        #{n-1}</span><span class=\"org-string\"> bottles of beer on the wall\"</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 99 bottles of beer on the wall,
        99 bottles of beer</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Take one down, pass it around, 98 bottles of
        beer on the wall</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; 97 bottles of beer on the wall, 97 bottles
        of beer</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Take one down, pass it around, 96 bottles of beer on the wall</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        95 bottles of beer on the wall, 95 bottles of beer</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Take one down, pass it around,
        94 bottles of beer on the wall</span>\r\n</pre>\r\n</div>\r\n<p>As I mentioned,
        both arguments are optional. If we omit the <code>by</code> keyword, we get
        an upwards count by one.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">1.step(<span class=\"org-constant\">to</span>: 5) <span
        class=\"org-keyword\">do</span> |n|\r\n  puts n\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        1</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        2</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        3</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        4</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        5</span>\r\n</pre>\r\n</div>\r\n<p>If we omit the <code>to</code> keyword,
        we get an infinite progression. Of course, this means we need to have some
        condition for breaking out of the block unless we want it to loop infinitely.
        Here's an example of a loop that searches for an unused ID.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">ids = [3, 2, 5, 4, 1, 7]\r\nid = 1.step <span class=\"org-keyword\">do</span>
        |n|\r\n  <span class=\"org-keyword\">break</span> n <span class=\"org-keyword\">if</span>
        !ids.include?(n)\r\n<span class=\"org-keyword\">end</span>\r\nputs <span class=\"org-string\">\"Free
        ID:</span><span class=\"org-variable-name\"> #{id}</span><span class=\"org-string\">\"</span>\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Free ID: 6</span>\r\n</pre>\r\n</div>\r\n<p>(If the idiom of using <code>break</code>
        to return a value from a block is unfamiliar to you, check out episode #71.)</p>\r\n<p>Also
        unlike the <code>#upto</code> and <code>#downto</code> methods, <code>#step</code>
        is available on <em>all</em> Numeric types, not just integers. This means
        that we could increment floating point numbers if we wanted to.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">0.0.step(<span
        class=\"org-constant\">to</span>: 1.0, <span class=\"org-constant\">by</span>:
        0.05) <span class=\"org-keyword\">do</span> |n|\r\n  puts n\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        0.0</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        0.05</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        0.1</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        0.15000000000000002</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; 0.2</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 0.25</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 0.30000000000000004</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        0.35000000000000003</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; 0.4</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 0.45</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 0.5</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 0.55</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 0.6000000000000001</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        0.65</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        0.7000000000000001</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; 0.75</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 0.8</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 0.8500000000000001</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        0.9</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        0.9500000000000001</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; 1.0</span>\r\n</pre>\r\n</div>\r\n<p>Finally,
        as you might imagine from some of the other iteration methods we've explored
        on this show, there is also a form of <code>#step</code> that returns an Enumerator.
        Want to know the sum of just the even numbers from 0 through 100? We can set
        up the iteration and then, instead of supplying a block directly to the <code>#step</code>
        message, we can chain on sends to other Enumerable methods. In this case,
        we use <code>#reduce</code> to calculate a sum.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">0.step(<span class=\"org-constant\">to</span>: 100,
        <span class=\"org-constant\">by</span>: 2).reduce(<span class=\"org-constant\">:+</span>)
        <span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        2550</span>\r\n</pre>\r\n</div>\r\n<p>(We introduced this usage of <code>#reduce</code>
        in episode #149)</p>\r\n<p>While it isn't quite as expressive as special case
        methods like <code>#upto</code> and <code>#downto</code>, <code>#step</code>
        enables us to iterate over numeric sequences in a very generalized and flexible
        way. Hopefully, knowing about <code>#step</code> will save you from having
        to write a specialized loop with counter variables at some point. Happy hacking!</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=39499\">254-step.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=39500\">254-step.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=39501\">254-step.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-1c6615b916ae4fa6ff5a5c0ae2980ec7ca71ddfc</guid>\n
        \     <pubDate>Mon, 10 Nov 2014 09:14:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/39501/254-step.mp4\" length=\"40376691\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>We've seen ranges and upto/downto
        methods. Today we take a look at a generalized way to step through arbitrary,
        potentially infinite number sequences.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[253 Downto]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=625</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Here's
        a quickie for you. The other day I was working on a little coding kata, where
        the goal is to print out the verses to the drinking song \"99 Bottles of Beer
        on the Wall\". For the purpose of this demonstration, I'll narrow the problem
        down to just the first five verses.</p>\r\n<p>Fresh off of making an episode
        about Ruby ranges, I automatically typed up some code that looked something
        like this.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">(99..95).each
        <span class=\"org-keyword\">do</span> |n|\r\n  puts <span class=\"org-variable-name\">\"#{n}</span><span
        class=\"org-string\"> bottles of beer on the wall,</span><span class=\"org-variable-name\">
        #{n}</span><span class=\"org-string\"> bottles of beer\"</span>\r\n  puts
        <span class=\"org-string\">\"Take one down, pass it around,</span><span class=\"org-variable-name\">
        #{n-1}</span><span class=\"org-string\"> bottles of beer on the wall\"</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n</pre>\r\n</div>\r\n<p>I executed this
        code, confident I would get the result I expected. And then I was very surprised
        when nothing at all came out.</p>\r\n<p>What I had forgotten was that Ruby
        ranges are one-way: they only go up, never down. When we expand this range
        to an array, it is empty:</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">(99..95).to_a                   <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; []</span>\r\n</pre>\r\n</div>\r\n<p>To
        be perfectly frank, I consider this an omission in Ruby. Other languages have
        range features that can go either up or down. This is one of those rare cases
        in Ruby where typing out the code we imagine should work results in a failure.</p>\r\n<p>It
        is very rare to see traditional C-style for loops in Ruby code, and it would
        be jarring if we had to resort to one now. Fortunately, Ruby doesn't leave
        us completely out in the cold in this situation. Instead of a Range, we can
        use the <code>#downto</code> method. We send it to the starting integer, and
        provide the ending number as an argument. Our block will now be called with
        the number 99, then 98, then 97, 96, and finally 95.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">99.downto(95) <span class=\"org-keyword\">do</span>
        |n|\r\n  puts <span class=\"org-variable-name\">\"#{n}</span><span class=\"org-string\">
        bottles of beer on the wall,</span><span class=\"org-variable-name\"> #{n}</span><span
        class=\"org-string\"> bottles of beer\"</span>\r\n  puts <span class=\"org-string\">\"Take
        one down, pass it around,</span><span class=\"org-variable-name\"> #{n-1}</span><span
        class=\"org-string\"> bottles of beer on the wall\"</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        99 bottles of beer on the wall, 99 bottles of beer</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Take one down, pass it around,
        98 bottles of beer on the wall</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 98 bottles of beer on the wall,
        98 bottles of beer</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Take one down, pass it around, 97 bottles of
        beer on the wall</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; 97 bottles of beer on the wall, 97 bottles
        of beer</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Take one down, pass it around, 96 bottles of beer on the wall</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        96 bottles of beer on the wall, 96 bottles of beer</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Take one down, pass it around,
        95 bottles of beer on the wall</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 95 bottles of beer on the wall,
        95 bottles of beer</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; Take one down, pass it around, 94 bottles of
        beer on the wall</span>\r\n</pre>\r\n</div>\r\n<p>Like so many other iterative
        methods in Ruby, <code>#downto</code> can also return an Enumerator. If we
        omit the block, we can then chain on whatever Enumerable method we like, such
        as <code>#map</code>.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src
        src-ruby\">99.downto(95).map{ |n| <span class=\"org-variable-name\">\"#{n}</span><span
        class=\"org-string\"> bottles of beer\"</span> }\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [\"99 bottles of beer\",</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">\"98
        bottles of beer\",</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">\"97 bottles of beer\",</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">\"96 bottles of beer\",</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">\"95
        bottles of beer\"]</span>\r\n</pre>\r\n</div>\r\n<p>It probably goes without
        saying that the <code>#downto</code> method is mirrored by an <code>#upto</code>
        method, which does exactly what it sounds like.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">1.upto(5) <span class=\"org-keyword\">do</span> |n|\r\n
        \ puts n\r\n<span class=\"org-keyword\">end</span>\r\n\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 1</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 2</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 3</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 4</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; 5</span>\r\n</pre>\r\n</div>\r\n<p>Sadly,
        neither of these methods accepts a step unit, so they are only helpful in
        cases where we want to count up or down in increments of one.</p>\r\n<p>If
        we want to get fancier, such as using custom increments or generating infinite
        sequences, there <em>is</em> a way to do that. But that's a topic for the
        next episode. Until then: Happy hacking!</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38896\">253-downto.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38897\">253-downto.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38898\">253-downto.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ed17302a7117207f96462851fc97439a4a6dff0d</guid>\n
        \     <pubDate>Thu, 06 Nov 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/38898/253-downto.mp4\" length=\"31375562\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Sometimes a range doesn't cut
        it.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[252 Pop]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=623</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Let's
        say we run a subscription screencasting service. Some of our episodes are
        members-only, and some of the episodes are free for anyone to watch. On our
        website's home page, we'd like to feature a random selection of the free videos
        so that visitors can get a sense of the content.</p>\r\n<p>But we don't want
        the selection to be completely random. In particular, we don't want to accidentally
        show just videos from a particular miniseries. We want to ensure that the
        featured samples are picked from a broad range of the show's history.</p>\r\n<p>Here's
        one way we might handle this. We define the number of sample episodes to show
        on the front page - let's say 2. Then we calculate a slice size from the total
        number of free episodes divided by the number of samples to feature. With
        this number in hand, we can use <code>#each_slice</code> to split the free
        episode list into equal-sized bins. Each bin represents a different period
        of time in the show's history.</p>\r\n<p>We can map over those bins, and pick
        a single random episode out of each one with <code>#sample</code>. After flattening
        the result, we have our selection of episodes. It is random, but random in
        such a way that it is impossible for two brand-new or two very old episodes
        to be selected.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src
        src-ruby\">eps = [7, 11, 17, 20, 24, 27, 35, 42, 45, 46]\r\n\r\nslice_count
        = 2\r\nslice_size  = eps.size / slice_count <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; 5</span>\r\n\r\nslices = eps.each_slice(slice_size).to_a\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [[7, 11, 17, 20, 24], [27, 35, 42, 45, 46]]</span>\r\n\r\npicks = slices.map
        { |s|\r\n  s.sample(1)                   <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [11], [27]</span>\r\n}.flatten\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [11, 27]</span>\r\n</pre>\r\n</div>\r\n<p>Of course, it <em>would</em> still
        be possible for two episodes to be selected from right in the middle of the
        show's run. In order to ensure a better spread, and because we like the idea
        of having more featured videos on the homepage, we increase the slice count
        3.</p>\r\n<p>Unfortunately, this messes everything up. Because we currently
        have 10 free episodes to work with, the set doesn't divide evenly into three
        parts. As a result, when we tell the array to slice itself into 3-element
        arrays, it also generates a fourth one-element array with the remainder.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">eps = [7, 11,
        17, 20, 24, 27, 35, 42, 45, 46]\r\n\r\nslice_count = 3\r\nslice_size  = eps.size
        / slice_count <span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        3</span>\r\n\r\nslices = eps.each_slice(slice_size).to_a\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [[7, 11, 17], [20, 24, 27], [35,
        42, 45], [46]]</span>\r\n\r\npicks = slices.map { |s|\r\n  s.sample(1)                   <span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [7], [20], [45], [46]</span>\r\n}.flatten\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [7, 20, 45, 46]</span>\r\n</pre>\r\n</div>\r\n<p>We
        decide to introduce a special case for this eventuality. If the actual number
        of slices is greater than the intended slice count, we will do a bit of extra
        processing. First, we'll find the slice that <em>should</em> have been the
        final one. Next, we'll remove the leftover slice using pop, and assign that
        removed slice to a variable. The <code>#pop</code> method, if you're not familiar
        with it, removes the last item in an array and returns the element it popped
        off.</p>\r\n<p>Then we'll concatenate the leftovers onto the slice before
        it.</p>\r\n<p>The result is a set of 3 bins, as originally intended, where
        the fourth bin has one extra element. We can sample these bins as before,
        and get the expected number of final picks.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\"><span class=\"org-keyword\">if</span> slices.size &gt;
        slice_count\r\n  end_slice = slices[slice_count - 1] <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [35, 42, 45]</span>\r\n  leftover
        \ = slices.pop              <span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">=&gt; [46]</span>\r\n  end_slice.concat(leftover)          <span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [35, 42, 45, 46]</span>\r\n<span class=\"org-keyword\">end</span>\r\n\r\nslices\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [[7, 11, 17], [20, 24, 27], [35, 42, 45, 46]]</span>\r\n\r\npicks = slices.map
        { |s|\r\n  s.sample(1)                   <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [17], [20], [45]</span>\r\n}.flatten\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [17, 20, 45]</span>\r\n</pre>\r\n</div>\r\n<p>This works well, but we hate
        to introduce a conditional into this algorithm. Conditionals make code harder
        to reason about, because now in addition to thinking about what each line
        of code is doing, we also need to think about whether a line of code is being
        executed at all.</p>\r\n<p>Let's see if we can get rid of this conditional
        while still handling all cases. We'll do this progressively, moving more and
        more code out of the conditional until hopefully we can do away with it entirely.</p>\r\n<p>First
        off, we don't technically need the line which finds the ending slice to be
        inside the <code>if</code> block. We move that line out.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">end_slice = slices[slice_count - 1] <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [35, 42, 45]</span>\r\n<span class=\"org-keyword\">if</span>
        slices.size &gt; slice_count\r\n  leftover  = slices.pop              <span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [46]</span>\r\n  end_slice.concat(leftover)          <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [35, 42, 45, 46]</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n</pre>\r\n</div>\r\n<p>For the next move,
        we need to understand a bit more about how <code>#pop</code> works. If we
        just send it with no arguments, it returns the last element. Or nil, if there
        are no elements.</p>\r\n<p>But if we supply an integer argument, <code>#pop</code>
        snips off and returns an <em>array</em> of that many elements. 1 gets us an
        array of one, 3 gets an array of 3, and so on. If we supply an argument of
        zero, we get an empty array back&mdash;/not/ a <code>nil</code> value.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">a = [1, 2, 3,
        4, 5, 6, 7, 8, 9, 10]\r\na.pop                           <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; 10</span>\r\na                               <span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\r\n\r\n[].pop                          <span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        nil</span>\r\n\r\na.pop(1)                        <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [9]</span>\r\na.pop(3)                        <span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [6, 7, 8]</span>\r\na.pop(0)                        <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; []</span>\r\n</pre>\r\n</div>\r\n<p>With
        this knowledge in mind, we move on to the next step. We initialize a <code>leftover_count</code>
        variable to zero. Inside the <code>if</code> statement we reset it to 1. Then
        we use the leftover count as an argument to pop, and flatten the resulting
        array.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">leftover_count
        = 0\r\n<span class=\"org-keyword\">if</span> slices.size &gt; slice_count\r\n
        \ leftover_count = 1\r\n  leftover  = slices.pop(leftover_count).flatten <span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [46]</span>\r\n  end_slice.concat(leftover)          <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [35, 42, 45, 46]</span>\r\n<span
        class=\"org-keyword\">end</span>\r\n</pre>\r\n</div>\r\n<p>At this point,
        we no longer need the pop and concat actions to be inside the conditional
        block. If there are no leftovers, the leftover count will be zero and the
        pop will return an empty array and leave the source array untouched. And of
        course concatenating an empty array to another array is a harmless no-op,
        so it's safe to execute the concat in either situation.</p>\r\n<p>Accordingly,
        we move those two lines out of the conditional.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">leftover_count = 0\r\n<span class=\"org-keyword\">if</span>
        slices.size &gt; slice_count\r\n  leftover_count = 1\r\n<span class=\"org-keyword\">end</span>\r\nleftover
        \ = slices.pop(leftover_count).flatten <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [46]</span>\r\nend_slice.concat(leftover)
        \         <span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [35, 42, 45, 46]</span>\r\n</pre>\r\n</div>\r\n<p>At this point, all the <code>if</code>
        statement is doing is deciding whether to set a variable to 1 or 0. We can
        simplify this using the ternary operator.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">leftover_count = slices.size &gt; slice_count ? 1 :
        0\r\nleftover  = slices.pop(leftover_count).flatten <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [46]</span>\r\nend_slice.concat(leftover)
        \         <span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [35, 42, 45, 46]</span>\r\n</pre>\r\n</div>\r\n<p>We've now reduced the conditional
        to a single line, but can we get rid of it completely? Well, remember what
        we need to do here. The result should be one if the slice size is one <em>greater</em>
        than the intended slice count, and it should be zero if the two are equal.
        When we phrase the problem this way, it rings a bell in the arithmetic centers
        of our brains: we can get the result we need by just subtracting the intended
        slice count from the actual size of the slices array.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">eps = [7, 11, 17, 20, 24, 27, 35, 42, 45, 46]\r\n\r\nslice_count
        = 3\r\nslice_size  = eps.size / slice_count <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; 3</span>\r\n\r\nslices = eps.each_slice(slice_size).to_a\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [[7, 11, 17], [20, 24, 27], [35, 42, 45], [46]]</span>\r\n\r\nend_slice =
        slices[slice_count - 1] <span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">=&gt; [35, 42, 45]</span>\r\nleftover_count = slices.size
        - slice_count     <span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        1</span>\r\nleftover = slices.pop(leftover_count).flatten <span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [46]</span>\r\nend_slice.concat(leftover)
        \         <span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [35, 42, 45, 46]</span>\r\n\r\nslices\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [[7, 11, 17], [20, 24, 27], [35,
        42, 45, 46]]</span>\r\n\r\npicks = slices.map { |s|\r\n  s.sample(1)                   <span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">=&gt;
        [17], [24], [46]</span>\r\n}.flatten\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">=&gt; [17, 24, 46]</span>\r\n</pre>\r\n</div>\r\n<p>When
        there's a leftover slice, the leftover count will be 1 and the leftovers will
        be moved into the last full bin. If we switch the desired slice count to one
        that evenly divides the list, the leftover count is zero and the concatenation
        has no effect.</p>\r\n<p>At this point, we have achieved our goal: we've found
        a way to divide a set of videos into equal or nearly equal sized bins, even
        when the division results in a leftover element. And we've done it without
        any conditionals at all. Along the way, we've seen that the <code>#pop</code>
        method has more to it than just removing and returning single values. Happy
        hacking!</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38890\">252-pop.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38891\">252-pop.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38892\">252-pop.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-794736e856c3fd342cfd2d67abf2560dcdde9488</guid>\n
        \     <pubDate>Mon, 03 Nov 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/38892/252-pop.mp4\" length=\"108493473\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>In today's episode, we'll eliminate
        a conditional by passing an argument to the Array#pop method</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[251 Email Template]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=620</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p><em>Hey
        folks! I'm experimenting with putting the script in the episode body this
        time. Not sure how this will work out with RSS readers, etc. Let me know what
        you think!</em></p>\r\n<p>We cover a lot of slightly obscure features of Ruby
        and its libraries on this show. Some of these capabilities may seem like they
        only have very niche use cases. Today, I want to show an example of how, by
        putting together a bunch of little bits of Ruby knowledge, we can solve a
        pragmatic application programming problem.</p>\r\n<p>Let's say we are working
        on the latest and greatest social networking site. We're at the point where
        we want to start inviting beta users into the site, and so we need to send
        some emails out. We decide to separate emailing into its own gateway class.
        In this class we have a method called =#send<sub>invitation</sub><sub>email</sub>.
        It takes a recipient address and some other data as parameters.</p>\r\n<div
        class=\"org-src-container\">\r\n<pre class=\"src src-ruby\"><span class=\"org-keyword\">class</span>
        <span class=\"org-type\">EmailGateway</span>\r\n  <span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">send_invitation_email</span>(<span class=\"org-constant\">to</span>:,
        **data)\r\n    subject = <span class=\"org-string\">\"Invitation to join Squawker\"</span>\r\n
        \   body = <span class=\"org-string\">\"Hi,</span><span class=\"org-variable-name\">
        #{data[:name]}</span><span class=\"org-string\">!\\n\"</span> +\r\n      <span
        class=\"org-string\">\"You're invited to join Squawker! To get started, go
        there: \\n\"</span> +\r\n      data[<span class=\"org-constant\">:signup_url</span>]\r\n
        \   send_mail(<span class=\"org-constant\">to</span>: to, <span class=\"org-constant\">subject</span>:
        subject, <span class=\"org-constant\">body</span>: body)\r\n  <span class=\"org-keyword\">end</span>\r\n\r\n
        \ <span class=\"org-keyword\">private</span>\r\n\r\n  <span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">send_mail</span>(<span class=\"org-constant\">to</span>:,
        subject:, <span class=\"org-constant\">body</span>:)\r\n    puts <span class=\"org-string\">\"***
        Sending mail to:</span><span class=\"org-variable-name\"> #{to}</span><span
        class=\"org-string\">\"</span>\r\n    puts <span class=\"org-string\">\"Subject:</span><span
        class=\"org-variable-name\"> #{subject}</span><span class=\"org-string\">\"</span>\r\n
        \   puts\r\n    puts body\r\n  <span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-keyword\">end</span>\r\n</pre>\r\n</div>\r\n<p>To invite a new
        member, we can instantiate a gateway object and send it the <code>#send_invitation_email</code>
        message, along with all the requisite extra data used to fill in the email
        template.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src src-ruby\">require
        <span class=\"org-string\">\"./email_gateway\"</span>\r\n\r\ngw = <span class=\"org-type\">EmailGateway</span>.new\r\n\r\ngw.send_invitation_email(<span
        class=\"org-constant\">to</span>: <span class=\"org-string\">\"marvin@example.org\"</span>,\r\n
        \                        <span class=\"org-constant\">name</span>: <span class=\"org-string\">\"Marvin
        the Robot\"</span>,\r\n                         <span class=\"org-constant\">signup_url</span>:
        <span class=\"org-string\">\"http://example.com/signup\"</span>)\r\n\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        *** Sending mail to: marvin@example.org</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Subject: Invitation to join Squawker</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Hi, Marvin the Robot!</span>\r\n<span class=\"org-comment-delimiter\"># </span><span
        class=\"org-comment\">&gt;&gt; You're invited to join Squawker! To get started,
        go there:</span>\r\n<span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        http://example.com/signup</span>\r\n</pre>\r\n</div>\r\n<p>With beta invitations
        working, we realize we now need to send out welcome messages as well. In adding
        another type of mailing, we realize we don't want to duplicate the ugly string-concatenation
        approach of our first method. We also feel like we should probably generalize
        our mail-sending system a bit.</p>\r\n<p>But up till now this has been a very
        lightweight app. It's built on Sinatra rather than Rails, and we don't have
        an industrial-strength mailer framework all set up and ready to go.</p>\r\n<p>As
        we think through the requirements of a generalized mail-sending subsystem,
        based on what we know about existing frameworks such as ActionMailer, we start
        to get discouraged. If we're going to be writing many more email bodies, we
        don't want to embed them as strings&hellip; we'll probably want to write them
        in their own template files&hellip; so we'll have to write some code to find
        the right template file for a given mailing&hellip; and then we'll need a
        way to personalize each template, so we'll need to hook in a templating system
        like ERB or mustache&hellip;</p>\r\n<p>Hang on, hang on. Let's take a step
        back for a moment. We're still only talking about two different email templates.
        And we're not worried about sending both HTML and text versions of the emails
        or anything else fancy like that. So let's see if we can use what we know
        about Ruby and come up with a pragmatic solution. Something that makes it
        a little more pleasant to write new types of mailing, without overthinking
        things too much.</p>\r\n<p>Here's what we come up with. First off, we bring
        in our <code>unindent</code> method from episode #249. Then we write a new
        method, <code>#send_welcome_email</code>. Like the other mailing method, it
        requires a <code>to</code> keyword, and can accept an arbitrary set of other
        data attributes.</p>\r\n<p>We start it similarly to the last method, by defining
        a subject. Then we define a body. This is where we diverge from the other
        mailer method. Instead of a quoted string, we start a heredoc, filtered by
        our unindent method to get rid of unwanted leading spaces. Then we apply the
        format operator to the unindented heredoc. Let's complete the heredoc before
        we talk about the format operator and its other argument.</p>\r\n<p>Inside
        the heredoc, we define the text of the message. Since the whole doc will be
        unindented, we are free to indent the body consistent with our usual coding
        style. Anywhere in the body where we need a personalized value, we enclose
        its name in curly braces preceded by a percent sign. The personalizable elements
        in this message are the recipient's name, and a URL for the site homepage.</p>\r\n<p>Once
        we have the subject and body defined, we use the private <code>send_mail</code>
        method just as in the other mailer method.</p>\r\n<p>Now that we are done
        defining the method body, let's talk a bit more about how the personalization
        will work. As you may recall from episode #194, Ruby strings have a format
        operator, the percent sign. This operator performs <code>printf</code>-style
        expansions in the string, using the supplied arguments. When we pass a hash
        instead of an array to the format operator, Ruby treats the hash as a source
        of values for <em>named</em> expansion keys. Everywhere the text contains
        a curly-braced word preceded by a percent sign, the format process looks up
        that word in the given hash of data and replaces the whole specifier with
        the value it finds there.</p>\r\n<p>The upshot is that string formats give
        us a quick and dirty way to implement templated text without resorting to
        templating engines.</p>\r\n<div class=\"org-src-container\">\r\n<pre class=\"src
        src-ruby\"><span class=\"org-keyword\">class</span> <span class=\"org-type\">EmailGateway</span>\r\n
        \ <span class=\"org-keyword\">def</span> <span class=\"org-function-name\">unindent</span>(s)\r\n
        \   s.gsub(<span class=\"org-string\">/^#{s.scan(/</span>^[ \\t]+(?=\\<span
        class=\"org-type\">S</span>)/).min}/, <span class=\"org-string\">\"\"</span>)\r\n
        \ <span class=\"org-keyword\">end</span>\r\n\r\n  <span class=\"org-keyword\">def</span>
        <span class=\"org-function-name\">send_invitation_email</span>(<span class=\"org-constant\">to</span>:,
        **data)\r\n    subject = <span class=\"org-string\">\"Invitation to join Squawker\"</span>\r\n
        \   body = <span class=\"org-string\">\"Hi,</span><span class=\"org-variable-name\">
        #{data[:name]}</span><span class=\"org-string\">!\\n\"</span> +\r\n      <span
        class=\"org-string\">\"You're invited to join Squawker! To get started, go
        there: \\n\"</span> +\r\n      data[<span class=\"org-constant\">:signup_url</span>]\r\n
        \   send_mail(<span class=\"org-constant\">to</span>: to, <span class=\"org-constant\">subject</span>:
        subject, <span class=\"org-constant\">body</span>: body)\r\n  <span class=\"org-keyword\">end</span>\r\n\r\n
        \ <span class=\"org-keyword\">def</span> <span class=\"org-function-name\">send_welcome_email</span>(<span
        class=\"org-constant\">to</span>:, **data)\r\n    subject = <span class=\"org-string\">\"Welcome
        to Squawker!\"</span>\r\n    body    = unindent(&lt;&lt;-<span class=\"org-string\">'EOF'</span>)
        % data\r\n<span class=\"org-string\"> Hi %{name}! Welcome to Squawker!</span>\r\n\r\n<span
        class=\"org-string\"> Your account is all set up and ready to go! Access it
        anytime</span>\r\n<span class=\"org-string\"> at: %{home_url}</span>\r\n<span
        class=\"org-string\"> EOF</span>\r\n\r\n    send_mail(<span class=\"org-constant\">to</span>:
        to, <span class=\"org-constant\">subject</span>: subject, <span class=\"org-constant\">body</span>:
        body)\r\n  <span class=\"org-keyword\">end</span>\r\n\r\n  <span class=\"org-keyword\">private</span>\r\n\r\n
        \ <span class=\"org-keyword\">def</span> <span class=\"org-function-name\">send_mail</span>(<span
        class=\"org-constant\">to</span>:, subject:, <span class=\"org-constant\">body</span>:)\r\n
        \   puts <span class=\"org-string\">\"*** Sending mail to:</span><span class=\"org-variable-name\">
        #{to}</span><span class=\"org-string\">\"</span>\r\n    puts <span class=\"org-string\">\"Subject:</span><span
        class=\"org-variable-name\"> #{subject}</span><span class=\"org-string\">\"</span>\r\n
        \   puts\r\n    puts body\r\n  <span class=\"org-keyword\">end</span>\r\n\r\n<span
        class=\"org-keyword\">end</span>\r\n</pre>\r\n</div>\r\n<p>Let's give our
        new mailer method a try. We supply a recipient email address, a name, and
        a home URL. When we look at the output, we can see that everything has been
        filled in where it should be.</p>\r\n<div class=\"org-src-container\">\r\n<pre
        class=\"src src-ruby\">gw = <span class=\"org-type\">EmailGateway</span>.new\r\ngw.send_welcome_email(<span
        class=\"org-constant\">to</span>: <span class=\"org-string\">\"crow@example.org\"</span>,\r\n
        \                     <span class=\"org-constant\">name</span>: <span class=\"org-string\">\"Crow
        T. Robot\"</span>,\r\n                      <span class=\"org-constant\">home_url</span>:
        <span class=\"org-string\">\"http://example.com\"</span>)\r\n\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; *** Sending mail to: crow@example.org</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Subject: Welcome to Squawker!</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt;</span>\r\n<span class=\"org-comment-delimiter\">#
        </span><span class=\"org-comment\">&gt;&gt; Hi Crow T. Robot! Welcome to Squawker!</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        Your account is all set up and ready to go! Access it anytime</span>\r\n<span
        class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">&gt;&gt;
        at: http://example.com</span>\r\n</pre>\r\n</div>\r\n<p>As it turns out, we
        haven't really generalized our mail gateway at all. What we've done is come
        up with a new convention for writing mailer methods that lets us avoid ugly
        and typo-prone string quoting and concatenation. It also allows us to insert
        personalized values into the templates by name, in a way that is decoupled
        from where the values came from.</p>\r\n<p>Once we write a few more mailer
        methods, we might feel the urge to take another pass and factor out some of
        the commonalities between our mailer methods. If we write even more mailing
        types, we may eventually look for a way to push the mail templates out into
        their own files rather than expanding this file indefinitely. But for right
        now, we've found a way forward that starts us on an incremental path to greater
        generality, without becoming overwhelmed by all the requirements of an elaborate
        mailing subsystem. Happy hacking!</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38789\">251-email-template.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38790\">251-email-template.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38791\">email_gateway.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38792\">251-email-template.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-684a63e389b5779939bcf1c3e3fefc224ed1442b</guid>\n
        \     <pubDate>Fri, 31 Oct 2014 11:49:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/38792/251-email-template.mp4\"
        length=\"103971187\" type=\"video/mp4\"/>\n      <itunes:subtitle>In today's
        episode, we put together several of the small bits of Ruby lore we've learned
        in order to build a simple and pragmatic mail templating system.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[250 Refinements]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=618</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we tackle one of Ruby's most controversial new features. Building on the example
        from episode #249, we'll look at how to extend a core class with custom methods,
        without attracting the kinds of potential bugs that \"monkey-patching\" invites.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38471\">250-refinements.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38472\">wonderland.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38473\">250-refinements.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38474\">250-refinements.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a797d664660ad955b75c1860ba7f76f61d6cd39f</guid>\n
        \     <pubDate>Mon, 27 Oct 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/38474/250-refinements.mp4\"
        length=\"103852453\" type=\"video/mp4\"/>\n      <itunes:subtitle>Lexically
        extending core classes.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[249 Unindent]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=616</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode we explore methods for unindenting text. Along the way, we'll
        learn some tricks and play some code golf.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38256\">249-unindent.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38257\">wonderland.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38258\">249-unindent.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38259\">249-unindent.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-bb27e66a17b731fb00f88ffb8a4869063fe7ea7c</guid>\n
        \     <pubDate>Fri, 24 Oct 2014 11:13:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/38259/249-unindent.mp4\"
        length=\"133546102\" type=\"video/mp4\"/>\n      <itunes:subtitle>Unindenting
        text, for fun and education.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[248 Min By]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=614</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode, we'll look at an easy way to find items in a collection with
        the lowest (or highest) of some attribute. And at how we can apply this knowledge
        to more than just arrays.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38041\">248-min-by.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38042\">248-min-by.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38043\">248-min-by.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b8cb1edcdd8456c750734f4503c2726374c6d960</guid>\n
        \     <pubDate>Mon, 20 Oct 2014 11:56:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/38041/248-min-by.mp4\" length=\"40728317\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Finding the item with the min
        (or max) of some attribute.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[247 Multiline Strings]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=612</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we'll compare a few different ways to quote large, multi-line blocks of text.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37902\">247-multiline-strings.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37903\">247-multiline-strings.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37904\">247-multiline-strings.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-6e21b25eb274c1b5f884171f9e2600a179f7ad95</guid>\n
        \     <pubDate>Thu, 16 Oct 2014 21:54:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/37904/247-multiline-strings.mp4\"
        length=\"132134794\" type=\"video/mp4\"/>\n      <itunes:subtitle>Three different
        ways of quoting multiline strings.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[246 Values At]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=609</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        dish is a quick little refactoring that demonstrates working with multiple
        values pulled from a Hash.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37709\">246-values-at.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37710\">246-values-at.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37711\">246-values-at.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-6221efb60ffdd2a0fd15ca1580e2d6939630893e</guid>\n
        \     <pubDate>Mon, 13 Oct 2014 13:01:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/37711/246-values-at.mp4\"
        length=\"37696376\" type=\"video/mp4\"/>\n      <itunes:subtitle>Fetching
        multiple values from hashes</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[245 Current Dir]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=607</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>An
        easier way to find the location of the current source file.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37528\">245-current-dir.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37529\">245-current-dir.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37530\">whereami.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37531\">expand_path.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37532\">245-current-dir.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-c8091c9b7602d3d9408a00bd350fe6418be9612f</guid>\n
        \     <pubDate>Thu, 09 Oct 2014 13:58:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/37532/245-current-dir.mp4\"
        length=\"37053948\" type=\"video/mp4\"/>\n      <itunes:subtitle>An easier
        way to find the location of the current source file.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[244 Drop While]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=605</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode, we'll compare two methods for getting to the body of an email:
        one imperative; one functional; and both idiomatic Ruby.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37380\">244-drop-while.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37381\">244-drop-while.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=37382\">244-drop-while.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-4e935fa249e7e32882df2c72cfaf05edebb5ea4f</guid>\n
        \     <pubDate>Mon, 06 Oct 2014 10:04:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/37382/244-drop-while.mp4\"
        length=\"51234273\" type=\"video/mp4\"/>\n      <itunes:subtitle>Getting functional
        with arrays</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[243 Replace Parameter with
        Option]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=603</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we take a method with a large and unweildy signature, and begin
        to pull parameters out into configurable options.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36996\">243-replace-parameter-with-option.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36997\">243-replace-parameter-with-option.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36998\">243-replace-parameter-with-option.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-2bee2df5610a4c0f66545d811b2aa17be5ac32e3</guid>\n
        \     <pubDate>Thu, 02 Oct 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/36998/243-replace-parameter-with-option.mp4\"
        length=\"153973998\" type=\"video/mp4\"/>\n      <itunes:subtitle>Paring down
        a method signature.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[242 Logical Require]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=602</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we discuss the downsides of using require_relative, and explore a more robust
        way to handle code loading within projects and libraries.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36847\">242-logical-require.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36848\">242-logical-require.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36849\">242-logical-require.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-125847689b7fb5d2d55ead2e7792432954501a74</guid>\n
        \     <pubDate>Mon, 29 Sep 2014 14:22:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/36849/242-logical-require.mp4\"
        length=\"79768349\" type=\"video/mp4\"/>\n      <itunes:subtitle>A robust
        way to load code in projects</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[241 Match]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=599</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode, we look into how to get the most out of the Regexp#match method.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36679\">241-match.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36680\">241-match.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36681\">241-match.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-1e5968bd46153517fcea5127d7d22643c9f719e2</guid>\n
        \     <pubDate>Thu, 25 Sep 2014 10:38:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/36680/241-match.mp4\" length=\"63498862\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Some tips on using the results
        of regex matches</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[240 Relative Require]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=595</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        our ongoing series on loading code brings us to the topic of loading features
        relative to the current file.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36357\">240-relative-require.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36358\">240-relative-require.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36359\">240-relative-require.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-828878a6b7b30b6b15afacd41d5d4f58edd4eb1e</guid>\n
        \     <pubDate>Mon, 22 Sep 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/36357/240-relative-require.mp4\"
        length=\"56359877\" type=\"video/mp4\"/>\n      <itunes:subtitle>Loading features
        relative to the current file</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[239 Parameter Defaults]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=594</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Think
        you know everything there is to know about parameter defaults? Think again!</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36170\">239-parameter-default.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36171\">239-parameter-default.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=36172\">239-parameter-default.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-8e936531c5c1236c473e9be77e1e4b594fd03a35</guid>\n
        \     <pubDate>Thu, 18 Sep 2014 12:08:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/36172/239-parameter-default.mp4\"
        length=\"106231394\" type=\"video/mp4\"/>\n      <itunes:subtitle>Digging
        deep into parameter default values.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[238 Gem Require]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=592</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we dig into RubyGems in order to understand how it augments Ruby's
        built-in code loading mechanisms.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35891\">238-gem-require.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35892\">238-gem-require.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35893\">238-gem-require.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-20dc4b02f618929b496d55c14452e8daa98218f9</guid>\n
        \     <pubDate>Mon, 15 Sep 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/35893/238-gem-require.mp4\"
        length=\"199492862\" type=\"video/mp4\"/>\n      <itunes:subtitle>The mechanics
        of loading gems</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[237 Require]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=591</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>As
        we continue to talk about the process of loading code in Ruby, today we look
        at how requiring features differs from loading files.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35678\">236-require.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35679\">noisy.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35680\">magic_numbers.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35681\">greet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35682\">236-require.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35683\">237-require.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-052f1de71a775483970d5db549a7862ea1bcc7e2</guid>\n
        \     <pubDate>Thu, 11 Sep 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/35683/237-require.mp4\"
        length=\"111512339\" type=\"video/mp4\"/>\n      <itunes:subtitle>From loading
        files to requiring features</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[236 Wrapped Load]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=590</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>As
        we continue our exploration of how code is loaded into Ruby processes, today
        we take a look at a technique for running an external script inline without
        polluting the current Ruby context.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35482\">cleanup2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35483\">loader2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35484\">double_load.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35485\">cleanup.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35486\">236-wrapped-load.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35487\">236-wrapped-load.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35488\">236-wrapped-load.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-21c6d2330d671d593c170af7f981aacaa5973dbe</guid>\n
        \     <pubDate>Mon, 08 Sep 2014 12:21:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/35486/236-wrapped-load.mp4\"
        length=\"46713081\" type=\"video/mp4\"/>\n      <itunes:subtitle>Running external
        scripts inline</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[235 Load]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=589</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode kicks off a little series on loading code in Ruby. To start off, we'll
        look at what it would take to recreate Ruby's logic for locating code files
        to be loaded.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35256\">235-load.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35257\">loader.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35258\">greet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35259\">235-load.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35260\">235-load.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f856cd2e9dce05c4fb5d8b7212bb6f10960c23d4</guid>\n
        \     <pubDate>Thu, 04 Sep 2014 12:44:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/35260/235-load.mp4\" length=\"46243735\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>How Ruby finds code</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[234 Warn]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=586</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we talk about how to let client coders know that something might be amiss...
        the Ruby way.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35080\">234-warn.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35081\">hello2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35082\">greet3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35083\">greet2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35084\">hello.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35085\">greet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35086\">234-warn.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=35087\">234-warn.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9b6ac7ae969d9016c5b1d578be2b485be14e812e</guid>\n
        \     <pubDate>Mon, 01 Sep 2014 19:40:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/35087/234-warn.mp4\" length=\"21484105\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Warning! Warning! Danger, Will
        Robinson!</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[233 Flip-Flop]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=584</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Continuing
        from the last episode's them of exploring the Range type, today we look at
        one of Ruby's more peculiar legacies from AWK and Perl.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34852\">233-flip-flop.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34853\">233-flip-flop.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34854\">233-flip-flop.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-d1562ea4ff93cd56d6d358f55ba282643ac60c38</guid>\n
        \     <pubDate>Thu, 28 Aug 2014 10:33:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/34854/233-flip-flop.mp4\"
        length=\"30117132\" type=\"video/mp4\"/>\n      <itunes:subtitle>Sometimes
        Ruby likes to wear flip-flops</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[232 Range]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=582</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Good
        morning diners! On today's menu, we have a deep exploration of Ruby's Range
        type. Even if you've used ranges before, you might find something new to chew
        on. Enjoy!</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34671\">232-range.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34672\">232-range.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34673\">232-range.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-88a6119aeb9eaddde7d7ea653cfe4f96e952600c</guid>\n
        \     <pubDate>Mon, 25 Aug 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/34673/232-range.mp4\" length=\"35308907\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Exploring Ruby's Range type</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[231 First]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=578</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today,
        some options for getting the first N elements from a list.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34567\">231-first.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34568\">231-first.ruby</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34569\">231-first.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a751ff97e3373d605d2772fabc426b0c0e90bd30</guid>\n
        \     <pubDate>Fri, 22 Aug 2014 11:51:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/34569/231-first.mp4\" length=\"9243556\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Fetching the first element(s)
        from a list</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[230 Black Box]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=577</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Last
        week we talked about the consequences of building an app without unit tests
        that might have forced us to deal with internal coupling. Today we look at
        the same app from a new perspective.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34347\">230-black-box.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34348\">230-black-box.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34349\">Rakefile</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34350\">230-black-box.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-65ad78f971c0fe0163d9c8d290aefb5829a0dfce</guid>\n
        \     <pubDate>Mon, 18 Aug 2014 10:37:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/34350/230-black-box.mp4\"
        length=\"36184198\" type=\"video/mp4\"/>\n      <itunes:subtitle>Extending
        software from the outside</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[229 Consequences]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=574</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode we'll meet an application written without tests, and discover
        the repercussions of that decision.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34173\">229-consequences.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34174\">229-consequences.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34175\">229-consequences.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a6bbaa7e1ab10e52fdda15c8591ae77c2ada32af</guid>\n
        \     <pubDate>Thu, 14 Aug 2014 16:56:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/34175/229-consequences.mp4\"
        length=\"69700715\" type=\"video/mp4\"/>\n      <itunes:subtitle>Exploring
        the repercussions of a test-less implementation.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[228 Reconsidering Regexen]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=572</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Regular
        expressions are one of the most powerful tools at our disposal. But sometimes
        they aren't as well suited to a job as they may first appear. In today's episode
        we look at an alternative to regexen for validating strings.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33962\">228-reconsidering-regexen.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33963\">228-reconsidering-regexen.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33964\">validators.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33965\">228-reconsidering-regexen.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ce0f8012ca0c9eefdfaa9f467ba4142a9df8e020</guid>\n
        \     <pubDate>Mon, 11 Aug 2014 10:24:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/33965/228-reconsidering-regexen.mp4\"
        length=\"34378766\" type=\"video/mp4\"/>\n      <itunes:subtitle>Sometimes
        a regex is the wrong tool for the job.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[227 Multiline Memoize]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=569</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we'll look at two different ways to memoize a complex method, and talk about
        why I prefer one over the other.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33777\">227-multiline-memoize.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33778\">227-multiline-memoize.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33779\">227-multiline-memoize.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ed6538bc87329d0567ff8f088bc38a5fa7a05663</guid>\n
        \     <pubDate>Thu, 07 Aug 2014 10:36:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/33779/227-multiline-memoize.mp4\"
        length=\"34007494\" type=\"video/mp4\"/>\n      <itunes:subtitle>Memoizing
        complex methods</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[226 Evil Monkeys]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=567</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        which I rant a bit about the dangers of \"monkey-patching\".</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33595\">226-evil-monkeys.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33596\">226-evil-monkeys.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33597\">226-evil-monkeys.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ec0f213c166adcf4b050d4b24c4bfbd66c77355a</guid>\n
        \     <pubDate>Mon, 04 Aug 2014 15:05:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/33597/226-evil-monkeys.mp4\"
        length=\"52375720\" type=\"video/mp4\"/>\n      <itunes:subtitle>In which
        I rant a bit about the dangers of \"monkey-patching\".</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[225 Unitwise]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=563</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>As
        our series on representing physical quantities draws to a close, we turn our
        attention to existing libraries, specifically the <a href=\"https://github.com/joshwlewis/unitwise\">Unitwise</a>
        gem.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33433\">225-unitwise.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33434\">225-unitwise.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33435\">quantities.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33436\">225-unitwise.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-582bae49f378b33076ecd0adf7c9fa9607143389</guid>\n
        \     <pubDate>Fri, 01 Aug 2014 15:27:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/33436/225-unitwise.mp4\"
        length=\"49338925\" type=\"video/mp4\"/>\n      <itunes:subtitle>A gem for
        representing physical quantities</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[224 Surrogate Ordering]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=562</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>It's
        often desirable compare objects to see which is \"lesser\" or \"greater\";
        but not all objects are inherently comparable. Today we'll look at a scheme
        for easily imposing an arbitrary ordering on a constrained set of value objects.&nbsp;</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33067\">224-surrogate-ordering.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33068\">card3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33069\">card2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33070\">card.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33071\">224-surrogate-ordering.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33072\">224-surrogate-ordering.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-4584a1919cb313052bc4b3fcde35c74ecb48106b</guid>\n
        \     <pubDate>Mon, 28 Jul 2014 12:16:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/33072/224-surrogate-ordering.mp4\"
        length=\"34837177\" type=\"video/mp4\"/>\n      <itunes:subtitle>Imposing
        order on objects</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[223 Equalizer]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=561</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>We
        know that Value Objects are useful; today we'll meet a gem that makes them
        easier to build.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32929\">223-equalizer.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32930\">223-equalizer.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32931\">point2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32932\">point.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32933\">223-equalizer.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-399f30be9686a392b73754a713d331466b564188</guid>\n
        \     <pubDate>Fri, 25 Jul 2014 14:06:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/32933/223-equalizer.mp4\"
        length=\"22164643\" type=\"video/mp4\"/>\n      <itunes:subtitle>A shortcut
        to value objects</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[222 String Partition]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=559</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we look at a lesser-known but handy pair of methods on Strings.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32441\">222-string-partition.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32442\">222-string-partition.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32443\">222-string-partition.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9235edf710e646a89345f49ab26a370961aef2ad</guid>\n
        \     <pubDate>Mon, 21 Jul 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/32443/222-string-partition.mp4\"
        length=\"14022533\" type=\"video/mp4\"/>\n      <itunes:subtitle>Splitting
        filenames into their component parts</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[221 Def Return Value]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=556</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Since
        Ruby 2.1, def returns a symbol. In this episode we'll take a look at why this
        matters, and how it might change the way we define methods.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32126\">221-def-return-value.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32127\">221-def-return-value.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32128\">221-def-return-value.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9399d25e9a929e263b6c04b5cb17342544b31858</guid>\n
        \     <pubDate>Thu, 17 Jul 2014 09:42:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/32128/221-def-return-value.mp4\"
        length=\"19815628\" type=\"video/mp4\"/>\n      <itunes:subtitle>Exploring
        a Ruby 2.1 feature</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[220 Type and Class]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=554</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Where
        do we draw the line between objects differntiated only by state, and objects
        differentiated by their class? That's the question we'll examine in this episode.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31950\">220-type-and-class.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31951\">quantities2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31952\">quantities.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31953\">220-type-and-class.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31954\">220-type-and-class.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-1a345fbd0ee4ff42a887aaade2e3b10e3ea1cf6f</guid>\n
        \     <pubDate>Tue, 15 Jul 2014 11:35:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/31954/220-type-and-class.mp4\"
        length=\"70983067\" type=\"video/mp4\"/>\n      <itunes:subtitle>When does
        object state warrant creating a new class?</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[219 Adamantium]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=550</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we learn about Ruby gem that makes it easier to build immutable value objects.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31639\">219-adamantium.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31640\">219-adamantium.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31641\">measurement3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31642\">measurement.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31643\">measurement2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31644\">quantities.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31645\">219-adamantium.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9a559c5cf2b5555aacc6dbceba42d15612a41c0c</guid>\n
        \     <pubDate>Thu, 10 Jul 2014 12:43:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/31645/219-adamantium.mp4\"
        length=\"47976901\" type=\"video/mp4\"/>\n      <itunes:subtitle>Making objects
        immutable</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[218 Spaceship Revisted]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=547</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        episode 205 we introduced the spaceship (&lt;=&gt;) operator, but we also
        introduced an incompatibility with how Ruby's builtin comparisons work. Today
        we'll address this oversight.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31432\">218-spaceship-revisited.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31433\">218-spaceship-revisited.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31434\">beer2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31435\">beer.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31436\">218-spaceship-revisited.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-677495622a2322c0d474e76997305ff0d3809cb6</guid>\n
        \     <pubDate>Mon, 07 Jul 2014 11:17:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/31436/218-spaceship-revisited.mp4\"
        length=\"34862145\" type=\"video/mp4\"/>\n      <itunes:subtitle>Dealing with
        disparate types</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[217 Redesign]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=545</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today,
        a story about a refactoring that went south, and turned out not to be a refactoring
        at all.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31375\">217-redesign.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31376\">217-redesign.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f92a5ae3df84fc163a0631e4364c992f1ec524c7</guid>\n
        \     <pubDate>Fri, 04 Jul 2014 10:57:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/31376/217-redesign.mp4\"
        length=\"85911536\" type=\"video/mp4\"/>\n      <itunes:subtitle>Sometimes
        a refactoring isn't</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[216 Tell, Don't Ask]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=543</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode, we explore a practical application of the famous \"tell,
        don't ask\" principle.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31226\">216-tell-dont-ask.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31227\">216-tell-dont-ask.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31228\">216-tell-dont-ask.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31229\">ratio.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31230\">conversion.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a120246fdaca97e388c125b075568f989e7b17e2</guid>\n
        \     <pubDate>Mon, 30 Jun 2014 12:42:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/31226/216-tell-dont-ask.mp4\"
        length=\"42223284\" type=\"video/mp4\"/>\n      <itunes:subtitle>Applying
        the principle to unit conversions.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[215 Grep]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=541</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we look at Ruby's grep method, and explore the idea of matching objects by
        example.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31053\">215-grep.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31054\">wildcard.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31055\">ratio.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31056\">215-grep.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31057\">215-grep.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-4a0817708787b9ba9dd92f8a987f7cf2739a9f00</guid>\n
        \     <pubDate>Thu, 26 Jun 2014 14:16:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/31056/215-grep.mp4\" length=\"50739186\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Grep: not just for the command
        line!</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[214 Conversion Ratio]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=539</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we puzzle through a design problem that threatens to result in dozens of extra
        methods.&nbsp;</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30900\">214-conversion-ratio.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30901\">214-conversion-ratio.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30902\">quantities2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30903\">quantities.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30904\">214-conversion-ratio.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-6f0e41ed57a6f89c33ff703fb76b1afa59962909</guid>\n
        \     <pubDate>Mon, 23 Jun 2014 11:52:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/30904/214-conversion-ratio.mp4\"
        length=\"44900491\" type=\"video/mp4\"/>\n      <itunes:subtitle>Representing
        relationships as objects</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[213 Conversion Protocol]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=535</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        topic is \"conversion protocols\", an extensible way to enable safe, automatic
        conversions between types.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30758\">213-conversion-protocol.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30759\">quantities5.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30760\">quantities4.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30761\">quantities3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30762\">quantities2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30763\">quantities.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30764\">213-conversion-protocol.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30765\">213-conversion-protocol.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-3b965764613cdb2097448e370d555cb62d665c08</guid>\n
        \     <pubDate>Thu, 19 Jun 2014 15:44:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/30765/213-conversion-protocol.mp4\"
        length=\"44247578\" type=\"video/mp4\"/>\n      <itunes:subtitle>Safe, automatic
        conversions between types.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[212 Self Class]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=533</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode deals with a small matter of style, one that can have an impact on
        how easy it is to refactor code.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30550\">212-self-class.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30551\">212-self-class.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30552\">quantity.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30553\">quantity4.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30554\">quantity3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30555\">quantity2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30556\">212-self-class.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-12d5d64b172f2f150ec45627a943d6544b9f24ef</guid>\n
        \     <pubDate>Mon, 16 Jun 2014 11:54:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/30556/212-self-class.mp4\"
        length=\"33757996\" type=\"video/mp4\"/>\n      <itunes:subtitle>How to refer
        to an object's own class</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[211 Protected]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=530</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>The
        distinction between \"public\" and \"private\" method visibility in Ruby is
        pretty obvious. But when should we use \"protected\" visibility? This episode
        attempts to answer that question.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30387\">211-protected.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30388\">feet4.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30389\">feet3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30390\">211-protected.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30391\">feet2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30392\">feet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30393\">211-protected.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-292facfac0946d86f0a9e837d75c4c4b5ca76c0b</guid>\n
        \     <pubDate>Fri, 13 Jun 2014 13:04:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/30393/211-protected.mp4\"
        length=\"48632321\" type=\"video/mp4\"/>\n      <itunes:subtitle>When to tag
        methods as protected</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[210 Implicit Conversion]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=528</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Have
        you ever wondered why Ruby has both #to_i and #to_int methods? Or both #to_a
        and #to_ary? In today's episode we'll answer this question, and look at how
        we can use implicit conversion methods to our advantage.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30118\">210-implicit-conversion.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30119\">210-implicit-conversion.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30120\">month2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30121\">month.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30122\">months.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30123\">feet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30124\">fortunes.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30125\">210-implicit-conversion.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-e6ee8eaed02922cdb15e28c0de62c0eb223ef5ec</guid>\n
        \     <pubDate>Mon, 09 Jun 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/30125/210-implicit-conversion.mp4\"
        length=\"70699020\" type=\"video/mp4\"/>\n      <itunes:subtitle>Ruby doesn't
        automatically convert one type to another... except when it does.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[209 Explicit Conversion]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=523</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we look at how to convert our Feet objects back to core numeric
        types. In the process, we gain the ability to use our Feet objects in format
        strings.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29933\">209-explicit-conversion.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29934\">209-explicit-conversion.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29935\">data.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29936\">feet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29937\">209-explicit-conversion.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-2bd0b7f2e8c36e4b561a26de9b6ea4178cc9c50c</guid>\n
        \     <pubDate>Thu, 05 Jun 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/29937/209-explicit-conversion.mp4\"
        length=\"40151126\" type=\"video/mp4\"/>\n      <itunes:subtitle>Converting
        from quantities to numeric types</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[208 Lenient Conversions]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=522</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>For
        core types like Float, Ruby has both conversion methods (#to_f), and conversion
        functions (Float()). When should we use one vs. the other? This episode attempts
        to answer that question.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29680\">208-lenient-conversions.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29681\">208-lenient-conversions.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29682\">data.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29683\">208-lenient-conversions.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-0985c1c62bad155b2780081aa4bc575674496756</guid>\n
        \     <pubDate>Mon, 02 Jun 2014 10:09:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/29683/208-lenient-conversions.mp4\"
        length=\"44505459\" type=\"video/mp4\"/>\n      <itunes:subtitle>When to use
        a conversion function, and when not to</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[207 Conversion Function]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=519</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we create a function for converting arbitrary values into Feet
        objects.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29348\">207-conversion-function.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29349\">207-conversion-function.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29350\">feet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29351\">report.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29352\">207-conversion-function.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f84fa6d922730877c020399cfd3605c05243345c</guid>\n
        \     <pubDate>Thu, 29 May 2014 11:59:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/29352/207-conversion-function.mp4\"
        length=\"50102395\" type=\"video/mp4\"/>\n      <itunes:subtitle>A Ruby convention
        for converting types</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[206 Coercion]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=517</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Ruby
        generally doesn't allow mixing of types without explicit conversion. So have
        you ever wondered why it's possible to multiply 2.3 (a float) by 5 (an integer)?
        In today's episode we'll discover how Ruby's implicit coercions work, and
        how to apply them to our own custom numeric-like classes.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29130\">206-coercion.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29131\">feet5.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29132\">feet4.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29133\">206-coercion.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29134\">feet2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29135\">feet3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29136\">feet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29137\">206-coercion.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-04724729e366e33899f4f4d88d32a40165574c6a</guid>\n
        \     <pubDate>Tue, 27 May 2014 10:53:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/29137/206-coercion.mp4\"
        length=\"77175220\" type=\"video/mp4\"/>\n      <itunes:subtitle>Coercing
        different kinds of numbers</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[205 Comparable]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=515</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we meet a Ruby standard module that makes it easy to make classes
        comparable and sortable.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28881\">205-comparable.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28882\">205-comparable.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28883\">feet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28884\">feet3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28885\">feet2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28886\">feet4.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28887\">205-comparable.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ef982a22766b3b1de10a2e936239d6bd57032b35</guid>\n
        \     <pubDate>Thu, 22 May 2014 13:04:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/28887/205-comparable.mp4\"
        length=\"33646846\" type=\"video/mp4\"/>\n      <itunes:subtitle>Making objects
        comparable</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[204 Hash Equality]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=512</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Building
        on the previous episode on hash tables, today we tackle the concept of hash
        equality: how Ruby decides if two objects are the same for the purpose of
        use as hash keys.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28663\">204-hash-equality.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28664\">feet3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28665\">feet2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28666\">204-hash-equality.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28667\">feet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28668\">204-hash-equality.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-0e92e74c178439bd13bf45441998886d7bcde763</guid>\n
        \     <pubDate>Mon, 19 May 2014 15:49:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/28668/204-hash-equality.mp4\"
        length=\"70858210\" type=\"video/mp4\"/>\n      <itunes:subtitle>Some objects
        are more equal than others</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[203 Hash Table]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=509</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        dish is an exploration of how Ruby is able to quickly look up keys in hashes.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28356\">203-hash-table.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28357\">203-hash-table.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=28358\">203-hash-table.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-8c7a020dab5fe4448a4b7c17c9ab1e5b95898af5</guid>\n
        \     <pubDate>Thu, 15 May 2014 11:06:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/28358/203-hash-table.mp4\"
        length=\"25024170\" type=\"video/mp4\"/>\n      <itunes:subtitle>How Ruby
        looks things up in hashes</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[202 Identity and Equality]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=507</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode deals with the concepts of identity and equality - what makes one
        object equal to another.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27948\">202-identity-and-equality.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27949\">202-identity-and-equality.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27950\">feet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27951\">feet2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27952\">202-identity-and-equality.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9514bd148dd24b862f6e78d94a22b8a95120f513</guid>\n
        \     <pubDate>Mon, 12 May 2014 11:24:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/27952/202-identity-and-equality.mp4\"
        length=\"35575318\" type=\"video/mp4\"/>\n      <itunes:subtitle>Defining
        object equality in terms of state.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[201 Immutable Object]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=505</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we learn how mutability can lead to bugs in Value Objects...
        and how we can eliminate these types of bugs once and for all.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27433\">feet5.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27434\">feet4.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27435\">feet3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27436\">feet2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27437\">201-immutable-object.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27438\">altimeter2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27439\">altimeter.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27440\">feet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27441\">201-immutable-object.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27442\">201-immutable-object.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-00689d2784375ae6ba94e6ffbdf08e3fbbbbc781</guid>\n
        \     <pubDate>Thu, 08 May 2014 11:40:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/27442/201-immutable-object.mp4\"
        length=\"44057143\" type=\"video/mp4\"/>\n      <itunes:subtitle>Mutability
        bugs, meet Mr. Freeze!</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[200 Quantity]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=504</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode we take a look at a storied problem in software: defects caused
        by accidentally mixing-up the units of measurement used in calculations. And
        we kick off a multi-part series exploring how to build objects that represent
        physical quantities.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27206\">200-quantity.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27207\">200-quantity.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27208\">200-quantity.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27209\">altimeter.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27210\">feet.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27211\">feet2.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b2dd3762c62758ab37f4c8698bbd1c55de1acc24</guid>\n
        \     <pubDate>Mon, 05 May 2014 09:37:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/27207/200-quantity.mp4\"
        length=\"87269589\" type=\"video/mp4\"/>\n      <itunes:subtitle>Representing
        physical quantities</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[199 Regexp Union]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=500</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode demonstrates an easy way to build big regular expressions out of little
        ones.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26891\">199-regexp-union.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26892\">199-regexp-union.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26893\">199-regexp-union.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-e9969577668306aff5d77075cc7b808b17a51e3f</guid>\n
        \     <pubDate>Thu, 01 May 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/26891/199-regexp-union.mp4\"
        length=\"11241778\" type=\"video/mp4\"/>\n      <itunes:subtitle>Joining regular
        expressions</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[198 Decorator Transparency]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=499</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode we look at a potential complication of using the Decorator
        pattern, and discuss how to resolve it by enforcing Command/Query Separation.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26583\">198-decorator-transparency.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26584\">withdraw_and_notify2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26585\">198-decorator-transparency.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26586\">withdraw_and_notify.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26587\">audited_account.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26588\">audit_log.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26589\">bank_account.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26590\">198-decorator-transparency.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-8826bd7a5ed32da59535dc3c29ad7165e204ba20</guid>\n
        \     <pubDate>Mon, 28 Apr 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/26590/198-decorator-transparency.mp4\"
        length=\"51607363\" type=\"video/mp4\"/>\n      <itunes:subtitle>Decorators
        and CQS</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[197 Decorator]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=496</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we explore the Decorator pattern, with the help of the SimpleDelegator standard
        library.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26297\">197-decorator.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26298\">197-decorator.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26299\">audited_account.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26300\">bank_account.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26301\">bank_account_with_auditing.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26302\">audit_log.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26303\">197-decorator.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-979bc792de1d89a37e151f0e18114f3b77142860</guid>\n
        \     <pubDate>Fri, 25 Apr 2014 13:33:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/26303/197-decorator.mp4\"
        length=\"69418585\" type=\"video/mp4\"/>\n      <itunes:subtitle>Adding new
        functionality without expanding existing classes</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[196 String Templates]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=494</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Have
        you ever wanted a way to customize the format of certain generated strings,
        but felt like ERB or some other templating language was overkill? If so, today's
        episode should satisfy!</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26076\">196-string-templates.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26077\">196-string-templates.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26078\">196-string-templates.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-c6499e49ba3da474eb2a5112caf1690497308e90</guid>\n
        \     <pubDate>Mon, 21 Apr 2014 13:41:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/26077/196-string-templates.mp4\"
        length=\"30179208\" type=\"video/mp4\"/>\n      <itunes:subtitle>When ERB
        is overkill</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[195 Advanced String Formats]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=488</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Following
        on from the last episode, today we look at some more advanced uses of Ruby's
        string formatting features.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25449\">195-advanced-string-formats.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25450\">195-advanced-string-formats.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25451\">195-advanced-string-formats.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25452\">data.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-71905d67a70117b6d22f0633ca9cbaf98fab7622</guid>\n
        \     <pubDate>Thu, 17 Apr 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/25450/195-advanced-string-formats.mp4\"
        length=\"57031025\" type=\"video/mp4\"/>\n      <itunes:subtitle>Show those
        strings who's boss.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[194 String Formats]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=487</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Sometimes
        Kernel#puts and string interpolation doesn't give us the level of control
        we want over our program's output. When we need to control numeric formatting
        and field widths, we need to understand string formats. And that's what this
        episode is all about!</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25445\">194-string-format.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25446\">194-string-format.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25447\">194-string-formats.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25448\">data.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-7c3fa3be0b91b78e2a01760cb771b6f0c7926a9b</guid>\n
        \     <pubDate>Mon, 14 Apr 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/25447/194-string-formats.mp4\"
        length=\"57274955\" type=\"video/mp4\"/>\n      <itunes:subtitle>Taking control
        of number formatting</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[193 Pathname]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=485</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>While
        the File methods are great for occasional use, for programs that deal extensively
        in filenames we need to bring out the big guns. Today we'll get an overview
        of Pathname, Ruby's swiss army knife for path manipulation.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25357\">193-pathname.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25358\">193-pathname.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25359\">193-pathname.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-4728b2992335085ec71bd524cf76868be401117f</guid>\n
        \     <pubDate>Fri, 11 Apr 2014 09:45:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/25358/193-pathname.mp4\"
        length=\"44090291\" type=\"video/mp4\"/>\n      <itunes:subtitle>Manipulating
        file paths the easy way</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[192 Filenames]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=483</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Ruby
        provides a lot of tools for breaking filenames into their component parts,
        but they aren't always well documented. Today's episode combines goes over
        some basics as well as a tip you might not be familiar with.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25006\">192-filenames.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25007\">192-filenames.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25008\">192-filenames.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ed35fe35fcf1068069be864c4650e676fdb56bd7</guid>\n
        \     <pubDate>Mon, 07 Apr 2014 17:28:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/25007/192-filenames.mp4\"
        length=\"15414927\" type=\"video/mp4\"/>\n      <itunes:subtitle>Breaking
        filenames into pieces</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[191 Virtual Proxy]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=479</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>When
        loading domain objects from an external service, it can be expensive to load
        up associated objects with them. Today's episode takes a look at a pattern
        for transparently lazy-loading such associations.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24847\">191-virtual-proxy.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24848\">191-virtual-proxy.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24849\">menu_item_mapper2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24850\">menu_item_mapper3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24851\">virtual_proxy.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24852\">virtual_proxy2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24853\">menu_item_mapper.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24854\">models.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24855\">recipe_mapper.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-8e37714153d6250b9ba8ff5a7090dfcd7a2be089</guid>\n
        \     <pubDate>Fri, 04 Apr 2014 08:55:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/24848/191-virtual-proxy.mp4\"
        length=\"75853990\" type=\"video/mp4\"/>\n      <itunes:subtitle>A scheme
        for lazy-loading associations</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[190 gsub]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=478</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we look at the humble String#gsub method, and learn that it has some surprising
        tricks up its sleeve.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24484\">190-gsub.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24485\">190-gsub.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24486\">190-gsub.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24487\">lexicon.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24488\">text.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-40b8c59b311bf7f1ed1c0cdc2a48e6123e999372</guid>\n
        \     <pubDate>Mon, 31 Mar 2014 16:13:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/24484/190-gsub.mp4\" length=\"43674506\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Defending national security with
        string substitutions</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[189-assisted-refactoring]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=473</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode, we'll examine how the availability of tools to aid refactoring
        can change how we write code.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24080\">189-assisted-refactoring.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24081\">189-assisted-refactoring.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=24082\">189-assisted-refactoring.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a9b70a25e7122dec4baede9c0acc43a39110627c</guid>\n
        \     <pubDate>Thu, 27 Mar 2014 10:10:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/24081/189-assisted-refactoring.mp4\"
        length=\"52511381\" type=\"video/mp4\"/>\n      <itunes:subtitle>Sometimes
        an IDE is useful</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[188 Fail and Raise]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=471</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode is about a semantic convention for error handling that I learned from
        Jim Weirich.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23912\">188-fail-and-raise.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23913\">188-fail-and-raise.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23914\">188-fail-and-raise.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a8e7720405b427bfc7c89f99c90afec2dc3719b1</guid>\n
        \     <pubDate>Mon, 24 Mar 2014 11:08:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/23913/188-fail-and-raise.mp4\"
        length=\"21567686\" type=\"video/mp4\"/>\n      <itunes:subtitle>Two ways
        to raise an exception</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[187 More Keyword Arguments]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=468</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we go a little deeper into keyword arguments in Ruby 2.0/2.1, covering a few
        use cases we didn't cover in the last episode.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23541\">187-more-keyword-arguments.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23542\">187-more-keyword-arguments.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23543\">187-more-keyword-arguments.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23544\">order_burger.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-fff890a31425e917c6b8f3ab8f755b44abed06ab</guid>\n
        \     <pubDate>Thu, 20 Mar 2014 12:03:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/23542/187-more-keyword-arguments.mp4\"
        length=\"40444291\" type=\"video/mp4\"/>\n      <itunes:subtitle>Advanced
        keyword arguments in Ruby 2.1</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[186 Keyword Arguments]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=466</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode is a guide to transitioning various hash argument idioms to Ruby 2.0/2.1
        keywords.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23320\">186-keyword-arguments.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23321\">186-keyword-arguments.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23322\">186-keyword-arguments.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-8991f074c7f70edf5db8a1f46ceef209f770638e</guid>\n
        \     <pubDate>Mon, 17 Mar 2014 08:50:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/23322/186-keyword-arguments.mp4\"
        length=\"44000378\" type=\"video/mp4\"/>\n      <itunes:subtitle>Descriptive
        parameters without the pain</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[185 Two Refactorings]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=463</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        dish is a refactoring approached from two different perspectives. Enjoy!</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23051\">185-two-refactorings.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23052\">185-two-refactorings.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=23053\">185-two-refactorings.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b4d063060d7012c8eebf4edf3e7d02ffae56c961</guid>\n
        \     <pubDate>Thu, 13 Mar 2014 14:57:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/23052/185-two-refactorings.mp4\"
        length=\"96515539\" type=\"video/mp4\"/>\n      <itunes:subtitle>Functional!
        OO! Fight!</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[184 Sequel, Postgres, JSON]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=458</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Recently
        we looked at the Sequel library for interacting with SQL databases. Today,
        we'll use Sequel again to play with the native JSON support in PostgreSQL
        9.3.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22667\">184-sequel-postgres-json.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22668\">184-sequel-postgres-json.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22669\">184-sequel-postgres-json.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-416c071674529a88ee41d71bd5d990d4376903a6</guid>\n
        \     <pubDate>Mon, 10 Mar 2014 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/22668/184-sequel-postgres-json.mp4\"
        length=\"84774189\" type=\"video/mp4\"/>\n      <itunes:subtitle>Working with
        JSON data in Postgres from Ruby</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[183 Extracting Ghost Load]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=457</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>We've
        used the \"ghost object\" pattern to lazily load attributes of a model object.
        And we've made a macro to easily declare \"ghost-loadable\" attribute accessors.
        Today we complete the generalization of ghost loading by extracting a module
        that makes it easy for any model object to declare lazily-loaded attributes.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22664\">183-extracting-ghost-load.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22665\">183-extracting-ghost-load.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22666\">183-extracting-ghost-load.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-d433bf30b0e973f4d6089f96e10b04818f9ac20c</guid>\n
        \     <pubDate>Thu, 06 Mar 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/22665/183-extracting-ghost-load.mp4\"
        length=\"33880463\" type=\"video/mp4\"/>\n      <itunes:subtitle>Extracting
        a reusable module</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[182 Macro]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=456</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>When
        is it appropriate to metaprogram? Today's episode looks at one situation in
        which it may be a good choice.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22541\">182-macro.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22542\">182-macro.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22543\">182-macro.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22544\">episode.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-06d32231a45e6b19233ea00fa59ac0726914c059</guid>\n
        \     <pubDate>Mon, 03 Mar 2014 09:50:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/22542/182-macro.mp4\" length=\"25643780\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Eliminating duplication with
        metaprogramming</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[181 Schwartzian Transform]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=452</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode demonstrates a technique for speeding up the process of sorting some
        collections.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22344\">181-schwartzian-transform.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22345\">181-schwartzian-transform.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22346\">181-schwartzian-transform.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-5ff1edfd51f9d7e41a990e112fc789233f2541ce</guid>\n
        \     <pubDate>Thu, 27 Feb 2014 17:38:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/22345/181-schwartzian-transform.mp4\"
        length=\"54674519\" type=\"video/mp4\"/>\n      <itunes:subtitle>Faster sorting</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[180 Ghost Load]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=451</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode we learn at how to implement lazy loading using the \"ghost
        object\" pattern.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22078\">180-ghost-load.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22079\">180-ghost-load.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22080\">episode.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22081\">episode_mapper.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=22082\">ghost_episode.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-6a41312ec3aa90024db8642528a5ea6ea7afe7ec</guid>\n
        \     <pubDate>Mon, 24 Feb 2014 10:28:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/22078/180-ghost-load.mp4\"
        length=\"49704071\" type=\"video/mp4\"/>\n      <itunes:subtitle>Who you gonna
        call?</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[179 Sequel]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=449</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>ActiveRecord
        has become practically synonymous with SQL database access in Ruby, but it's
        not the only way to talk to SQL stores. Today we'll explore Sequel, a wonderfully
        rich tool for interacting with many different SQL RDBMSes.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21888\">179-sequel.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21889\">sequel.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21890\">sequel.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-aee9e5e7347fd3e4ccf32aa63220ac275f19a5cf</guid>\n
        \     <pubDate>Thu, 20 Feb 2014 11:52:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/21888/179-sequel.mp4\" length=\"53811701\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Talking to SQL databases</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[178 Identity Map]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=447</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        the last episode we looked at the problem of \"aliasing\", here there are
        multiple objects representing a single row in a database. Today, we'll look
        at one possible solution to that problem.</p>\r\n<p>Notes:</p>\r\n<ul>\r\n<li>DataMapper:&nbsp;<a
        href=\"http://datamapper.org/\">http://datamapper.org/</a></li>\r\n<li>Ruby
        Object Mapper (ROM):&nbsp;<a href=\"http://rom-rb.org/\">http://rom-rb.org/</a></li>\r\n<li>Perpetuity:&nbsp;<a
        href=\"https://github.com/jgaskins/perpetuity\">https://github.com/jgaskins/perpetuity</a></li>\r\n</ul>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21658\">178-identity-map.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21659\">178-identity-map.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21660\">178-identity-map.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21661\">data_mappers.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21662\">models.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21663\">db.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21664\">helpers.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21665\">fixture.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-76965ebcd3cb2997b5039c670047f49c67a73e6a</guid>\n
        \     <pubDate>Mon, 17 Feb 2014 10:47:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/21660/178-identity-map.mp4\"
        length=\"46416285\" type=\"video/mp4\"/>\n      <itunes:subtitle>Putting an
        end to aliasing</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[177 Aliasing]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=443</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we look at a perncious problem that sometimes plagues code which uses an Object-Relational
        Mapper (ORM).</p>\r\n<p>Documentation of the ActiveRecord inverse_of option
        mentioned in the episode can be found <a href=\"http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html\">here:&nbsp;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21381\">177-aliasing.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21382\">helpers2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21383\">177-aliasing.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21384\">helpers.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21385\">setup.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21386\">fixture.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21387\">data_mappers.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21388\">models.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21389\">db.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21390\">177-aliasing.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-4116919baac611a5d1163a9f8b03cc514cf4ea37</guid>\n
        \     <pubDate>Thu, 13 Feb 2014 15:32:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/21390/177-aliasing.mp4\"
        length=\"80610942\" type=\"video/mp4\"/>\n      <itunes:subtitle>ORMs and
        evil clones</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[176 Dotenv]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=440</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we look at a tool that I've found invaluable for managing configuration
        in my applications.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20999\">176-dotenv.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21000\">176-dotenv.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=21001\">176-dotenv.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-6bc9f4a790c3306d35fa2a9fc322b0f038346593</guid>\n
        \     <pubDate>Mon, 10 Feb 2014 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/21000/176-dotenv.mp4\" length=\"22533926\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Config without config files</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[175 REPL-Driven Development]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=438</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode I cover a classic development technique that doesn't get enough
        press these days. Interactive, exploratory development was and is common in
        the Lisp world, and Ruby's dynamic nature is aptly suited to take advantage
        of this style of programming. Today I'll show you how I used REPL-driven development
        in Pry and Emacs to begin to build a video export tool.</p>\r\n<p>By the way,
        right after I made this episode I discovered that Conrad Irwin had done a
        RubyConf talk on REPL-driven development. You can watch it here:&nbsp;<a href=\"https://www.youtube.com/watch?v=D9j_Mf91M0I\">https://www.youtube.com/watch?v=D9j_Mf91M0I</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20800\">175-repl-driven-development_0001.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-8812065c775a4f0a41195bfd9add1e7788bb73e8</guid>\n
        \     <pubDate>Thu, 06 Feb 2014 09:43:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/20800/175-repl-driven-development_0001.mp4\"
        length=\"95361691\" type=\"video/mp4\"/>\n      <itunes:subtitle>Developing
        via exploration</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[174 Multiple Assignment]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=436</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        special is a note on style with a side order of opinion. Enjoy!</p>\r\n<p>(Note:
        I made a mistake in the visualization of which variables correspond to which
        on either side of the equals sign. Which kind of illustrates my point!)</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20581\">174-multiple-assignment.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20582\">174-multiple-assignment.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20583\">174-multiple-assignment.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-93b1e87480e2faefe3dcffa569d3215ab2281351</guid>\n
        \     <pubDate>Mon, 03 Feb 2014 10:34:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/20582/174-multiple-assignment.mp4\"
        length=\"13094452\" type=\"video/mp4\"/>\n      <itunes:subtitle>Assigning
        multiple variables on a single line</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[173 for]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=432</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Newer
        arrivals to Ruby sometimes wonder when to use #each, and when to use 'for'.
        Today, a detailed explanation of how they differ, and an opinion on when to
        use 'for'.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20279\">173-for.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20280\">173-for.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20281\">173-for.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-533be121d8008a765b296da22c21acf020a2e0ce</guid>\n
        \     <pubDate>Thu, 30 Jan 2014 10:21:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/20280/173-for.mp4\" length=\"21212268\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>What's \"for\" for anyway?</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[172 Registry]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=431</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        dish is another one from one of my favorite cookbooks: Martin Fowler's <em>Patterns
        of Enterprise Application Development</em>. This time, we'll use the Registry
        pattern to make it easy for objects to find the collaborators they need, without
        hardcoding their dependencies.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20144\">172-registry.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20145\">172-registry.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=20146\">172-registry.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-cf5805ade621122e559d12c5bdf4f4d1a46ad0f7</guid>\n
        \     <pubDate>Mon, 27 Jan 2014 09:53:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/20145/172-registry.mp4\"
        length=\"85278653\" type=\"video/mp4\"/>\n      <itunes:subtitle>Simplifying
        collaborator discovery</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[171 puts]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=427</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Even
        the most basic of Ruby methods sometimes have hidden depth. Today we'll take
        a look at some advanced uses of the <span style=\"font-family: 'courier new',
        courier;\">puts</span> method.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19937\">171-puts.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19938\">171-puts.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19939\">171-puts.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-e825ff5acf4dd4c3183c58dfe5a83883ce96e49c</guid>\n
        \     <pubDate>Thu, 23 Jan 2014 11:50:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/19938/171-puts.mp4\" length=\"22357375\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Think you know about puts? Think
        again!</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[170 Hash Merge]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=426</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode covers an incredibly handy capability of Ruby's hashes that I didn't
        know about until recently.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19630\">170-hash-merge.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19631\">170-hash-merge.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19632\">170-hash-merge.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-e3291c6d0fbdb20fa5faa591999d50482ddf02aa</guid>\n
        \     <pubDate>Mon, 20 Jan 2014 10:10:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/19631/170-hash-merge.mp4\"
        length=\"22009860\" type=\"video/mp4\"/>\n      <itunes:subtitle>Putting hashes
        together</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[169 Caching Proxy]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=423</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>You
        might remember the Gateway and Mapper patterns from recent episodes. Today
        we'll look at how to insert a caching layer between those two patterns. In
        the process, we'll examine how pattern-based design decisions can make it
        easy to add new functionality without changing existing classes.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19406\">169-caching-proxy.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19407\">169-caching-proxy.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19408\">169-caching-proxy.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-c8bd83b3faa63fca9d6c0eaadc87432d9eb29e2c</guid>\n
        \     <pubDate>Thu, 16 Jan 2014 09:18:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/19407/169-caching-proxy.mp4\"
        length=\"46562435\" type=\"video/mp4\"/>\n      <itunes:subtitle>Cleanly inserting
        a caching layer</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[168 Enumerable Internals]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=421</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this very special episode, guest chef Pat Shaughnessy takes us on a whirlwind
        tour of the Ruby internals that make the Enumerable#all? method tick.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19249\">all.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19250\">script.txt</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19279\">168-enumerable-internals.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-05632265ab13651e07282412fe9d755af61673fb</guid>\n
        \     <pubDate>Mon, 13 Jan 2014 10:19:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/19279/168-enumerable-internals.mp4\"
        length=\"46213864\" type=\"video/mp4\"/>\n      <itunes:subtitle>With guest
        chef Pat Shaughnessy!</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[167 Debugging in Gems]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=419</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>When
        debugging a tricky problem, don't you sometimes wish you could just drop a
        line of debugging code right in the middle of a third-party gem? This episode
        shows how to do this in a responsible fashion.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19104\">167-debugging-in-gems.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19105\">167-debugging-in-gems.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=19106\">167-debugging-in-gems.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9b4f03a52a16fd3e29c1c48c3e6ea4d16036a8ef</guid>\n
        \     <pubDate>Thu, 09 Jan 2014 10:07:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/19105/167-debugging-in-gems.mp4\"
        length=\"115614013\" type=\"video/mp4\"/>\n      <itunes:subtitle>A heretical
        but effective technique</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[166 Not Implemented]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=416</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Ruby
        doesn't have a built-in concept of \"abstract\" classes, but sometimes we
        want a way to show other programmers when methods are left as an exercise
        for the implementor. This episode discusses how.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18975\">166-not-implemented.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18976\">166-not-implemented.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18977\">logical_condition.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18978\">logical_condition2.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-bc9d5d94391daa889375efd308212c18726c2e16</guid>\n
        \     <pubDate>Mon, 06 Jan 2014 09:14:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/18976/166-not-implemented.mp4\"
        length=\"22229287\" type=\"video/mp4\"/>\n      <itunes:subtitle>Writing placeholder
        methods</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[165 Refactor Tapas::Queue]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=415</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        previous episodes, we got the Tapas::Queue class under test, using a couple
        of different thread-testing techniques. Now that it has tests, it's time to
        refactor.</p>\r\n<p>The steps of this refactoring can be seen on this Github
        branch:&nbsp;<a href=\"https://github.com/avdi/tapas-queue/commits/refactor-conditions\">https://github.com/avdi/tapas-queue/commits/refactor-conditions</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18735\">165-refactor-tapas-queue.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18736\">165-refactor-tapas-queue.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b0698a7c42a196075f5293a66a4989b23ad42c7b</guid>\n
        \     <pubDate>Thu, 02 Jan 2014 09:21:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/18736/165-refactor-tapas-queue.mp4\"
        length=\"105288643\" type=\"video/mp4\"/>\n      <itunes:subtitle>Extracting
        common functionality, one step at a time</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[164 Mapper]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=412</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we explore a pattern for bridging the gap between different domain models.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18612\">164-mapper.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18613\">164-mapper.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18614\">164-mapper.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-5231c8eb0a06d6e2bcecdda9e64c9c91958fcfb6</guid>\n
        \     <pubDate>Mon, 30 Dec 2013 09:11:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/18614/164-mapper.mp4\" length=\"47261518\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Bridging the gap between domain
        models</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[163 YAML::Store]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=410</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we follow up on the last episode to talk about YAML::Store. It's like PStore,
        only with YAML!</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18370\">163-yaml-store.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18371\">163-yaml-store.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18372\">benchmark.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18373\">lister2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18374\">lister.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18375\">163-yaml-store.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-3540e07b098dded9f1f1ab87dbf56d3692ed51a7</guid>\n
        \     <pubDate>Thu, 26 Dec 2013 10:34:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/18375/163-yaml-store.mp4\"
        length=\"21931322\" type=\"video/mp4\"/>\n      <itunes:subtitle>A more readable
        alternative to PStore</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[162 PStore]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=408</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode we take a look at PStore, a simple but capable persistence
        mechanism that ships with Ruby.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18259\">162-pstore.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18260\">162-pstore.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18261\">write_read.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18262\">seed.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18263\">lister.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18264\">write_read.sh</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18265\">162-pstore.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-4df23d874139ddfcaedd38a7c8db0b73d9d1da32</guid>\n
        \     <pubDate>Mon, 23 Dec 2013 09:45:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/18265/162-pstore.mp4\" length=\"51386770\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>A simple storage solution</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[161 Thread Local Variable]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=406</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode introduces the concept of thread-local variables, and shows how they
        can be put to use in an ActiveRecord-like library.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18026\">161-thread-local-variable.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18027\">161-thread-local-variable.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=18028\">161-thread-local-variable.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-d011048df1e76b2bc69b5656f3bc8acac99a6639</guid>\n
        \     <pubDate>Thu, 19 Dec 2013 09:13:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/18027/161-thread-local-variable.mp4\"
        length=\"59007820\" type=\"video/mp4\"/>\n      <itunes:subtitle>Scoping variables
        to the current stack</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[160 Reduce Redux]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=403</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we revisit the Enumerable#reduce method, addressing some viewer feedback about
        seed values as well as exploring a novel application of reduce for traversing
        data structures.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17805\">160-reduce-redux.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17806\">160-reduce-redux.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17807\">160-reduce-redux.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-54749680a9c91fefffb7307d6436c676f1e7aa51</guid>\n
        \     <pubDate>Mon, 16 Dec 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/17806/160-reduce-redux.mp4\"
        length=\"28278996\" type=\"video/mp4\"/>\n      <itunes:subtitle>More about
        Enumerable#reduce</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[159 Array Set Operations]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=400</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Sometimes
        we'd like to treat Ruby arrays like sets, in which each item is unique. Today's
        dish shows how!</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17532\">159-array-set-operations.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17533\">159-array-set-operations.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17534\">159-array-set-operations.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-5d772653bde85e1c4a2e94ba5c430a76ac0fa4c3</guid>\n
        \     <pubDate>Thu, 12 Dec 2013 10:47:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/17533/159-array-set-operations.mp4\"
        length=\"28302524\" type=\"video/mp4\"/>\n      <itunes:subtitle>Treating
        arrays like sets</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[158 Constant Lookup Scope]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=397</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        episode takes a look at some potentially surprising rules for how Ruby looks
        up constants.</p>\r\n<p>Notes:</p>\r\n<ul>\r\n<li>\"<a href=\"http://cirw.in/blog/constant-lookup.html\">Everything
        you ever wanted to know about constant lookup in Ruby</a>\", by Conrad Irwin</li>\r\n</ul>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17341\">158-constant-lookup-scope.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17343\">metric.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17344\">metric2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17345\">metric3.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17346\">planets.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17375\">158-constant-lookup-scope.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-1a150f6b47f3529945a37e63b946d7a88df70c75</guid>\n
        \     <pubDate>Mon, 09 Dec 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/17375/158-constant-lookup-scope.mp4\"
        length=\"32663992\" type=\"video/mp4\"/>\n      <itunes:subtitle>How Ruby
        looks up constants</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[157 Lockstep Testing]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=393</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we'll explore a novel technique for testing multithreaded code.</p>\r\n<p>The
        lockstep library can be found here:&nbsp;<a href=\"https://github.com/avdi/lockstep\">https://github.com/avdi/lockstep</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17030\">157-lockstep-testing.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17031\">157-lockstep-testing.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17032\">157-lockstep-testing.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f6bd001316a691b1b2a9f1bf86c04073cde512f5</guid>\n
        \     <pubDate>Thu, 05 Dec 2013 11:09:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/17031/157-lockstep-testing.mp4\"
        length=\"98662013\" type=\"video/mp4\"/>\n      <itunes:subtitle>Testing threaded
        code without threads</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[156 Array.new]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=391</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today,
        special guest chef James Edward Gray II hosts, and shows us a thing or two
        about generating arrays pre-filled with values!</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=16379\">156-array-new.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9b2cf32a2ab987e5de30c6b7aecb2a02c29b9c48</guid>\n
        \     <pubDate>Mon, 02 Dec 2013 09:50:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/16379/156-array-new.mp4\"
        length=\"71091524\" type=\"video/mp4\"/>\n      <itunes:subtitle>With guest
        host James Edward Gray II</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[155 Matching Triples]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=388</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode delves into some advanced regular expression features, including \"lookahead\"
        and \"lookbehind\".</p>\r\n<p>Notes for further exploration:</p>\r\n<ul>\r\n<li>The
        book <a href=\"http://pragprog.com/book/ruby4/programming-ruby-1-9-2-0\">\"Programming
        Ruby 1.9 and 2.0\"</a></li>\r\n<li><a href=\"/plan/editpost/rubular.com\">rubular.com</a></li>\r\n<li><a
        href=\"http://confreaks.com/presenters/721-nell-shamrell\">Talks from Nell
        Shamrell</a>. There are also <a href=\"http://www.slideshare.net/NellShamrell/presentations\">slides</a>.</li>\r\n<li>Nell's
        blog <a href=\"https://www.bluebox.net/insight/blog-article/using-regular-expressions-in-ruby-part-1-of-3\">series
        on regular expressions in Ruby</a></li>\r\n</ul>\r\n<p>(Clip from \"<a href=\"http://confreaks.com/videos/2610-lonestarruby2013-beneath-the-surface-regular-expressions-in-ruby\">Beneath
        the Surface: Regular Expressions in Ruby</a>\", <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\">CC</a>
        by <a href=\"http://twitter.com/@nellshamrell\">Nell Shamrell</a>.&nbsp;Recorded
        by <a href=\"http://confreaks.com/\">Confreaks</a> at Lone Star Ruby Conference
        2013)</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=16171\">155-matching-triples.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=16172\">155-matching-triples.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=16173\">155-matching-triples.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-5f4166f631e3133b6a7fed9a8ac045a787d06173</guid>\n
        \     <pubDate>Thu, 28 Nov 2013 09:46:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/16172/155-matching-triples.mp4\"
        length=\"60368783\" type=\"video/mp4\"/>\n      <itunes:subtitle>An episode
        on advanced regular expressions</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[154 Testing Threads]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=386</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Working
        with threads is hard enough, but getting them under test is even trickier.
        In this episode we start to look at techniques for verifying the logic of
        multithreaded code.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=16023\">154-testing-threads.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=16024\">154-testing-threads.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=16025\">154-testing-threads.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-d8d28b21a0dd9fa9d7f1235ef49bd9516ccdb641</guid>\n
        \     <pubDate>Mon, 25 Nov 2013 09:29:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/16024/154-testing-threads.mp4\"
        length=\"53762300\" type=\"video/mp4\"/>\n      <itunes:subtitle>Unit testing
        threaded code</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[153 Testing Sleep]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=383</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>We
        try to avoid writing slow unit tests, but what if we are testing a method
        whose responsibilities include waiting for a period of time? In this episode
        we look at a few approaches, talk about the difference between testing logic
        and testing system interactions, and finally settle on a strategy that leads
        us to a more flexible design.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=15828\">153-testing-sleep.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=15829\">153-testing-sleep.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=15830\">153-testing-sleep.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-77d49fc0580d2bb2630cbe2210d0001d86da5570</guid>\n
        \     <pubDate>Thu, 21 Nov 2013 10:24:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/15829/153-testing-sleep.mp4\"
        length=\"53920415\" type=\"video/mp4\"/>\n      <itunes:subtitle>How to test
        a method that sleeps</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[152 Progress Bar]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=378</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we look at a gem that can make command-line scripts more pleasant to use.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=15636\">test-sleep-progress.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17377\">152-progress-bar.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=17378\">152-progress-bar.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b48ee87e17ae635452b48037331278a41e8bfe3f</guid>\n
        \     <pubDate>Mon, 18 Nov 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/17378/152-progress-bar.mp4\"
        length=\"27083322\" type=\"video/mp4\"/>\n      <itunes:subtitle>Displaying
        visual progress for command-line scripts</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[151 Sleep]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=375</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode tackles a subject I've always wondered about: how accurate is <code>Kernel#sleep</code>?</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=15172\">151-sleep.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=15173\">151-sleep.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=15174\">test-sleep.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-be4001143ef3181f539c1874ab0be46ba66a2896</guid>\n
        \     <pubDate>Thu, 14 Nov 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/15173/151-sleep.mp4\" length=\"56432098\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>To sleep(), perchance to dream</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[150 Stats]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=374</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Sooner
        or later you'll need to generate statistics from a collection. In this episode,
        we look at how to produce min, max, sum, average, median, and standard deviation
        from a set of samples.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=15130\">150-stats.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=15131\">150-stats.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=15132\">150-stats.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9ca19b9d8d748f4e4bd3797c284c15a2f7869bd4</guid>\n
        \     <pubDate>Mon, 11 Nov 2013 18:29:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/15131/150-stats.mp4\" length=\"23832288\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Deriving essential statistics
        in Ruby</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[149 Sum]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=371</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode takes on a simple task--summing up a list of numbers--and uses it
        to demonstrate both the <code>Enumerable#reduce</code> method as well as <code>Symbol#to_proc</code>.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=14893\">149-sum.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=14894\">149-sum.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=14895\">149-sum.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-0b353dd124bcc104e4d27214e68f53b0588b9e71</guid>\n
        \     <pubDate>Thu, 07 Nov 2013 15:49:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/14894/149-sum.mp4\" length=\"22560417\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>How to idiomatically sum up a
        list of numbers</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[148 Rake Invoke]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=368</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        episode looks at how to invoke Rake tasks from other programs.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=14699\">148-rake-invoke.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=14700\">148-rake-invoke.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=14701\">hello.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=14702\">Rakefile</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=14703\">Rakefile2</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-3f1a8f4eea86234fa3e0b58c1db0f9ec89e511ab</guid>\n
        \     <pubDate>Mon, 04 Nov 2013 00:29:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/14700/148-rake-invoke.mp4\"
        length=\"15830205\" type=\"video/mp4\"/>\n      <itunes:subtitle>Invoking
        Rake tasks from other programs</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[147 Atomicity]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=355</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        is another threading episode. This time around, we tackle the subject of \"atomicity\",
        and learn about the false assumption at the root of many threading bugs.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5343\">147-atomicity.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5344\">147-atomicity.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5345\">147-atomicity.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f8aec54a254df14453e4dbf38891640a88708f16</guid>\n
        \     <pubDate>Thu, 31 Oct 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/5344/147-atomicity.mp4\"
        length=\"31045519\" type=\"video/mp4\"/>\n      <itunes:subtitle>More fun
        with threads.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[146 Monitor]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=354</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we learn about the concept of a \"recursive mutex\" as we help a turtle-racing
        league update their software systems.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5340\">146-monitor.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5341\">146-monitor.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5342\">146-monitor.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-378bc343078034810d85b76f50fe2945302be58a</guid>\n
        \     <pubDate>Mon, 28 Oct 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/5341/146-monitor.mp4\" length=\"27516769\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>It's mutexes all the way down.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[145 Thread Pool]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=353</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Continuing
        with the general theme of threads and concurrency, today we look at another
        pattern for splitting up work in parallel.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5337\">145-thread-pool.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5338\">145-thread-pool.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5339\">145-thread-pool.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-4fa1f9cabb34858f0c7f895269af4e31cd61c994</guid>\n
        \     <pubDate>Thu, 24 Oct 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/5337/145-thread-pool.mp4\"
        length=\"34799718\" type=\"video/mp4\"/>\n      <itunes:subtitle>Accelerating
        work with threads and work queues.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[144 Bulk Generation]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=352</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we take some already-good code and make it even better.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5334\">144-bulk-generation.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5335\">144-bulk-generation.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5336\">144-bulk-generation.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-902579d3b227c9a603e8cd6388ac4ea403d48996</guid>\n
        \     <pubDate>Mon, 21 Oct 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/5335/144-bulk-generation.mp4\"
        length=\"12179887\" type=\"video/mp4\"/>\n      <itunes:subtitle>Refactoring
        from good to great.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[143 Thread Interruptions]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=351</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we finally discover why the Timeout module is unsafe, and a facility
        new in Ruby 2.0 that makes dealing with thread interruptions much less error-prone.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5315\">143-thread-interruptions.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5316\">143-thread-interruptions.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5317\">143-thread-interruptions.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9c155830e2908afa5e9b94b9bcaba7d8fdcaa4ca</guid>\n
        \     <pubDate>Thu, 17 Oct 2013 19:14:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/5316/143-thread-interruptions.mp4\"
        length=\"56227828\" type=\"video/mp4\"/>\n      <itunes:subtitle>Safely interrupting
        thread execution</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[142 Infinity]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=349</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode, we'll simplify our thread-safe queue code by employing a
        \"benign value\" to represent the default max queue size.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5081\">142-infinity.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5082\">infinity.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=5083\">142-infinity.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-983b7a40211a2f047595d1287824ff9ec136ae17</guid>\n
        \     <pubDate>Mon, 14 Oct 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/5083/142-infinity.mp4\"
        length=\"9153000\" type=\"video/mp4\"/>\n      <itunes:subtitle>Using Ruby's
        INFINITY constant.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[141 Bounded Queue]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=346</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>We
        continue to evolve our thread-safe queue implementation. Today, we add the
        ability to set a bound on the queue size.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=4931\">141-bounded-queue.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=4932\">refactor.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=4933\">bounded_queue.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=4934\">141-bounded-queue.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-60a9c260289709fb279c17c11aaa154a638d9038</guid>\n
        \     <pubDate>Thu, 10 Oct 2013 10:14:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/4934/141-bounded-queue.mp4\"
        length=\"31056900\" type=\"video/mp4\"/>\n      <itunes:subtitle>We continue
        to evolve our thread-safe queue implementation. Today, we add the ability
        to set a bound on the queue size.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[140 Threads are Hard]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=337</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode some bugs turn up in our thread-safe queue class.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2893\">140-threads-are-hard.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2894\">force_bug.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2895\">fixed.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2896\">fixed2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2897\">break_on_timeout.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2898\">140-threads-are-hard.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-e25279959b422373b41db2a4aeb766689c8dd8af</guid>\n
        \     <pubDate>Mon, 07 Oct 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/2893/140-threads-are-hard.mp4\"
        length=\"50246358\" type=\"video/mp4\"/>\n      <itunes:subtitle>Fixing some
        threading bugs</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[139 Timed Queue]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=336</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Continuing
        to build our own thread-safe queue class, today we give it the ability to
        handle time out enqueues and dequeues.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2886\">139-timed-queue.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2887\">break_on_timeout.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2888\">cv.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2889\">timed_queue.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2890\">shutdown.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2891\">timeout_policy.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=2892\">139-timed-queue.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-0137c0aa7e0a6b55c93f438b747487cbff463de2</guid>\n
        \     <pubDate>Thu, 03 Oct 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/2886/139-timed-queue.mp4\"
        length=\"40072011\" type=\"video/mp4\"/>\n      <itunes:subtitle>Making a
        thread-safe queue that can time out</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[138 Condition Variable]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=297</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>As
        we continue to explore the fundamental building blocks of multithreaded programming,
        today we encounter the Condition Variable, and what it has to do with my local
        delicatessen.&nbsp;</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1645\">138-condition-variable.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1646\">138-condition-variable.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1647\">condition_variable.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-98290194a4645b1edf4f716473f4226fc845c7e5</guid>\n
        \     <pubDate>Mon, 30 Sep 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1646/138-condition-variable.mp4\"
        length=\"27269176\" type=\"video/mp4\"/>\n      <itunes:subtitle>Guarding
        scarce resources in a multithreaded program</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[137 Mutex]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=296</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we introduce the concept of a \"critical section\", and learn
        about one of the fundamental primitives that makes multithreaded programming
        possible.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1640\">137-mutex.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1641\">137-mutex.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1642\">critical.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1643\">mutex.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1644\">naive_queue.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-21996b4c010e526ed3d7f3957d86a38772e9ea13</guid>\n
        \     <pubDate>Thu, 26 Sep 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1641/137-mutex.mp4\" length=\"29159878\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Keeping threads exclusive</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[136 Dead Thread]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=295</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Concurrent
        programming is hard, and one of the things that makes it so hard is that a
        thread can unexpectedly die without giving the programmer any indication.
        In this episode we look at some ways to make threads fail fast and loudly
        while in development.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1629\">136-dead-thread.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1630\">136-dead-thread.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1631\">threads.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1632\">threads_debug.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1633\">threads_fixed.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1634\">threads_no_deadlock.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1635\">threads_raise_on_error.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1636\">threads_really_fixed.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1637\">threads_sized.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1638\">threads_timeout.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-21bfd7498b22a74536946be33751e8a849b468b3</guid>\n
        \     <pubDate>Mon, 23 Sep 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1630/136-dead-thread.mp4\"
        length=\"43007805\" type=\"video/mp4\"/>\n      <itunes:subtitle>Dead threads
        tell no tales</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[135 Rake MultiTask]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=294</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this, the final (for now) episode of the Rake miniseries, we take a look at
        how to speed up Rake runs by taking advantage of multiple cores.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1626\">135-rake-multitask.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1627\">135-rake-multitask.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1628\">Rakefile</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-195820dd766a18de2c21d007e8ca5217c3e874dd</guid>\n
        \     <pubDate>Thu, 19 Sep 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1627/135-rake-multitask.mp4\"
        length=\"39189059\" type=\"video/mp4\"/>\n      <itunes:subtitle>Building
        more than one file at a time</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[134 Rake Clean]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=291</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>My
        children know they are supposed to clean their place at the table after dinner.
        Sometimes software builds need to be cleaned up too, and today we'll learn
        about an optional Rake library which streamlines this process.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1619\">134-rake-clean.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1620\">134-rake-clean.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1621\">Rakefile</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-1ac5d64a7ea686b228752e2db339fe2921855f89</guid>\n
        \     <pubDate>Mon, 16 Sep 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1620/134-rake-clean.mp4\"
        length=\"34009130\" type=\"video/mp4\"/>\n      <itunes:subtitle>Cleaning
        up after ourselves</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[133 Rake File Operations]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=290</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Rake
        has a lot of tricks up its sleeve. In this episode we'll look at some of the
        helpers it provides for performing various common operations on files.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1616\">133-rake-file-operations.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1617\">133-rake-file-operations.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1618\">Rakefile</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a9ef808ea0d8f783b2bc0f80d6fcdf8d58197b2f</guid>\n
        \     <pubDate>Thu, 12 Sep 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1617/133-rake-file-operations.mp4\"
        length=\"28239432\" type=\"video/mp4\"/>\n      <itunes:subtitle>Making, moving,
        and removing files</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[132 Rake Pathmap]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=289</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        dish is a real delicacy... we're going to dig into one of Rake's most powerful
        but little-known capabilities and see how we can easily transform collections
        of path names with the #pathmap method.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1613\">132-rake-pathmap.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1614\">132-rake-pathmap.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1615\">132-rake-pathmap.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-8d6ff9aba4c189bf15c0883ffeadef6d99171448</guid>\n
        \     <pubDate>Mon, 09 Sep 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1614/132-rake-pathmap.mp4\"
        length=\"34346323\" type=\"video/mp4\"/>\n      <itunes:subtitle>Munging path
        names</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[131 Rake Rules]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=288</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we learn how to write advanced Rake rules which programatically
        determine the appropriate prerequisites for a given target file.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1609\">131-rake-rules.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1610\">131-rake-rules.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1611\">131-rake-rules.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1612\">Rakefile</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-c81106d0809290345842d512bef38df3bbf30307</guid>\n
        \     <pubDate>Thu, 05 Sep 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1610/131-rake-rules.mp4\"
        length=\"47403174\" type=\"video/mp4\"/>\n      <itunes:subtitle>Using advanced
        Rake rules</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[130 Rake File Lists]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=287</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>As
        we continue our series on Rake, today we look at the Rake::FileList and how
        it can help us find the files we need and ignore the ones we don't.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1602\">130-rake-file-lists.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1603\">130-rake-file-lists.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1604\">130-rake-file-lists.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1605\">Rakefile</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-52119538a9dfa09f14cf08be57c49c7dbb83ff66</guid>\n
        \     <pubDate>Mon, 02 Sep 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1603/130-rake-file-lists.mp4\"
        length=\"22921458\" type=\"video/mp4\"/>\n      <itunes:subtitle>Building
        lists of files in Rake</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[129 Rake]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=286</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we begin a series on the Rake build tool. We'll be getting into some powerful,
        lesser-known features as we continue on; but we'll start out with a quick
        review of Rake basics.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1574\">129-rake.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1575\">129-rake.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1576\">build.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1577\">Rakefile</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1578\">Rakefile2</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1579\">Rakefile3</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1580\">Rakefile4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f074d908690511c21a699a038946548ba2040411</guid>\n
        \     <pubDate>Thu, 29 Aug 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1575/129-rake.mp4\" length=\"25085949\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Automating builds with Rake</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[128 Enumerable Queue]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=283</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Queue,
        somewhat surprisingly, is not enumerable. Which is all the excuse we need
        to have some more fun with the Enumerator class, in today's episode.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1485\">128-enumerable-queue.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1486\">128-enumerable-queue.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1487\">128-enumerable-queue.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a162c36f26499c58d955ea0e5181379b2fafe96f</guid>\n
        \     <pubDate>Mon, 26 Aug 2013 14:14:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1486/128-enumerable-queue.mp4\"
        length=\"12068133\" type=\"video/mp4\"/>\n      <itunes:subtitle>More fun
        with Enumerators</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[127 Parallel Fib]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=279</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Last
        time around we introduced the Queue class. In this episode, we'll put it to
        work!</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1402\">127-parallel-fib.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1403\">127-parallel-fib.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1404\">fib.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-fb3d46a18c7dbcbc56732ea447a44d40b38a60b5</guid>\n
        \     <pubDate>Thu, 22 Aug 2013 13:48:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1402/127-parallel-fib.mp4\"
        length=\"59976683\" type=\"video/mp4\"/>\n      <itunes:subtitle>Putting Queue
        to work</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[126 Queue]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=274</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode introduces the Queue standard library, and shows how it can be used
        to coordinate threads.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1345\">126-queue.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1346\">126-queue.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1347\">126-queue.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-5da61d3a82ecb44c42ee79ee92b2573d3b4bf0f4</guid>\n
        \     <pubDate>Mon, 19 Aug 2013 12:17:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1346/126-queue.mp4\" length=\"18430312\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Introducing the Queue stdlib</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[125 And/Or]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=270</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Ruby
        has both symbolic and English forms of the logical \"and\" and \"or\" operators.
        Which one to choose may seem like a matter of taste, but that assumption can
        get you into trouble.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1262\">125-and-or.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1263\">125-and-or.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1264\">125-and-or.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b196a0f7db86e64b806c330773725e6286bbcbc0</guid>\n
        \     <pubDate>Thu, 15 Aug 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1263/125-and-or.mp4\" length=\"28839923\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Understanding Ruby's logical
        operators.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[124 Elixir]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=269</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we take a brief sojourn out of Ruby and into the Elixir programming language.
        I'll show you one of my first programs in Elixir and point out how the language's
        pattern-matching abilities can contribute to some very elegant solutions.</p>\r\n<p>If
        this episode piques your interest in Elixir, here are some resources you can
        explore to find out more:</p>\r\n<p>&nbsp;</p>\r\n<ul>\r\n<li>The Elixir home
        page:&nbsp;<a href=\"http://elixir-lang.org/\">http://elixir-lang.org/</a></li>\r\n<li>Meet
        Elixir, an excellent screencast from Peepcode:&nbsp;<a href=\"https://peepcode.com/products/elixir\">https://peepcode.com/products/elixir</a></li>\r\n<li>Programming
        Elixir, a book in beta by Dave Thomas:&nbsp;<a href=\"http://pragprog.com/book/elixir/programming-elixir\">http://pragprog.com/book/elixir/programming-elixir</a></li>\r\n</ul>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1212\">124-elixir.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1213\">124-elixir.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b3722db3bee261d21615fa30ab86582ab0cbec9d</guid>\n
        \     <pubDate>Mon, 12 Aug 2013 10:33:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1212/124-elixir.mp4\" length=\"30565031\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>A little diversion into the Elixir
        language</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[123 Removing Debug Output]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=267</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Have
        you ever had a project that spat out so much deubg output when it ran that
        you couldn't tell when it had a legitimate error or warning to report? In
        today's episode I'll show you how to quickly and easily track down the source
        of unwanted output.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1139\">123-removing-debug-output.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1140\">123-removing-debug-output.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1141\">123-removing-debug-output.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b0940cf027731b48f1d87ffce81d7e8305a3edf2</guid>\n
        \     <pubDate>Thu, 08 Aug 2013 12:42:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1140/123-removing-debug-output.mp4\"
        length=\"26490951\" type=\"video/mp4\"/>\n      <itunes:subtitle>Cleaning
        up chatty code</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[122 Testing Blocks with RSpec]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=266</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Last
        episode we looked at a simple way to test if a method executes a block as
        intended that will work in any test framework. But if your tool of choice
        is RSpec, there are some matchers that make these kinds of tests shorter and
        more declarative.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1096\">122-testing-blocks-with-rspec.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1097\">122-testing-blocks-with-rspec.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1098\">122-testing-blocks-with-rspec.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-8095a859c01f2ffb64c65c2afbb4db5c79da384c</guid>\n
        \     <pubDate>Mon, 05 Aug 2013 19:03:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1097/122-testing-blocks-with-rspec.mp4\"
        length=\"36179609\" type=\"video/mp4\"/>\n      <itunes:subtitle>Test that
        a method calls a block with RSpec matchers</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[121 Testing Blocks]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=263</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode answers the question: how do you test that a block passed to a method
        is executed as intended?</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1050\">121-testing-blocks.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1051\">121-testing-blocks.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=1052\">121-testing-blocks.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-023a62e1e05486c411319d31a65584982ef2fbf7</guid>\n
        \     <pubDate>Thu, 01 Aug 2013 16:28:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/1051/121-testing-blocks.mp4\"
        length=\"27249355\" type=\"video/mp4\"/>\n      <itunes:subtitle>Testing that
        a block is called</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[120 Outside-In]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=258</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode I tackle the question of how many tests are enough. I'll show
        how for me, it's all about how long it's been since I last got new information
        from a test.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=946\">120-outside-in.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=947\">hostconfig</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=948\">hostconfig_spec.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-2388a51e93b0d526bf95d182aeac114ab948a66e</guid>\n
        \     <pubDate>Mon, 29 Jul 2013 11:05:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/946/120-outside-in.mp4\"
        length=\"66297868\" type=\"video/mp4\"/>\n      <itunes:subtitle>How many
        tests are enough?</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[119 Intention Revealing Argument]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=257</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode, we examine the pros and cons of a few of techniques for making
        boolean flags passed to methods read more meaningully.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=729\">119-intent-revealing-argument.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=730\">119-intent-revealing-argument.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=731\">119-intent-revealing-argument.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a1d3de228a3a52700640f46f7b0fb3dffcf26e51</guid>\n
        \     <pubDate>Thu, 25 Jul 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/730/119-intent-revealing-argument.mp4\"
        length=\"12565963\" type=\"video/mp4\"/>\n      <itunes:subtitle>Making boolean
        flags more readable</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[118 Even and Odd]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=256</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>A
        small dish today, about some numeric methods I often forget exist.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=725\">118-even-and-odd.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=726\">118-even-and-odd.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=727\">118-even-and-odd.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b25afd6d5232a963a1c9d170a5b5054cde28fc08</guid>\n
        \     <pubDate>Mon, 22 Jul 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/726/118-even-and-odd.mp4\"
        length=\"6737776\" type=\"video/mp4\"/>\n      <itunes:subtitle>Making full
        use of Ruby's numeric interfaces</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[117 Client Session Object]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=255</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        another peek into my ongoing behind-the-scenes work on RubyTapas, today I
        extract the responsibility for representing a logged-in screen-scraping user-agent
        session into its own class.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=722\">117-client-session-object.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=723\">117-client-session-object.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=724\">117-client-session-object.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-bd0d9a5836f76506297539220dbcede9441fdc68</guid>\n
        \     <pubDate>Thu, 18 Jul 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/723/117-client-session-object.mp4\"
        length=\"61699634\" type=\"video/mp4\"/>\n      <itunes:subtitle>Extracting
        the responsibility for managing a client session</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[116 Extract Command Object]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=252</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's live-recorded episode I show one of the most fundamental refactorings
        for breaking up a large class into smaller classes.</p>\r\n<p>Since this is
        a live episode there is no transcript today. The Naught codebase can be found
        at <a href=\"http://github.com/avdi/naught\">http://github.com/avdi/naught</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=652\">116-extract-command-object.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-cd8c9fa90354a3fb8a820c8817af7b3fedd62be4</guid>\n
        \     <pubDate>Mon, 15 Jul 2013 10:09:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/652/116-extract-command-object.mp4\"
        length=\"151068348\" type=\"video/mp4\"/>\n      <itunes:subtitle>Introducing
        a fundamental refactoring</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[115 pp]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=249</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this quick live episode I demonstrate a standard library that improves on
        Kernel#p</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=570\">115-pp.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ed1f8444e7324ddd7f5fcb1b82670314fc4c228e</guid>\n
        \     <pubDate>Thu, 11 Jul 2013 17:28:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/570/115-pp.mp4\" length=\"29055935\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>An improvement on p</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[114 Null Object]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=248</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode, we encounter a starship in trouble, and a software pattern
        that helps cleanly disable whole categories of behavior.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=556\">114-null-object.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=557\">114-null-object.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=558\">114-null-object.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-517ebdcd900aef1fb627b510e268b5b0766312ba</guid>\n
        \     <pubDate>Mon, 08 Jul 2013 09:12:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/557/114-null-object.mp4\"
        length=\"21934985\" type=\"video/mp4\"/>\n      <itunes:subtitle>Something
        for nothing</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[113 p]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=247</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>We
        all use 'puts' for debugging at some point. This episode shows why 'p' is
        a better choice.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=551\">113-p.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=554\">113-p.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=555\">113-p.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-393a580ee3eb22b9d293d03f6063c40ddc6a78b3</guid>\n
        \     <pubDate>Thu, 04 Jul 2013 10:58:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/551/113-p.mp4\" length=\"15485469\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Better debugging with p</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[112 Special Case]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=246</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we take a look at the Special Case pattern, and see how it can
        be used to drastically simplify some typical logic around logged-in and anonymous
        users.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=536\">112-special-case.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=537\">112-special-case.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=538\">112-special-case.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-73e7ec16a6fd36fa485025da0689ddd53853a372</guid>\n
        \     <pubDate>Mon, 01 Jul 2013 10:50:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/537/112-special-case.mp4\"
        length=\"30727322\" type=\"video/mp4\"/>\n      <itunes:subtitle>A pattern
        to help you avoid null checks</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[111 Symbol Placeholder]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=245</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Nobody
        wants to debug an \"undefined method for NilClass\" error. Today's episode
        shows a little trick for making these errors more meaningful.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=533\">111-symbol-placeholder.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=534\">111-symbol-placeholder.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=535\">111-symbol-placeholder.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-c7017f8a590d23c446057fba4982c2de327df590</guid>\n
        \     <pubDate>Thu, 27 Jun 2013 09:53:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/534/111-symbol-placeholder.mp4\"
        length=\"23390496\" type=\"video/mp4\"/>\n      <itunes:subtitle>A cheap way
        to improve on nil</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[110 Catch and Throw]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=243</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>A
        refactoring episode, showing how to replace exceptions-as-flow-control with
        the \"catch\" and \"throw\" methods.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=530\">110-catch-and-throw.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=531\">110-catch-and-throw.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=532\">110-catch-and-throw.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-896112d014236d1a7fea685c5ef56b257ae01a01</guid>\n
        \     <pubDate>Mon, 24 Jun 2013 10:53:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/531/110-catch-and-throw.mp4\"
        length=\"39367234\" type=\"video/mp4\"/>\n      <itunes:subtitle>Cleanly signaling
        early termination.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[109 SAX]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=242</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        episode takes a look at how to use the Nokogiri gem to extract data from large
        HTML documents without reading the whole document into memory.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=527\">109-sax.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=528\">109-sax.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=529\">109-sax.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9f861cc2f61b720cdf347ad66980f9f3a46d5b90</guid>\n
        \     <pubDate>Thu, 20 Jun 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/528/109-sax.mp4\" length=\"47337365\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Efficient XML/HTML processing
        in Ruby</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[108 The Trouble with nil]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=241</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        episode explores some of the many ways we can come across a nil value, and
        why that's a problem.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=520\">108-the-trouble-with-nil.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=521\">108-the-trouble-with-nil.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=522\">108-the-trouble-with-nil.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-14d94c350aef7d4289733c8e465946aadbacdad4</guid>\n
        \     <pubDate>Mon, 17 Jun 2013 09:10:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/521/108-the-trouble-with-nil.mp4\"
        length=\"23247082\" type=\"video/mp4\"/>\n      <itunes:subtitle>nil is nobody's
        friend</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[107 String Subscript Assignment]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=240</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode: super-powered string-munging with regexes and the square-bracket
        operator.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=517\">107-string-subscript-assignment.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=518\">107-string-subscript-assignment.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=519\">107-string-subscript-assignment.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-682990fcd3ae769be185826bf839d0a949013a91</guid>\n
        \     <pubDate>Thu, 13 Jun 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/518/107-string-subscript-assignment.mp4\"
        length=\"8956560\" type=\"video/mp4\"/>\n      <itunes:subtitle>Flipping the
        \"more awesome\" switch on strings.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[106 Class Accessors]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=239</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today,
        some thoughts on writing class-level attribute accessors.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=509\">106-class-accessors.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=510\">106-class-accessors.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=511\">106-class-accessors.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-395add83752da27b9b57117498ca86776bd59788</guid>\n
        \     <pubDate>Mon, 10 Jun 2013 12:01:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/510/106-class-accessors.mp4\"
        length=\"9357703\" type=\"video/mp4\"/>\n      <itunes:subtitle>Some thoughts
        on writing class-level attribute accessors</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[105 Checking for a Terminal]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=238</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we'll mimic the behavior of command-line tools like Git that
        automatically page their output if they detect that they are being run from
        a terminal.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=503\">105-tty.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=504\">105-tty.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=505\">105-tty.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f611f249d4e6be60ac8cd798d2142f6fc8588345</guid>\n
        \     <pubDate>Thu, 06 Jun 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/504/105-tty.mp4\" length=\"18498644\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>How to tell if a program is being
        executed at the console</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[104 Parsing Time]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=237</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>It
        would be great if time were always represented in readable, un-ambiguous ISO8601
        formats. But &nbsp;when importing legacy data we don't often have that luxury.
        In this episode, we look at some tools for parsing various time and date representations.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=499\">104-parsing-time.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=501\">104-parsing-time.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=502\">104-parsing-time.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a4ae297ee9ef49a95a894641904a35a9d03ad886</guid>\n
        \     <pubDate>Mon, 03 Jun 2013 10:13:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/502/104-parsing-time.mp4\"
        length=\"25318593\" type=\"video/mp4\"/>\n      <itunes:subtitle>Parsing time
        formats, simple and not-so-simple</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[103 Gem-Love Part 11]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=234</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Finishing
        up my list of TODO items, today I address some structural coupling that my
        test stubs have revealed.</p>\r\n<p>This is a live episode, so no script today.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=497\">103-gem-love-11.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-50012ca14dc68dfdf487252cb75b8fc2e6303d0a</guid>\n
        \     <pubDate>Thu, 30 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/497/103-gem-love-11.mp4\"
        length=\"59107091\" type=\"video/mp4\"/>\n      <itunes:subtitle>Addressing
        structural coupling in the Endorsement class</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[102 Gem-Love Part 10]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=233</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p><em><strong>Note:</strong>&nbsp;This
        week RubyTapas moves to its new release schedule of two episodes a week. I've
        already sent out an update detailing the reason for the change, but for those
        who have disabled email updates, I've also added a note to the FAQ here:&nbsp;<a
        href=\"http://www.rubytapas.com/faq#frequency-change\">http://www.rubytapas.com/faq#frequency-change</a></em></p>\r\n<p>Working
        through my TODO list from the recent feature additions, in today's episode
        I seek to resolve the semantic conflict between User and GemUser through refactoring.</p>\r\n<p>This
        is a live episode, so no script today.</p>\r\n<p>Code here:&nbsp;<a href=\"https://github.com/avdi/gem-love/tree/rubytapas-episode-102\">https://github.com/avdi/gem-love/tree/rubytapas-episode-102</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=496\">102-gem-love-10.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-8584e25f46fe0b72784fd41f145a9708dea4c972</guid>\n
        \     <pubDate>Mon, 27 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/496/102-gem-love-10.mp4\"
        length=\"33289731\" type=\"video/mp4\"/>\n      <itunes:subtitle>Refactoring
        the GemUser class</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[101 Intention Revealing Message]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=211</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Not
        all refactoring is about eliminating duplication. In today's episode we'll
        refactor some code for the purpose of revealing intent to future readers.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=483\">101-intention-revealing-message.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=484\">101-intention-revealing-message.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=485\">101-intention-revealing-message.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-3dcf247d389eef3f58afbfc0dc451f0f9129885f</guid>\n
        \     <pubDate>Fri, 24 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/484/101-intention-revealing-message.mp4\"
        length=\"32482300\" type=\"video/mp4\"/>\n      <itunes:subtitle>Refactoring
        for readability</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[100 Screen-Scraping Gateway]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=210</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode tackles the problem of talking to a web app which has no published
        API, using the Mechanize screen-scraping gem. In the process, we'll explore
        the Gateway pattern for encapsulating external resources.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=478\">100-screen-scraping-gateway.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=479\">100-screen-scraping-gateway.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=480\">100-screen-scraping-gateway.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=481\">content_post_gateway_spec.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=482\">content_post_gateway.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-d46bdd017dbe03ce0d94dda4ed0a99722c37f50a</guid>\n
        \     <pubDate>Wed, 22 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/479/100-screen-scraping-gateway.mp4\"
        length=\"78059142\" type=\"video/mp4\"/>\n      <itunes:subtitle>Encapsulating
        external resources</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[099 String Subscript Regex]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=208</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        the focus is on a convenient way to extract substrings using regular expressions.
        We glossed over this technique briefly in an earlier episode, but now it's
        front and center.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=474\">099-string-subscript-regex.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=475\">099-string-subscript-regex.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=476\">099-string-subscript-regex.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f08ee5119333a8be5294e58156b7b14964b0435a</guid>\n
        \     <pubDate>Mon, 20 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/475/099-string-subscript-regex.mp4\"
        length=\"4661081\" type=\"video/mp4\"/>\n      <itunes:subtitle>Extracting
        substrings with regular expressions</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[098 Gem-Love Part 9]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=205</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's concluding slice of this live-coding session, I wrap up my work on
        adding users to Gem-Love by TDDing the server side support for API keys.</p>\r\n<p>This
        is a live episode, so no script today.</p>\r\n<p>Source:&nbsp;<a href=\"https://github.com/avdi/gem-love/tree/rubytapas-095\">https://github.com/avdi/gem-love/tree/rubytapas-095</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=472\">098-gem-love-9.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-68c25db3852e31f2b7e40869a46e939900b5cf91</guid>\n
        \     <pubDate>Fri, 17 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/472/098-gem-love-9.mp4\"
        length=\"75231696\" type=\"video/mp4\"/>\n      <itunes:subtitle>Server-side
        auth token support</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[097 Gem-Love 8]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=204</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>As
        I continue to add the concepts of users to Gem-Love, I tackle the problem
        of making the client side auth-token aware.</p>\r\n<p>This is a live episode,
        so there is no script today.</p>\r\n<p>Source:&nbsp;<a href=\"https://github.com/avdi/gem-love/tree/rubytapas-095\">https://github.com/avdi/gem-love/tree/rubytapas-095</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=471\">097-gem-love-8.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a88b288195ec73b9aa84997023ec2f64bcc13588</guid>\n
        \     <pubDate>Wed, 15 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/471/097-gem-love-8.mp4\"
        length=\"57372224\" type=\"video/mp4\"/>\n      <itunes:subtitle>Building
        client-side support for auth tokens</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[096 Gem-Love 7]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=203</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this continuation of episode 95, I finish writing new acceptance test helpers,
        and get to my first proper test failure.</p>\r\n<p>This is a live episode,
        so no script today.</p>\r\n<p>Source here:&nbsp;<a href=\"https://github.com/avdi/gem-love/tree/rubytapas-095\">https://github.com/avdi/gem-love/tree/rubytapas-095</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=470\">096-gem-love-7.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-3c6b48a8155a94d70564e33e8de165048eb6f4e0</guid>\n
        \     <pubDate>Mon, 13 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/470/096-gem-love-7.mp4\"
        length=\"42353960\" type=\"video/mp4\"/>\n      <itunes:subtitle>More acceptance
        test helpers</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[095 Gem-Love Part 6]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=198</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Diving
        back into my Gem-Love project, today I begin the process of adding users to
        the system. Because this is a larger feature, it will be split across multiple
        episodes. However, since they are all parts of the same programming session,
        I'll be running them back-to-back to preserve continuity.</p>\r\n<p>This episode
        was cut from a live recording, so there is no script available.</p>\r\n<p>The
        code can be found here:&nbsp;<a href=\"https://github.com/avdi/gem-love/tree/rubytapas-095\">https://github.com/avdi/gem-love/tree/rubytapas-095</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=506\">095-gem-love-6.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-fe4eb328f1e517162477045804b70aaa79c35d95</guid>\n
        \     <pubDate>Fri, 10 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/506/095-gem-love-6.mp4\"
        length=\"56705910\" type=\"video/mp4\"/>\n      <itunes:subtitle>Adding users
        to a client/server app</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[094 Bang Bang]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=197</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Have
        you ever found yourself looking for a '#to_bool' method in Ruby? This episode
        explores why boolean conversion isn't needed as often as you might think;
        as well as how to accomplish it when it IS called for.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=463\">094-bang-bang.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=464\">094-bang-bang.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=465\">094-bang-bang.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-73d319c58040c5b0120ea48183dd1a22d453e5c9</guid>\n
        \     <pubDate>Wed, 08 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/464/094-bang-bang.mp4\"
        length=\"32704689\" type=\"video/mp4\"/>\n      <itunes:subtitle>Converting
        arbitrary values to booleans</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[093 Boolean]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=196</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>A
        common question on Ruby forums and mailing lists is: \"why is there no Boolean
        data type?\". This episode attempts to answer that question.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=460\">093-boolean.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=461\">093-boolean.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=462\">093-boolean.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a724bd6408235ac38fe0dbfcc29b83994d63443c</guid>\n
        \     <pubDate>Mon, 06 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/461/093-boolean.mp4\" length=\"23346900\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Why Ruby has no Boolean type</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[092 Coincidental Duplication
        Redux]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=185</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Katrina
        Owen contributed an example of coincidental duplication I liked so much I
        decided to make a second episode about it. Enjoy!</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=445\">092-coincidental-duplication-redux.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=446\">092-coincidental-duplication-redux.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=447\">092-coincidental-duplication-redux.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-5b84a418456992f342a46fe896aa2835b09bd7f4</guid>\n
        \     <pubDate>Fri, 03 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/446/092-coincidental-duplication-redux.mp4\"
        length=\"21645987\" type=\"video/mp4\"/>\n      <itunes:subtitle>Another example
        of over-DRYing code</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[091 Ruby 2.0: Rebinding Methods]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=184</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this, the first (but far from the last!) RubyTapas episode to focus on a Ruby
        2.0 feature, we look at the implications of Ruby's newly relaxed rules for
        binding method objects to objects.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=442\">091-ruby-2-rebinding-methods.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=443\">091-ruby-2-rebinding-methods.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=444\">091-ruby-2-rebinding-methods.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-6d3a819ae521e9330e2e3513929ae39fe2e7bce2</guid>\n
        \     <pubDate>Wed, 01 May 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/443/091-ruby-2-rebinding-methods.mp4\"
        length=\"53863812\" type=\"video/mp4\"/>\n      <itunes:subtitle>Temporarily
        adding methods to objects</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[090 class &lt;&lt; self]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=182</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Ruby
        gives as a number of options when it comes to defining class methods. This
        episode starts by demonstrating three of them, and then gets a bit opinionated.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=430\">090-class-self.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=431\">090-class-self.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=432\">090-class-self.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-634a821f59b6de6261682efb3aa9d197e945e7fa</guid>\n
        \     <pubDate>Sun, 28 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/431/090-class-self.mp4\"
        length=\"17523570\" type=\"video/mp4\"/>\n      <itunes:subtitle>What's the
        best way to define class methods?</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[089 Coincidental Duplication]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=181</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>The
        DRY principle teaches us to get rid of duplication wherever we find it. But
        not all duplication is created equal...</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=433\">089-coincidental-duplication.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=434\">089-coincidental-duplication.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=435\">089-coincidental-duplication.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-c0f31018d214f1e7af311f2b21a239820d658add</guid>\n
        \     <pubDate>Fri, 26 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/434/089-coincidental-duplication.mp4\"
        length=\"29824778\" type=\"video/mp4\"/>\n      <itunes:subtitle>Can code
        be too DRY?</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[088 Gem-Love Part 5]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=180</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this continuation of the Gem-Love project, I complete the end-to-end acceptance
        test, verifying that the client can talk to the server.</p>\r\n<p>Source code
        here:&nbsp;<a href=\"https://github.com/avdi/gem-love/tree/rubytapas-088\">https://github.com/avdi/gem-love/tree/rubytapas-088</a></p>\r\n<p>Just
        a reminder, I'm collecting feedback so I can make RubyTapas even better! If
        you want your voice to be heard, fill out the survey:&nbsp;<a href=\"http://shiprise.wufoo.com/forms/r7x2q5/\">http://shiprise.wufoo.com/forms/r7x2q5/</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=425\">088-gem-love-5.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=426\">088-gem-love-5.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f67ca2ecd81c65e6d38400c624b7e0dee6eade92</guid>\n
        \     <pubDate>Wed, 24 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/425/088-gem-love-5.mp4\"
        length=\"21256933\" type=\"video/mp4\"/>\n      <itunes:subtitle>Integration
        client against server</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[087 Naming: Head Count]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=179</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Naming
        things is hard, and it's difficult to come up with hard-and-fast rules for
        it. But it can be helpful to learn from examples of real-world naming decisions
        that led to beneficial design changes. In this episode, we'll look at a method
        name change that clarified object responsibilities in a program dealing with
        live events.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=422\">087-naming-things-headcount.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=423\">087-naming-things-headcount.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=424\">087-naming-things-headcount.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-2e89317b104a5c5d70140fdbd67065526dca00b2</guid>\n
        \     <pubDate>Mon, 22 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/423/087-naming-things-headcount.mp4\"
        length=\"30829290\" type=\"video/mp4\"/>\n      <itunes:subtitle>Renaming
        a method, for great justice</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[086 Naked Splat]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=178</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we tackle how to override base class methods while cleanly passing
        through multiple base-class arguments.</p>\r\n<p>Notes:</p>\r\n<ul>\r\n<li>Paul
        Battley on <a href=\"http://po-ru.com/diary/destructuring-assignment-in-ruby/\">Destructuring
        Assignment in Ruby</a></li>\r\n</ul>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=419\">086-naked-splat.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=420\">086-naked-splat.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=421\">086-naked-splat.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9109930112eb1ba7eadc0f2019eb7d6f42adc9bb</guid>\n
        \     <pubDate>Fri, 19 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/421/086-naked-splat.mp4\"
        length=\"14480986\" type=\"video/mp4\"/>\n      <itunes:subtitle>Ignoring
        many arguments</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[085 Ignore Arguments]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=177</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Sometimes
        a block or method may receive arguments that you just don't care about. This
        episode introduces the idiomatic Ruby way to indicate that certain arguments
        should be ignored.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=416\">085-ignore-arguments.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=417\">085-ignore-arguments.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=418\">085-ignore-arguments.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9ee8bd40538092def429602944acf4e196044389</guid>\n
        \     <pubDate>Wed, 17 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/418/085-ignore-arguments.mp4\"
        length=\"16470631\" type=\"video/mp4\"/>\n      <itunes:subtitle>Some arguments
        are more interesting than others</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[084 Splat Group]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=176</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we take a look at a related feature to Ruby's \"splat\" operator: the ability
        to recursively destructure arrays using grouped assignment.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=413\">084-splat-group.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=414\">084-splat-group.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=415\">084-splat-group.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-7806cd5b0701651c5881286d5ef3ac4c54c41a58</guid>\n
        \     <pubDate>Mon, 15 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/415/084-splat-group.mp4\"
        length=\"18229710\" type=\"video/mp4\"/>\n      <itunes:subtitle>Pulling values
        out of nested arrays</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[083 Custom Splat]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=172</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode we discover how to make an arbitrary object implicitly \"splat\"-able.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=409\">083-custom-splat.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=410\">083-custom-splat.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=411\">083-custom-splat.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-701acce5f846152bcdd9a623ae7330f26375fc36</guid>\n
        \     <pubDate>Fri, 12 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/409/083-custom-splat.mp4\"
        length=\"21647614\" type=\"video/mp4\"/>\n      <itunes:subtitle>Making arbitrary
        objects splattable</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[082 Inline Assignment]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=171</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>It's
        a small thing, but judicious use of inline assignment can make code more DRY
        and concise. In this episode we look at how to do it, and when.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=406\">082-inline-assignment.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=407\">082-inline-assignment.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=408\">082-inline-assignment.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-44c663f403d44b29e9c93287e68ef3c9aaa98e08</guid>\n
        \     <pubDate>Wed, 10 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/407/082-inline-assignment.mp4\"
        length=\"16268528\" type=\"video/mp4\"/>\n      <itunes:subtitle>To assign
        inline is sometimes divine</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[081 Implicit Splat]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=169</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Delving
        further into Ruby's destructuring assignment, or \"splat\", mechanism, today
        we look at some cases where Ruby performs splatting without an explicit '*'
        operator.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=401\">081-implicit-splat.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=402\">081-implicit-splat.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=403\">081-implicit-splat.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-e3cee3be5a344a86c6339dd6ffce43ea1e81bc88</guid>\n
        \     <pubDate>Mon, 08 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/402/081-implicit-splat.mp4\"
        length=\"23209364\" type=\"video/mp4\"/>\n      <itunes:subtitle>Splatting
        without the splat</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[080 Splat Basics]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=168</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Ruby
        supports a limited form of destructuring assignment, in the form of the \"splat\"
        operator. In today's episode we go over splat basics, in order to lay a foundation
        for more advanced splatting techniques to come.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=398\">080-splat-basics.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=399\">080-splat-basics.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=400\">080-splat-basics.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-208821d167fae5fc59cff742c7393668c9dc8603</guid>\n
        \     <pubDate>Fri, 05 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/399/080-splat-basics.mp4\"
        length=\"33262279\" type=\"video/mp4\"/>\n      <itunes:subtitle>Splatting
        out collections, and slurping them back up</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[079 Concat]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=167</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>There
        is more than one way to concatenate arrays, but not all ways are created equal.
        In this episode we'll compare three approaches in terms of both semantics
        and efficiency.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=395\">079-concat.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=396\">079-concat.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=397\">079-concat.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-4cd280308ca7e64a9f7c03faf4ebc524d0e3214d</guid>\n
        \     <pubDate>Wed, 03 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/396/079-concat.mp4\" length=\"21803485\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Appending arrays to other arrays</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[078b Java Dregs: Double Brace
        Initialization]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=183</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>We
        all know Java is the best programming lanagueg out there, but maybe you've
        seen the literal syntax some lesser languages have for initializing data structures
        like arrays and maps. In this episode we'll look at a technique for concisely
        initializing Java data structures with values.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=438\">078b-java-dregs.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=439\">078-java-dregs.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=440\">Cafe1.java</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=441\">Cafe2.java</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b3f0f611592fb3d7fea31d8c78f16b8452d9e09b</guid>\n
        \     <pubDate>Mon, 01 Apr 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/438/078b-java-dregs.mp4\"
        length=\"17004891\" type=\"video/mp4\"/>\n      <itunes:subtitle>Concisely
        initializing data structures in Java</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[078 Tail Part 7: Cooperating Objects]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=166</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        a final refactoring to our pseudo-tail(1), we use an enumerator to encapsulate
        the process of searching text chunks for newlines.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=392\">078-tail-7-cooperating-objects.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=393\">078-tail-7-cooperating-objects.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=394\">078-tail-7-cooperating-objects.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-add8dcd3bbdb9b1f5b1e7ed467b8d949ef7d23d2</guid>\n
        \     <pubDate>Fri, 29 Mar 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/393/078-tail-7-cooperating-objects.mp4\"
        length=\"33816961\" type=\"video/mp4\"/>\n      <itunes:subtitle>The return
        of Enumerator</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[077 Tail Part 6: Process as
        Object]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=159</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Continuing
        to refactor our minimal tail(1) implementation, today we clean up a loop by
        encapsulating its state in a new object.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=381\">077-tail-6-process-as-object.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=382\">077-tail-6-process-as-object.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=383\">077-tail-6-process-as-object.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-26781adbe5c9d2894edf6e7bbc5e2dbb8e06b5aa</guid>\n
        \     <pubDate>Wed, 27 Mar 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/383/077-tail-6-process-as-object.mp4\"
        length=\"19579630\" type=\"video/mp4\"/>\n      <itunes:subtitle>Representing
        a process as an object</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[076 Tail Part 5: Idiom]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=158</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>So
        far, our reimplementation of tail(1) bears a striking resemblance to the style
        of code we might find in the C implementation of the same utility. In this
        episode we'll make the code a little more Rubyish by extracting loops into
        block methods.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=378\">076-tail-5-idiom.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=380\">076-tail-5-idiom.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=437\">076-tail-5-idiom-high.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-01a0e2b96221ca7918e55ae7dc87d65ca8df65e2</guid>\n
        \     <pubDate>Mon, 25 Mar 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/437/076-tail-5-idiom-high.mp4\"
        length=\"51261922\" type=\"video/mp4\"/>\n      <itunes:subtitle>From C to
        Ruby, one block at a time.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[074 Tail Part 3: #rindex]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=155</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>We've
        figured out how to read chunks of text backwards from a file, now it's time
        to tackle searching that text for the beginnings of lines.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=344\">074-tail-3-rindex.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=345\">074-tail-3-rindex.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=346\">074-tail-3-rindex.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-90ba8fad69a3a48e0c799e7976cbe481d8ca81d0</guid>\n
        \     <pubDate>Wed, 20 Mar 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/346/074-tail-3-rindex.mp4\"
        length=\"43201107\" type=\"video/mp4\"/>\n      <itunes:subtitle>Searching
        backwards in strings</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[075 Tail Part 4: copy_stream]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=157</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Marching
        right along in our reimplementation of UNIX tail(1), today we tackle the problem
        of dumping the tail of the file to STDOUT once we've found the starting point.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=376\">075-tail-4-copy_stream.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=377\">075-tail-4-copy_stream-768kbs.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=436\">075-tail-4-copy_stream.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-607d4614ad85141c2c3f4186248e18158f8da9bb</guid>\n
        \     <pubDate>Wed, 20 Mar 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/377/075-tail-4-copy_stream-768kbs.mp4\"
        length=\"21799331\" type=\"video/mp4\"/>\n      <itunes:subtitle>Efficiently
        channeling data between filehandles</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[073 Tail Part 2: Do-While]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=151</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>As
        we continue to rewrite a subset of the UNIX tail(1) command, we learn how
        to write a do...while loop in Ruby.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=341\">073-tail-2-do-while.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=342\">073-tail-2-do-while.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=343\">073-tail-2-do-while.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-7393ef6c5a710e2899305f3f6830daff2fc62ba1</guid>\n
        \     <pubDate>Mon, 18 Mar 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/342/073-tail-2-do-while.mp4\"
        length=\"31798002\" type=\"video/mp4\"/>\n      <itunes:subtitle>Ruby doesn't
        have a do-while loop... or does it?</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[072 Tail Part 1: Random Access]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=149</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        episode kicks off a short miniseries on re-implementing a small subset of
        the UNIX \"tail\" command in Ruby. We'll start by learning how to jump around
        to arbitrary positions in a file.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=336\">072-tail-1-random-access.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=338\">072-tail-1-random-access.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=339\">072-tail-1-random-access.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a2fbb06ba2347709b576c2c49f3fac010dd5b0e2</guid>\n
        \     <pubDate>Fri, 15 Mar 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/338/072-tail-1-random-access.mp4\"
        length=\"14156338\" type=\"video/mp4\"/>\n      <itunes:subtitle>Reading files
        from points other than the beginning</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[071 break with a Value]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=147</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        the second of two episodes about the 'break' keyword, we discover how to override
        method return values to suit our own needs.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=332\">071-break-with-value.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=333\">071-break-with-value.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=334\">071-break-with-value.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-07b75fa2401b9e11fb58540ed6dfbe81c5773ecb</guid>\n
        \     <pubDate>Wed, 13 Mar 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/333/071-break-with-value.mp4\"
        length=\"23555131\" type=\"video/mp4\"/>\n      <itunes:subtitle>Overriding
        method return values with break</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[070 break]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=146</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this, the first of two episodes on the 'break' keyword, we look at how it
        can be applied beyond breaking out of loops.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=328\">070-break.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=330\">070-break.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=331\">070-break.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9d4929804b882799685e82fe563cac3ad7fc237b</guid>\n
        \     <pubDate>Mon, 11 Mar 2013 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/328/070-break.mp4\" length=\"19873492\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>The break keyword is for more
        than just loops</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[069 Gem-Love Part 4]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=145</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>The
        last Gem-Love episode had me creating a command-line client. This time around,
        I use Rack and Sinatra to build a simple server.</p>\r\n<p>Source code can
        be found here:&nbsp;<a href=\"https://github.com/avdi/gem-love/tree/rubytapas-069\">https://github.com/avdi/gem-love/tree/rubytapas-069</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=326\">069-gem-love-4.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=327\">069-gem-love-4.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9fba79d538478986e44ec786f4bac99ca7cd53b4</guid>\n
        \     <pubDate>Fri, 08 Mar 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/326/069-gem-love-4.mp4\"
        length=\"22400202\" type=\"video/mp4\"/>\n      <itunes:subtitle>Creating
        a Sinatra-based server</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[068 Display Builder]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=140</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        some applications there is a many-to-many relationship between types of objects
        that may be displayed to users, and formats in which they may be rendered.
        There may even be multiple display styles within a given format: for instance,
        a \"summary\" style and a \"detailed\" style. In this episode well look at
        one possible option for decoupling <em>what</em>&nbsp;is being displayed from
        <em>how</em>&nbsp;it is displayed.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=318\">068-display-builder.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=319\">068-display-builder.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=320\">068-display-builder.zip</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-0bf68eec152306a59ce0f3db2d968257f37d689e</guid>\n
        \     <pubDate>Wed, 06 Mar 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/318/068-display-builder.mp4\"
        length=\"54750169\" type=\"video/mp4\"/>\n      <itunes:subtitle>Decoupling
        what is displayed from how</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[067 Moneta]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=144</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        the last episode we gave a class the ability to cache HTTP responses in a
        Hash or something that behaves like a Hash. Now we'll introduce the Moneta
        gem, a library that abstracts many different key-value stores behind a uniform,
        Hash-like interface.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=322\">067-moneta.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=323\">067-moneta.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=324\">067-moneta.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-80a24b3b8107df28c3c2a06a11e539c411b232b0</guid>\n
        \     <pubDate>Mon, 04 Mar 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/323/067-moneta.mp4\" length=\"12948648\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Pluggable cache backends</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[066 Caching an API]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=139</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Web
        services are slow to request and often have rate caps. A cache can cut down
        on requests to remote APIs. But how best to design the interface between the
        code that uses an API, and the caching layer? In this episode we'll explore
        that question.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=315\">066-caching-an-api.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=316\">066-caching-an-api.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=317\">066-caching-an-api.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b6e32891120fefa23356d574ef0dd778d21479d5</guid>\n
        \     <pubDate>Fri, 01 Mar 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/316/066-caching-an-api.mp4\"
        length=\"90341870\" type=\"video/mp4\"/>\n      <itunes:subtitle>Caching the
        results of web service requests</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[065 PulseFFI Part 7]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=138</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        is the culmination of the last few PulseFFI episodes. I'll add some insurance
        to the high-level PulseFFI.mainloop method, and then make use of it in the
        proof-of-concept script. Finally, I'll discuss some of my philosophy for building
        library APIs.</p>\r\n<p>Browse the source code here:&nbsp;<a href=\"https://github.com/avdi/pulse-ffi/tree/rubytapas-065\">https://github.com/avdi/pulse-ffi/tree/rubytapas-065</a></p>\r\n<p>Sorry,
        no transcript for this live-recorded episode.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=314\">065-ffi-7.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-158461b263d469ef6c0835bf22ac3f9a1df2801f</guid>\n
        \     <pubDate>Wed, 27 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/314/065-ffi-7.mp4\" length=\"106936838\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Wrapping up the PulseFFI.mainloop
        method</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[064 Yield or Enumerate]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=137</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>A
        number of Ruby standard library methods return an Enumerator if no block is
        passed to them. In this episode, we'll learn how to emulate this behavior
        in our own methods.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=311\">064-yield-or-enumerate.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=312\">064-yield-or-enumerate.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=313\">064-yield-or-enumerate.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a4fc7c30d5362f2c35988031eee0548e0d7fe41c</guid>\n
        \     <pubDate>Mon, 25 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/312/064-yield-or-enumerate.mp4\"
        length=\"10296287\" type=\"video/mp4\"/>\n      <itunes:subtitle>Making iterative
        methods more flexible</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[063 Gem-Love Part 3]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=136</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Returning
        to my Gem-Love project in this episode, I use TDD to drive out a client-side
        implementation for the first feature. In the process, I talk about message-first
        design.</p>\r\n<p>Check out the source here:&nbsp;<a href=\"https://github.com/avdi/gem-love/tree/rubytapas-063\">https://github.com/avdi/gem-love/tree/rubytapas-063</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=309\">063-gem-love-3.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=310\">063-gem-love-3.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ac8346ea71f6889985ef19c1eb79e5af52f0afd3</guid>\n
        \     <pubDate>Fri, 22 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/310/063-gem-love-3.mp4\"
        length=\"53544281\" type=\"video/mp4\"/>\n      <itunes:subtitle>Implementing
        the first feature</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[062 Fiber]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=135</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we'll explore Ruby's lightweight concurrency primitive by using
        it to emulate the Enumerator class.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=306\">062-fiber.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=307\">062-fiber.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=308\">062-fiber.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-168c76fd7441959ad2e0a3e797a4a8ca47505efe</guid>\n
        \     <pubDate>Wed, 20 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/307/062-fiber.mp4\" length=\"51955030\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Rebuilding Enumerator with Ruby's
        Fibers</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[061 PulseFFI Part 6]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=134</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Continuing
        in my extraction of a high-level API for the PulseFFI library, in this episode
        I test-drive the Mainloop.run, a composed method that brings together the
        work I've done so far.</p>\r\n<p>Browse the source code here:&nbsp;<a href=\"https://github.com/avdi/pulse-ffi/tree/rubytapas-061\">https://github.com/avdi/pulse-ffi/tree/rubytapas-061</a></p>\r\n<p>Sorry,
        no transcript for this live-recorded episode.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=305\">061-ffi-6.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-0009ddedd5ab01bb56900a780df61249e65e1d9e</guid>\n
        \     <pubDate>Mon, 18 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/305/061-ffi-6.mp4\" length=\"88534465\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Tying together the PulseFFI::Mainloop
        class</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[060 Ascend]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=133</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Now
        that we've been formally introduced to the Enumerator class, it's time to
        apply that knowledge in a concrete way. In this episode we use Pathname and
        Enumerator to locate a project-wide econfiguration file.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=302\">060-ascend.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=303\">060-ascend.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=304\">060-ascend.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9ecbcfa32c265d69e62779e1f332fa8f567a7d42</guid>\n
        \     <pubDate>Fri, 15 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/303/060-ascend.mp4\" length=\"13853116\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Searching directory ancestors
        with Pathname and Enumerator</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[059 Enumerator]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=132</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        previous episodes we've touched on Enumerator in passing. This time it'll
        take center stage, as we explore just what an Enumerator is and what it's
        good for.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=299\">059-enumerator.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=300\">059-enumerator.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=301\">059-enumerator.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-20d31f438b46a88cdb8fbb077c29fb9065d11b96</guid>\n
        \     <pubDate>Wed, 13 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/300/059-enumerator.mp4\"
        length=\"40092914\" type=\"video/mp4\"/>\n      <itunes:subtitle>An intro
        to the Enumerator class</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[058 ARGF]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=131</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        episode explores ARGF, a powerful object for working with input files in command-line
        programs.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=296\">058-argf.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=297\">058-argf.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=298\">058-argf.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-de334c2d9fcbe0d4e523ee688f745893810163bf</guid>\n
        \     <pubDate>Mon, 11 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/297/058-argf.mp4\" length=\"21796177\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Easily work with command-line
        input files</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[057 PulseFFI Part 5]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=130</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode I continue to felsh out the high-level API for my PulseFFI library,
        using TDD and mock objects to define how the object model interacts with the
        C bindings layer. I also compare the MiniTest and RSpec mocking/stubbing libraries.</p>\r\n<p>Browse
        the source for this episode at:&nbsp;https://github.com/avdi/pulse-ffi/tree/rubytapas-057</p>\r\n<p>Sorry,
        no transcript for this live-recorded episode.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=295\">057-ffi-5.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-e7462bafbdfaf370e4e679fb895ab51b94ac91ec</guid>\n
        \     <pubDate>Fri, 08 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/295/057-ffi-5.mp4\" length=\"94530395\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>TDDing the PulseFFI API</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[056 xmpfilter]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=129</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this, the most requested RubyTapas episode ever, we'll take a look at xmpfilter,
        the program I use to evaluate Ruby expressions from within my editor.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=292\">056-xmpfilter.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=293\">056-xmpfilter.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=294\">056-xmpfilter.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-5c274a7c86342ed6c1b5bcb997350c4d8fbd9ddb</guid>\n
        \     <pubDate>Wed, 06 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/293/056-xmpfilter.mp4\"
        length=\"35061110\" type=\"video/mp4\"/>\n      <itunes:subtitle>Evaluating
        Ruby code from the comfort of your editor</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[055 Runnable Library]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=128</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>It's
        a library! No, it's an executable! Relax, your Ruby files can be both require-able
        libraries <em>and</em>&nbsp;executables!</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=289\">055-runnable-library.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=290\">055-runnable-library.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=291\">055-runnable-library.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-401ec9576c108e2540c2663ac714888036e0abff</guid>\n
        \     <pubDate>Mon, 04 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/289/055-runnable-library.mp4\"
        length=\"41831204\" type=\"video/mp4\"/>\n      <itunes:subtitle>Making libraries
        double as executables</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[054 PulseFFI Part 4]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=127</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this edition of a miniseries on building a wrapper library using FFI, I begin
        to sketch out a higher-level API for starting up a PulseAudio mainloop.</p>\r\n<p>Source
        code here:&nbsp;<a href=\"https://github.com/avdi/pulse-ffi/tree/rubytapas-054\">https://github.com/avdi/pulse-ffi/tree/rubytapas-054</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=325\">054-ffi-4.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-beb8343869177ba4b797e57568cb15ea5c7bff76</guid>\n
        \     <pubDate>Fri, 01 Feb 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/325/054-ffi-4.mp4\" length=\"65000795\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Sketching out a higher level
        API</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[053 Selectively Run Tests]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=126</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Selectively
        running tests can be a lifesaver in a large codebase. This episode covers
        how to run just the tests you care about in both MiniTest and RSpec - including
        how to slectively run tests under Rake.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=284\">053-selectively-run-tests.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=285\">053-selectively-run-tests.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=286\">arithmetic_spec.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=287\">arithmetic_test.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-509ccdfeab8e6c49bf86a6e35914e297ca6a754f</guid>\n
        \     <pubDate>Wed, 30 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/285/053-selectively-run-tests.mp4\"
        length=\"57473152\" type=\"video/mp4\"/>\n      <itunes:subtitle>Running just
        the tests you care about</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[052 The End of Mocking]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=125</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>At
        the borders of our systems, mockist testing hits a point of diminishing returns.
        In this episode we take a look at when to stop mocking and start integration
        testing.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=281\">052-the-end-of-mocking.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=282\">052-the-end-of-mocking.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=283\">052-the-end-of-mocking.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-e4bd3090f74ad373eaf12ec5eba21bb3cb37c4eb</guid>\n
        \     <pubDate>Mon, 28 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/282/052-the-end-of-mocking.mp4\"
        length=\"97700871\" type=\"video/mp4\"/>\n      <itunes:subtitle>Mock objects
        and the point of diminishing returns</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[051 PulseFFI Part 3]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=124</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this \"live-style\" episode, I begin to transition the PulseFFI proof-of-concept
        script into a Ruby library, using my smoke test to ensure everything continues
        to work.</p>\r\n<p>Browse the source code here:&nbsp;https://github.com/avdi/pulse-ffi/tree/rubytapas-051</p>\r\n<p>Sorry,
        no transcript for this live recording.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=280\">051-ffi-3.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-1716f6062421e79fb3ee9afbd7509e261c9d0903</guid>\n
        \     <pubDate>Fri, 25 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/280/051-ffi-3.mp4\" length=\"119924653\"
        type=\"video/mp4\"/>\n      <itunes:subtitle>Transitioning the proof-of-concept
        to a library</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[050 Include Namespace]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=122</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Sometimes
        a utility module is overkill. In this episode, we make a namespace module
        do double-duty.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=277\">050-include-namespace.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=278\">050-include-namespace.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=279\">050-include-namespace.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-362159e0e87e6ee6f476b67542b359d0c07c1630</guid>\n
        \     <pubDate>Wed, 23 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/277/050-include-namespace.mp4\"
        length=\"18079600\" type=\"video/mp4\"/>\n      <itunes:subtitle>Sometimes
        a utility module is more than you need</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[049 Utility Function]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=121</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Some
        functions are useful in many different contexts. In this episode we'll explore
        some ways to make them available both to library code and to client code of
        a library.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=274\">049-utility-function.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=275\">049-utility-function.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=276\">049-utility-function.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-108d67ea8bdb834c2ad70884deeb95b0baa32a0d</guid>\n
        \     <pubDate>Mon, 21 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/275/049-utility-function.mp4\"
        length=\"56932261\" type=\"video/mp4\"/>\n      <itunes:subtitle>Some functions
        are useful in many different contexts. In this episode we'll explore some
        ways to make them available both to library code and to client code of a library.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[048 Memoize]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=119</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        episode covers how to write a \"macro\"-a method that generates or modifies
        other methods-using the classic example of memoizing method results.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=271\">048-memoize.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=272\">048-memoize.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=273\">RubyTapas048-Memoize.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b989f1d65dd31b321521d212d7e17fe2587674f1</guid>\n
        \     <pubDate>Fri, 18 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/273/RubyTapas048-Memoize.mp4\"
        length=\"58431155\" type=\"video/mp4\"/>\n      <itunes:subtitle>A macro for
        caching method results</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[047 FFI Part 2]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=118</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        part 2 of this series, we buy ourselves some peace of mind with a simple smoke
        test.</p>\r\n<p>The code for this episode can be found here:&nbsp;<a href=\"https://github.com/avdi/pulse-ffi/tree/RubyTapas047\">https://github.com/avdi/pulse-ffi/tree/RubyTapas047</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=269\">047-ffi-2.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=270\">RubyTapas047-FFI-2.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b5f40d344136af810b3ee0c2fbffeb687f827f83</guid>\n
        \     <pubDate>Wed, 16 Jan 2013 15:13:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/270/RubyTapas047-FFI-2.mp4\"
        length=\"76199625\" type=\"video/mp4\"/>\n      <itunes:subtitle>Adding a
        smoke test</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[046 Gem-Love Part 2]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=117</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        Part 2 of this series chronicling the creation of an app, I establish a test-driven
        rhythm, starting with a high-level acceptance test.</p>\r\n<p>The source code
        for this episode is available here:&nbsp;<a href=\"https://github.com/avdi/gem-love/tree/rubytapas-episode-046\">https://github.com/avdi/gem-love/tree/rubytapas-episode-046</a></p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=267\">046-gem-love-2.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=268\">RubyTapas046-Gem-Love-2.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-754cda16c11a4fbcbadc050413a525011d5fca37</guid>\n
        \     <pubDate>Mon, 14 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/268/RubyTapas046-Gem-Love-2.mp4\"
        length=\"74923323\" type=\"video/mp4\"/>\n      <itunes:subtitle>Kickstarting
        the BDD rhythm</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[045 Hash Default Value]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=115</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        cautionary episode demonstrates and explains a Hash gotcha that often comes
        as a surprise.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=264\">045-hash-default.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=265\">045-hash-default.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=266\">RubyTapas045-Hash-Default-Values.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-2bf9da2d7d99d17c501de016354d559a3b21e4b2</guid>\n
        \     <pubDate>Fri, 11 Jan 2013 14:07:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/266/RubyTapas045-Hash-Default-Values.mp4\"
        length=\"13546292\" type=\"video/mp4\"/>\n      <itunes:subtitle>A surprising
        Hash gotcha</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[044 #one?]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=114</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Somtetimes
        you need to know if exactly one element in a collection has a given property.
        For that situation, we have the #one? predicate method.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=261\">044-one.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=262\">044-one.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=263\">RubyTapas044-One.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-7685b2efcbb4cfb6e7c312b1653a0811ec2e82c3</guid>\n
        \     <pubDate>Wed, 09 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/263/RubyTapas044-One.mp4\"
        length=\"7276439\" type=\"video/mp4\"/>\n      <itunes:subtitle>Finding if
        one and only one element matches</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[043 Exclusive Or]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=113</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        episode looks at Ruby's logical XOR operator, and how it can be useful in
        checking that a method was called with the correct optional arguments.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=258\">043-exclusive-or.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=259\">043-exclusive-or.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=260\">RubyTapas043-Exclusive-Or.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-d39799f2377eee0af56b5d6a570d414221d5a30d</guid>\n
        \     <pubDate>Mon, 07 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/260/RubyTapas043-Exclusive-Or.mp4\"
        length=\"22958812\" type=\"video/mp4\"/>\n      <itunes:subtitle>Asserting
        A or B but not both</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[042 Streaming]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=112</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Does
        code optimized for RAM usage need to be ugly? Find out, in today's episode!</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=255\">042-streaming.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=256\">042-streaming.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=257\">RubyTapas042-Streaming.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-bcab43eb06bfdb1b8465e5933d17e9cf13dcdf3c</guid>\n
        \     <pubDate>Fri, 04 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/257/RubyTapas042-Streaming.mp4\"
        length=\"41884217\" type=\"video/mp4\"/>\n      <itunes:subtitle>Processing
        big data without maxing out memory</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[041 String#scan]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=110</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        episode looks at a convenient tool for weeding through text and pulling out
        parts that match a given pattern.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=252\">041-string-scan.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=253\">041-string-scan.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=254\">RubyTapas041-String-Scan.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-9da4c6910bdc6dca3e86ab619280234f81455281</guid>\n
        \     <pubDate>Wed, 02 Jan 2013 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/254/RubyTapas041-String-Scan.mp4\"
        length=\"26699199\" type=\"video/mp4\"/>\n      <itunes:subtitle>Using String#scan
        to comb through text</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[040 Gradual Stiffening]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=109</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode we'll try to come to grips with a slippery quality---a quality
        which is of importance to differentiating code that is easy to evolve, from
        code that isn't. Along the way, we'll write some Ruby code that looks disturbingly
        like Perl!</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=248\">040-gradual-stiffening.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=249\">040-gradual-stiffening.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=250\">convert.sh</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=251\">RubyTapas040-Gradual-Stiffening.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-88dc7ce35680aa8b3f08e5aa576c8a1b77969546</guid>\n
        \     <pubDate>Mon, 31 Dec 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/251/RubyTapas040-Gradual-Stiffening.mp4\"
        length=\"45244855\" type=\"video/mp4\"/>\n      <itunes:subtitle>From a one-off
        script to a reusable method in tiny steps</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[039 Gem-Love Part 1]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=108</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this, the first of another ongoing occasional series, I revisit an open-source
        application I started three years ago and begin to rewrite it. Part 1 focuses
        on building a proof-of-concept RubyGems plugin.</p>\r\n<p>The source code
        for this episode can be found on GitHub:&nbsp;<a href=\"https://github.com/avdi/gem-love/tree/rubytapas-episode-039\">https://github.com/avdi/gem-love/tree/rubytapas-episode-039</a></p>\r\n<p>Other
        notes:</p>\r\n<ul>\r\n<li><a href=\"http://tagaholic.me/2009/04/23/how-to-write-a-rubygem-command-plugin.html\">How
        to write a RubyGem command plugin</a></li>\r\n<li><a href=\"http://rubygems.rubyforge.org/rubygems-update/index.html\">RubyGems
        API documentation</a></li>\r\n</ul>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=246\">039-gem-love-part-1.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=247\">RubyTapas039-Gem-Love-Part-1.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-1d5893a8db9e3d4defae8469c8fa44e0c6f99494</guid>\n
        \     <pubDate>Fri, 21 Dec 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/247/RubyTapas039-Gem-Love-Part-1.mp4\"
        length=\"45357415\" type=\"video/mp4\"/>\n      <itunes:subtitle>First in
        a series following the creation of an app</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[038 Caller-Specified Fallback]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=107</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Sometimes
        it's hard to decide how to handle a failure in a method call. Raise an exception?
        Return a nil? Log an error? The best choice may differ depending on where
        the method is being called. In this episode, we look at a technique for defering
        the decision about how to deal with a failure to the point when a method is
        called.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=243\">038-caller-specified-fallback.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=244\">038-caller-specified-fallback.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=245\">RubyTapas038-Caller-Specified-Fallback.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f23b997833a15f555998a45f39405c3408f82ca5</guid>\n
        \     <pubDate>Wed, 19 Dec 2012 11:23:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/245/RubyTapas038-Caller-Specified-Fallback.mp4\"
        length=\"30276905\" type=\"video/mp4\"/>\n      <itunes:subtitle>Punting failure-handling
        to the caller</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[037 Proc and Threequal]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=106</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today's
        dish combines the great flavor of Ruby's 'case' statement with a little Proc
        seasoning and a threequals demiglace!</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=240\">037-proc-and-threequals.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=241\">037-proc-and-threequals.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=242\">RubyTapas037-Proc-And-Threequals.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-97374819aa4806e23042ffa33c828d5ae1569862</guid>\n
        \     <pubDate>Mon, 17 Dec 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/242/RubyTapas037-Proc-And-Threequals.mp4\"
        length=\"10342966\" type=\"video/mp4\"/>\n      <itunes:subtitle>A fun way
        to use Procs as predicates</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[036 Blocks, Procs, and Lambdas]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=105</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>How
        is a Proc different from a Lambda? When do you use one over the other? And
        how to blocks fit into all this? Today's episode attemptes to answer these
        burning questions.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=237\">036-blocks-procs-and-lambdas.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=238\">036-blocks-procs-and-lambdas.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=239\">RubyTapas036-Blocks-Procs-and-Lambdas.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-c178b82e058c0752ae909c36c3d48ccbe4ccf197</guid>\n
        \     <pubDate>Fri, 14 Dec 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/239/RubyTapas036-Blocks-Procs-and-Lambdas.mp4\"
        length=\"30292360\" type=\"video/mp4\"/>\n      <itunes:subtitle>Demystifying
        blocks, procs, and lambdas. Hopefully.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[035 Callable]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=104</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Many
        different kinds of Ruby objects respond to #call. Today's dish is a demonstration
        of how this fact can be harnessed to easily swap out different implementations
        of a collaborator object.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=234\">035-callable.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=235\">035-callable.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=236\">RubyTapas035-Callable.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-f3d0497ca974b56d19b030694baf98e7a6c66594</guid>\n
        \     <pubDate>Wed, 12 Dec 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/236/RubyTapas035-Callable.mp4\"
        length=\"39981898\" type=\"video/mp4\"/>\n      <itunes:subtitle>A common
        protocol for callable objects</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[034 Struct from Hash]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=103</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>For
        such similar and broadly useful data structures, Struct and Hash are surprisingly
        incompatible. In this episode we look at some ways to smooth over their differences,
        and answer a viewer question in the process.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=231\">034-struct-from-hash.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=232\">034-struct-from-hash.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=233\">RubyTapas034-Struct-From-Hash.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-56175b4cc446a5928f49147253d4ae33cc7dfc5d</guid>\n
        \     <pubDate>Mon, 10 Dec 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/233/RubyTapas034-Struct-From-Hash.mp4\"
        length=\"20945157\" type=\"video/mp4\"/>\n      <itunes:subtitle>Struct and
        Hash, sittin' in a tree...</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[033 Classes and Constants]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=102</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>On
        the menu today is an exploration of what, exactly, happens when we define
        a class in Ruby.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=214\">RubyTapas033-Classes-and-Constants.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=215\">033-classes-and-constants.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=216\">033-classes-and-constants.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-1b98b7922654f0f135aa461e91af7e91ec7c4e36</guid>\n
        \     <pubDate>Fri, 07 Dec 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/214/RubyTapas033-Classes-and-Constants.mp4\"
        length=\"19911334\" type=\"video/mp4\"/>\n      <itunes:subtitle>Exactly what
        does the \"class\" keyword do?</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[032 Hash Default Blocks]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=101</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Following
        on to the episodes about #fetch, today's episode answers the question: what
        do we do when we want the same defaulting behavior everwhere a Hash is used?</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=211\">RubyTapas032-Hash-Default-Blocks.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=212\">032-hash-default-blocks.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=213\">032-hash-default-blocks.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b9f164476123506231d352c7e978de64c862d7be</guid>\n
        \     <pubDate>Wed, 05 Dec 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/211/RubyTapas032-Hash-Default-Blocks.mp4\"
        length=\"23071047\" type=\"video/mp4\"/>\n      <itunes:subtitle>Making hash
        values appear out of nowhere.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[031 Observer Variations]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=100</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Today
        we revisit episode 21, and try out several different takes on registering
        observer callbacks inline.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=208\">031-observer-variations.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=209\">031-observer-variations.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=210\">031-observer-variations.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-83dccabcfe70590e62b8738443db32ab325ad3e7</guid>\n
        \     <pubDate>Mon, 03 Dec 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/210/031-observer-variations.mp4\"
        length=\"106667820\" type=\"video/mp4\"/>\n      <itunes:subtitle>Improving
        the observable API</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[030 Backticks]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=95</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Celebrate
        Friday with a stupid Ruby trick! In this epsiode we discover one of Ruby's
        most overlooked operators, and overload it just because we can.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=201\">030-backticks.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=202\">030-backticks.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=203\">RubyTapas030-Backticks.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ed5128ebba504d2a33f9a61992490ae7a8a12b9b</guid>\n
        \     <pubDate>Fri, 30 Nov 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/203/RubyTapas030-Backticks.mp4\"
        length=\"19404031\" type=\"video/mp4\"/>\n      <itunes:subtitle>Overloading
        Ruby's backtick operator, just for funsies!</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[029 Redirecting Output]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=88</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This
        episode takes a look at two different methods for redirecting standard out
        and standard error - one simple and quick, one more comprehensive.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=192\">029-redirecting-output.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=193\">029-redirecting-output.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=194\">RubyTapas029-Redirecting-Output.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-16beac88f371fc2c6f943aa04ad71b49bc842b2a</guid>\n
        \     <pubDate>Wed, 28 Nov 2012 13:26:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/194/RubyTapas029-Redirecting-Output.mp4\"
        length=\"51368883\" type=\"video/mp4\"/>\n      <itunes:subtitle>Telling output
        to take a detour.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[028 Macros and Modules Part
        2]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=80</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        episode 27, we switched from adding generated methods directly to a class,
        to using anonymous modules. In this episode, we consolidate our metaprogramming
        modules, and make them more self-documenting.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=181\">028-macros-and-modules-2.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=182\">028-macros-and-modules-2.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=183\">RubyTapas028-Macros-and-Modules-Part-2.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-c79e2bf7b9cb3b55ae7078b9a6578385bd3e27dd</guid>\n
        \     <pubDate>Mon, 26 Nov 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/183/RubyTapas028-Macros-and-Modules-Part-2.mp4\"
        length=\"33633143\" type=\"video/mp4\"/>\n      <itunes:subtitle>Cleaning
        up metaprogrammed methods</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[027 Macros and Modules]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=71</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In this episode,
        we look at how to use dynamically generated modules to make metaprogrammed
        methods open for future extension.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=171\">027-macros-and-modules.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=172\">027-macros-and-modules.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=173\">RubyTapas027-Macros-and-Modules.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-361722daab20abefb929e327d092af82449e33b9</guid>\n
        \     <pubDate>Fri, 23 Nov 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/173/RubyTapas027-Macros-and-Modules.mp4\"
        length=\"43955462\" type=\"video/mp4\"/>\n      <itunes:subtitle>How to add
        methods to classes in an extensible way.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[026 FFI]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=70</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>With
        the FFI Gem, building wrappers for C libraries is easier than ever. This episode
        gives a brief overview of building the beginnings of a Ruby interface to the
        Linux libpulse library.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=166\">pa_context_state.h</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=167\">pa_source_info.h</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=168\">list-sources.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=169\">RubyTapas026-FFI.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=170\">026-ffi.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-eba708ddea7fcb89b82d0829bf95f1d47a73d904</guid>\n
        \     <pubDate>Wed, 21 Nov 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/169/RubyTapas026-FFI.mp4\"
        length=\"79720166\" type=\"video/mp4\"/>\n      <itunes:subtitle>A brief introduction
        to the FFI Gem</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[025 OpenStruct]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=69</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>This episode
        focuses on OpenStruct, which makes it easy to create ad-hoc value objects
        from hashes.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=163\">025-openstruct.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=164\">025-openstruct.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=165\">RubyTapas025-OpenStruct.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-6f130b3f9a594e4eb4270b715d2b9d3748813a39</guid>\n
        \     <pubDate>Mon, 19 Nov 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/165/RubyTapas025-OpenStruct.mp4\"
        length=\"43564059\" type=\"video/mp4\"/>\n      <itunes:subtitle>A look at
        Struct's freewheeling cousin, OpenStruct</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[024 Incidental Change]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=66</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Have
        you ever looked at a diff that was cluttered by meaningless \"noise\" - changes
        that existed just to satisfy the parser, and were a distraction from the semantic
        changes to the code? In this episode we look at some idioms and habits to
        help avoid these kinds of incidental changes.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=129\">024-incidental-change.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=130\">RubyTapas024-Incidental-Change.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=131\">024-incidental-change.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-cef25d0a932c75ec347ada984dfe7985a3940ae9</guid>\n
        \     <pubDate>Fri, 16 Nov 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/130/RubyTapas024-Incidental-Change.mp4\"
        length=\"23558112\" type=\"video/mp4\"/>\n      <itunes:subtitle>Keeping diffs
        free from noise.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[023 Tempfile]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=65</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this episode we look at the Tempfile standard library, and how it can facilitate
        communicating with subprocesses.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=123\">023-tempfile.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=124\">ch1.md</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=125\">pandoc.sh</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=126\">meta.yaml</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=127\">publish.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=128\">RubyTapas023-Tempfile.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-43a1646684946fc7dcf34f5fae7fb2a7487eec48</guid>\n
        \     <pubDate>Wed, 14 Nov 2012 11:34:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/128/RubyTapas023-Tempfile.mp4\"
        length=\"48818807\" type=\"video/mp4\"/>\n      <itunes:subtitle>Working with
        temporary files in Ruby</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[022 Inline Rescue]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=64</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Putting a
        rescue at the end of a line can get you into unexpected trouble. In this episode
        we'll look at why, as well as at the one case where an inline rescue makes
        sense.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=117\">022-inline-rescue.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=118\">022-inline-rescue.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=119\">RubyTapas022-Inline-Rescue.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ede0638a5c8715c4bbce0fd777995cfe9a788e3f</guid>\n
        \     <pubDate>Mon, 12 Nov 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/119/RubyTapas022-Inline-Rescue.mp4\"
        length=\"34716400\" type=\"video/mp4\"/>\n      <itunes:subtitle>When to put
        a rescue at the end of a line.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[021 Domain Model Events]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=59</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In this episode
        we take a look at a common problem in Rails development: slimming down a controller
        whose functionality can't easily be pushed down into models. We address the
        problem using the Observer pattern and a tell-don't-ask design.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=106\">021-domain-model-events.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=107\">021-domain-model-events.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=108\">RubyTapas021-Domain-Model-Events.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-bb31cc8d9b6a73a437d7cd2bb96debf661ef215f</guid>\n
        \     <pubDate>Fri, 09 Nov 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/108/RubyTapas021-Domain-Model-Events.mp4\"
        length=\"179704192\" type=\"video/mp4\"/>\n      <itunes:subtitle>Refactoring
        a Rails controller into a tell-don't-ask style</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[020 Struct]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=58</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        previous episodes we've used the Struct class in passing to quickly construct
        classes. This time, we put Struct in the spotlight, and put it through its
        paces. You'll want to watch this one through even if you're familiar with
        Struct; you may find it has more tricks up its sleeve than you realized.</p>\n
        \         </div>\n          <h3>Attached Files</h3>\n          <ul>\n          <li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=103\">020-struct.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=104\">020-struct.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=105\">RubyTapas020-Struct.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a5f31fbed48fe51bc550940662ff7a433d24ff8b</guid>\n
        \     <pubDate>Wed, 07 Nov 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/105/RubyTapas020-Struct.mp4\"
        length=\"28372973\" type=\"video/mp4\"/>\n      <itunes:subtitle>A short but
        thorough introduction to the Struct class</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[019 Pluggable Selector]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=57</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        today's episode, we revisit episode 11 (Method and Message), and take a look
        at a way to make the coupling between objects even looser, by making the name
        of the message one object sends to another variable.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=100\">019-pluggable-selector.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=101\">019-pluggable-selector.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=102\">RubyTapas019-Pluggable-Selector.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-c4e2cb82c50fa3c4cd188334ba85d5407895ecdc</guid>\n
        \     <pubDate>Mon, 05 Nov 2012 09:00:00 -0500</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/102/RubyTapas019-Pluggable-Selector.mp4\"
        length=\"25934030\" type=\"video/mp4\"/>\n      <itunes:subtitle>Sometimes
        we need just one more level of indirection.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[018 Subclassing Array]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=53</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Sooner
        or later you'll want to subclass <tt>Array</tt>. This episode looks at why
        that's a bad idea, and presents an alternative.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=97\">018-subclassing-array.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=98\">018-subclassing-array.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=99\">RubyTapas018-Subclassing-Array.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-696a9d33f9ba6a4f5c690fa4ee31ec3690962124</guid>\n
        \     <pubDate>Fri, 02 Nov 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/99/RubyTapas018-Subclassing-Array.mp4\"
        length=\"27798981\" type=\"video/mp4\"/>\n      <itunes:subtitle>Why subclassing
        Array isn't such a good idea.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[017 Pay it Forward]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=52</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In this episode,
        &nbsp;we explore command/query separation by looking at what happens to unit
        tests when the separation breaks down.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=94\">pay-it-forward.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=95\">pay-it-forward.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=96\">RubyTapas017-Pay-it-Forward.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-d4b06cf0cbcb2f723b870ecc76abeb4ae733d1ea</guid>\n
        \     <pubDate>Wed, 31 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/96/RubyTapas017-Pay-it-Forward.mp4\"
        length=\"79703035\" type=\"video/mp4\"/>\n      <itunes:subtitle>Using tests
        to understand command/query separation.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[016 super in Modules]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=51</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>How
        to find out if there is a super method to be called, and other tricks for
        using <tt>super</tt> within a module.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=91\">016-super-in-modules.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=92\">016-super-in-modules.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=93\">RubyTapas0016-super-in-modules.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-b0889d978cdfa43470f5ac1901daf12e555bdb6c</guid>\n
        \     <pubDate>Mon, 29 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/93/RubyTapas0016-super-in-modules.mp4\"
        length=\"30938283\" type=\"video/mp4\"/>\n      <itunes:subtitle>Special considerations
        for using the `super` keyword in a module.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[015 Advanced #fetch]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=48</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In
        this final installment on the #fetch method we look at #fetch beyond Hash;
        #fetch with nested hashes; re-using default blocks; and more.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=84\">015-advanced-fetch.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=85\">015-advanced-fetch.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=86\">RubyTapas015-Advanced-Fetch.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-03e2265057df71658f04e8e4dccef9a36204b4a1</guid>\n
        \     <pubDate>Fri, 26 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/86/RubyTapas015-Advanced-Fetch.mp4\"
        length=\"23486455\" type=\"video/mp4\"/>\n      <itunes:subtitle>In this final
        installment on the `#fetch` method we look at `#fetch` beyond Hash; `#fetch`
        with nested hashes; re-using default blocks; and more.</itunes:subtitle>\n
        \     <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[014 super]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=47</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>A
        dive into some of the dark corners of the `super` keyword.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=81\">014-super.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=82\">014-super.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=83\">RubyTapas014-super.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-79a8b6297343c5f46332e5d9f9011480f41d51c7</guid>\n
        \     <pubDate>Wed, 24 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/83/RubyTapas014-super.mp4\"
        length=\"19488400\" type=\"video/mp4\"/>\n      <itunes:subtitle>A dive into
        some of the dark corners of the `super` keyword.</itunes:subtitle>\n      <itunes:image
        href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n    </item>\n    <item>\n
        \     <title><![CDATA[013 Singleton Objects]]></title>\n      <link>https://rubytapas.dpdcart.com/subscriber/post?id=46</link>\n
        \     <description><![CDATA[<div class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Sometimes
        one instance is all you need.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=78\">RubyTapas0013-SingletonObjects.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=79\">013-singleton-objects.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=80\">013-singleton-objects.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-26b1a34a404659ee23bc5204e51f93cca6bda40d</guid>\n
        \     <pubDate>Mon, 22 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/78/RubyTapas0013-SingletonObjects.mp4\"
        length=\"38627204\" type=\"video/mp4\"/>\n      <itunes:subtitle>Sometimes
        one instance is all you need.</itunes:subtitle>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[012: #fetch for Defaults]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=45</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>How to use
        Hash#fetch to provide defaults for missing keys, and why you might prefer
        that to other techniques for defaulting values.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=75\">012-fetch-for-defaults.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=76\">012-fetch-for-defaults.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=77\">RubyTapas012-Fetch-for-Defaults.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-0c2f8c9eadd894907b23a158c3f72d38d2a747f3</guid>\n
        \     <pubDate>Fri, 19 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/77/RubyTapas012-Fetch-for-Defaults.mp4\"
        length=\"28787653\" type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[011: Method and Message]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=44</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>A look at
        the difference between methods and messages, and why passing methods around
        isn't as common in Ruby as it is in e.g. JavaScript.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=71\">011-method-and-message.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=72\">message.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=73\">method.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=74\">RubyTapas011-Method-And-Message.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-526418232c6b44d3e6558186331d465cd6e8b33b</guid>\n
        \     <pubDate>Wed, 17 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/74/RubyTapas011-Method-And-Message.mp4\"
        length=\"55239422\" type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[010 Finding $HOME]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=43</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>How to reliably
        discover a user's home directory.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=68\">RubyTapas010-Finding-Home.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=69\">010-finding-home.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=70\">010-finding-home.html</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-7ddc2d3a5de074bb541b10f8059fa15676de5377</guid>\n
        \     <pubDate>Mon, 15 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/68/RubyTapas010-Finding-Home.mp4\"
        length=\"10765581\" type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[009 Symbol Literals]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=39</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Some alternative
        ways to write symbols in Ruby code.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=65\">009-symbol-literals.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=66\">009-symbol-literals.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=67\">RubyTapas009-Symbol-Literals.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-092696617ace450bc56ecdf3d32676c4ed649737</guid>\n
        \     <pubDate>Fri, 12 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/67/RubyTapas009-Symbol-Literals.mp4\"
        length=\"11152006\" type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[008 #fetch as an Assertion]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=38</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Hash#fetch
        is one of my favorite methods. In this episode, I take a look at using it
        to assert the existence of hash keys.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=62\">008-fetch-as-assertion.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=63\">008-fetch-as-assertion.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=64\">RubyTapas008-Fetch-as-an-Assertion.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-05db052781ab7577593af2587b04b18df321cab1</guid>\n
        \     <pubDate>Wed, 10 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/64/RubyTapas008-Fetch-as-an-Assertion.mp4\"
        length=\"27894419\" type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[007 Constructors]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=32</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>A look into
        how Ruby's object construction works, and how we can customize constructors
        for special scenarios.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=49\">007-constructors.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=50\">007-constructors.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=51\">RubyTapas007-Constructors.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-4944ca6e0b9507b6f282f89a7ef898f523e27927</guid>\n
        \     <pubDate>Mon, 08 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/51/RubyTapas007-Constructors.mp4\"
        length=\"37212720\" type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[006 Forwardable]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=31</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>A short introduction
        to using Ruby's Forwardable library for object composition.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=46\">RubyTapas006-Forwardable.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=47\">006-forwardable.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=48\">006-forwardable.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-a0a73da38a46bb08753c9371cff3d5800a453929</guid>\n
        \     <pubDate>Fri, 05 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/46/RubyTapas006-Forwardable.mp4\"
        length=\"54753001\" type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[005 Array Literals]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=27</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Composing
        command lines with fancy array literals.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=38\">RubyTapas005.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=39\">005-array-literals.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=40\">005-array-literals.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-fc854d43484d212cf08a36fd13e5cf8c7fa427d5</guid>\n
        \     <pubDate>Wed, 03 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/38/RubyTapas005.mp4\" length=\"28831935\"
        type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[004 Barewords]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=26</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In this longer-than-usual
        episode, some thoughts on how to enable method logic to remain stable and
        unchanged while evolving and changing the source and scope of the values used
        by the logic.</p>\n          </div>\n          <h3>Attached Files</h3>\n          <ul>\n
        \         <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=43\">barewords.rb</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=44\">barewords.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=45\">RubyTapas-Barewords.mp4</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-79af0936dda4a452fa19be8b54aecd2cb1885e2f</guid>\n
        \     <pubDate>Mon, 01 Oct 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/45/RubyTapas-Barewords.mp4\"
        length=\"106907561\" type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[003 Character Literals]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=21</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>Character
        literal syntax in Ruby.</p>\n          </div>\n          <h3>Attached Files</h3>\n
        \         <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=32\">RubyTapas003.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=33\">003-char-literals.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=34\">003-char-literals.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-ed1f01e1872210288982a61742c81df4c7905a4b</guid>\n
        \     <pubDate>Fri, 28 Sep 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/32/RubyTapas003.mp4\" length=\"6910954\"
        type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[002 Large Integer Literals]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=20</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>How to format
        big numbers so that they are readable.</p>\n          </div>\n          <h3>Attached
        Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=29\">RubyTapas002.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=30\">002-large-integer-literals.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=31\">002-large-integer-literals.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-8652bee88eb6fad318e874a29a26513083d47bab</guid>\n
        \     <pubDate>Wed, 26 Sep 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/29/RubyTapas002.mp4\" length=\"4258184\"
        type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n    <item>\n      <title><![CDATA[001 Binary Literals]]></title>\n
        \     <link>https://rubytapas.dpdcart.com/subscriber/post?id=18</link>\n      <description><![CDATA[<div
        class=\"blog-entry\">\n          <div class=\"blog-content\"><p>In this inaugural
        episode, a look at a handy syntax for writing out binary numbers.</p>\n          </div>\n
        \         <h3>Attached Files</h3>\n          <ul>\n          <li><a href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=25\">RubyTapas001.mp4</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=26\">001-binary-literals.html</a></li>\n<li><a
        href=\"https://rubytapas.dpdcart.com/subscriber/download?file_id=27\">001-binary-literals.rb</a></li>\n</ul></div>]]></description>\n
        \     <guid isPermaLink=\"false\">dpd-89e8004c8242e7ad548833bef1e18a5b575c92c1</guid>\n
        \     <pubDate>Mon, 24 Sep 2012 09:00:00 -0400</pubDate>\n      <enclosure
        url=\"https://rubytapas.dpdcart.com/feed/download/25/RubyTapas001.mp4\" length=\"12502397\"
        type=\"video/mp4\"/>\n      <itunes:image href=\"https://getdpd.com/uploads/ruby-tapas.png\"/>\n
        \   </item>\n  </channel>\n</rss>\n"
    http_version: 
  recorded_at: Sun, 28 Dec 2014 06:09:03 GMT
recorded_with: VCR 2.9.3
